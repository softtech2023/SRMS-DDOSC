'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.9157
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Report3"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Report3
    Inherits Global.System.Data.DataSet
    
    Private tablenewCOR As newCORDataTable
    
    Private tableprofile_semesterstude As profile_semesterstudeDataTable
    
    Private tablebillingStatement As billingStatementDataTable
    
    Private tablestatisticalReport As statisticalReportDataTable
    
    Private tablepaymentsaccounts As paymentsaccountsDataTable
    
    Private tableaccountSummary As accountSummaryDataTable
    
    Private tableEnrolmentReportV2 As EnrolmentReportV2DataTable
    
    Private tableTORNew As TORNewDataTable
    
    Private tableDTR As DTRDataTable
    
    Private tableCOR2 As COR2DataTable
    
    Private tablescholarsListingv2 As scholarsListingv2DataTable
    
    Private tableStudentVerification As StudentVerificationDataTable
    
    Private tableCAVDataSet As CAVDataSetDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("newCOR")) Is Nothing) Then
                MyBase.Tables.Add(New newCORDataTable(ds.Tables("newCOR")))
            End If
            If (Not (ds.Tables("profile_semesterstude")) Is Nothing) Then
                MyBase.Tables.Add(New profile_semesterstudeDataTable(ds.Tables("profile_semesterstude")))
            End If
            If (Not (ds.Tables("billingStatement")) Is Nothing) Then
                MyBase.Tables.Add(New billingStatementDataTable(ds.Tables("billingStatement")))
            End If
            If (Not (ds.Tables("statisticalReport")) Is Nothing) Then
                MyBase.Tables.Add(New statisticalReportDataTable(ds.Tables("statisticalReport")))
            End If
            If (Not (ds.Tables("paymentsaccounts")) Is Nothing) Then
                MyBase.Tables.Add(New paymentsaccountsDataTable(ds.Tables("paymentsaccounts")))
            End If
            If (Not (ds.Tables("accountSummary")) Is Nothing) Then
                MyBase.Tables.Add(New accountSummaryDataTable(ds.Tables("accountSummary")))
            End If
            If (Not (ds.Tables("EnrolmentReportV2")) Is Nothing) Then
                MyBase.Tables.Add(New EnrolmentReportV2DataTable(ds.Tables("EnrolmentReportV2")))
            End If
            If (Not (ds.Tables("TORNew")) Is Nothing) Then
                MyBase.Tables.Add(New TORNewDataTable(ds.Tables("TORNew")))
            End If
            If (Not (ds.Tables("DTR")) Is Nothing) Then
                MyBase.Tables.Add(New DTRDataTable(ds.Tables("DTR")))
            End If
            If (Not (ds.Tables("COR2")) Is Nothing) Then
                MyBase.Tables.Add(New COR2DataTable(ds.Tables("COR2")))
            End If
            If (Not (ds.Tables("scholarsListingv2")) Is Nothing) Then
                MyBase.Tables.Add(New scholarsListingv2DataTable(ds.Tables("scholarsListingv2")))
            End If
            If (Not (ds.Tables("StudentVerification")) Is Nothing) Then
                MyBase.Tables.Add(New StudentVerificationDataTable(ds.Tables("StudentVerification")))
            End If
            If (Not (ds.Tables("CAVDataSet")) Is Nothing) Then
                MyBase.Tables.Add(New CAVDataSetDataTable(ds.Tables("CAVDataSet")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property newCOR() As newCORDataTable
        Get
            Return Me.tablenewCOR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property profile_semesterstude() As profile_semesterstudeDataTable
        Get
            Return Me.tableprofile_semesterstude
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property billingStatement() As billingStatementDataTable
        Get
            Return Me.tablebillingStatement
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property statisticalReport() As statisticalReportDataTable
        Get
            Return Me.tablestatisticalReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property paymentsaccounts() As paymentsaccountsDataTable
        Get
            Return Me.tablepaymentsaccounts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property accountSummary() As accountSummaryDataTable
        Get
            Return Me.tableaccountSummary
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrolmentReportV2() As EnrolmentReportV2DataTable
        Get
            Return Me.tableEnrolmentReportV2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TORNew() As TORNewDataTable
        Get
            Return Me.tableTORNew
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DTR() As DTRDataTable
        Get
            Return Me.tableDTR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COR2() As COR2DataTable
        Get
            Return Me.tableCOR2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property scholarsListingv2() As scholarsListingv2DataTable
        Get
            Return Me.tablescholarsListingv2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StudentVerification() As StudentVerificationDataTable
        Get
            Return Me.tableStudentVerification
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CAVDataSet() As CAVDataSetDataTable
        Get
            Return Me.tableCAVDataSet
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Report3 = CType(MyBase.Clone,Report3)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("newCOR")) Is Nothing) Then
                MyBase.Tables.Add(New newCORDataTable(ds.Tables("newCOR")))
            End If
            If (Not (ds.Tables("profile_semesterstude")) Is Nothing) Then
                MyBase.Tables.Add(New profile_semesterstudeDataTable(ds.Tables("profile_semesterstude")))
            End If
            If (Not (ds.Tables("billingStatement")) Is Nothing) Then
                MyBase.Tables.Add(New billingStatementDataTable(ds.Tables("billingStatement")))
            End If
            If (Not (ds.Tables("statisticalReport")) Is Nothing) Then
                MyBase.Tables.Add(New statisticalReportDataTable(ds.Tables("statisticalReport")))
            End If
            If (Not (ds.Tables("paymentsaccounts")) Is Nothing) Then
                MyBase.Tables.Add(New paymentsaccountsDataTable(ds.Tables("paymentsaccounts")))
            End If
            If (Not (ds.Tables("accountSummary")) Is Nothing) Then
                MyBase.Tables.Add(New accountSummaryDataTable(ds.Tables("accountSummary")))
            End If
            If (Not (ds.Tables("EnrolmentReportV2")) Is Nothing) Then
                MyBase.Tables.Add(New EnrolmentReportV2DataTable(ds.Tables("EnrolmentReportV2")))
            End If
            If (Not (ds.Tables("TORNew")) Is Nothing) Then
                MyBase.Tables.Add(New TORNewDataTable(ds.Tables("TORNew")))
            End If
            If (Not (ds.Tables("DTR")) Is Nothing) Then
                MyBase.Tables.Add(New DTRDataTable(ds.Tables("DTR")))
            End If
            If (Not (ds.Tables("COR2")) Is Nothing) Then
                MyBase.Tables.Add(New COR2DataTable(ds.Tables("COR2")))
            End If
            If (Not (ds.Tables("scholarsListingv2")) Is Nothing) Then
                MyBase.Tables.Add(New scholarsListingv2DataTable(ds.Tables("scholarsListingv2")))
            End If
            If (Not (ds.Tables("StudentVerification")) Is Nothing) Then
                MyBase.Tables.Add(New StudentVerificationDataTable(ds.Tables("StudentVerification")))
            End If
            If (Not (ds.Tables("CAVDataSet")) Is Nothing) Then
                MyBase.Tables.Add(New CAVDataSetDataTable(ds.Tables("CAVDataSet")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablenewCOR = CType(MyBase.Tables("newCOR"),newCORDataTable)
        If (initTable = true) Then
            If (Not (Me.tablenewCOR) Is Nothing) Then
                Me.tablenewCOR.InitVars
            End If
        End If
        Me.tableprofile_semesterstude = CType(MyBase.Tables("profile_semesterstude"),profile_semesterstudeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableprofile_semesterstude) Is Nothing) Then
                Me.tableprofile_semesterstude.InitVars
            End If
        End If
        Me.tablebillingStatement = CType(MyBase.Tables("billingStatement"),billingStatementDataTable)
        If (initTable = true) Then
            If (Not (Me.tablebillingStatement) Is Nothing) Then
                Me.tablebillingStatement.InitVars
            End If
        End If
        Me.tablestatisticalReport = CType(MyBase.Tables("statisticalReport"),statisticalReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tablestatisticalReport) Is Nothing) Then
                Me.tablestatisticalReport.InitVars
            End If
        End If
        Me.tablepaymentsaccounts = CType(MyBase.Tables("paymentsaccounts"),paymentsaccountsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepaymentsaccounts) Is Nothing) Then
                Me.tablepaymentsaccounts.InitVars
            End If
        End If
        Me.tableaccountSummary = CType(MyBase.Tables("accountSummary"),accountSummaryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableaccountSummary) Is Nothing) Then
                Me.tableaccountSummary.InitVars
            End If
        End If
        Me.tableEnrolmentReportV2 = CType(MyBase.Tables("EnrolmentReportV2"),EnrolmentReportV2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrolmentReportV2) Is Nothing) Then
                Me.tableEnrolmentReportV2.InitVars
            End If
        End If
        Me.tableTORNew = CType(MyBase.Tables("TORNew"),TORNewDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTORNew) Is Nothing) Then
                Me.tableTORNew.InitVars
            End If
        End If
        Me.tableDTR = CType(MyBase.Tables("DTR"),DTRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDTR) Is Nothing) Then
                Me.tableDTR.InitVars
            End If
        End If
        Me.tableCOR2 = CType(MyBase.Tables("COR2"),COR2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOR2) Is Nothing) Then
                Me.tableCOR2.InitVars
            End If
        End If
        Me.tablescholarsListingv2 = CType(MyBase.Tables("scholarsListingv2"),scholarsListingv2DataTable)
        If (initTable = true) Then
            If (Not (Me.tablescholarsListingv2) Is Nothing) Then
                Me.tablescholarsListingv2.InitVars
            End If
        End If
        Me.tableStudentVerification = CType(MyBase.Tables("StudentVerification"),StudentVerificationDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudentVerification) Is Nothing) Then
                Me.tableStudentVerification.InitVars
            End If
        End If
        Me.tableCAVDataSet = CType(MyBase.Tables("CAVDataSet"),CAVDataSetDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCAVDataSet) Is Nothing) Then
                Me.tableCAVDataSet.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Report3"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Report3.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablenewCOR = New newCORDataTable
        MyBase.Tables.Add(Me.tablenewCOR)
        Me.tableprofile_semesterstude = New profile_semesterstudeDataTable
        MyBase.Tables.Add(Me.tableprofile_semesterstude)
        Me.tablebillingStatement = New billingStatementDataTable
        MyBase.Tables.Add(Me.tablebillingStatement)
        Me.tablestatisticalReport = New statisticalReportDataTable
        MyBase.Tables.Add(Me.tablestatisticalReport)
        Me.tablepaymentsaccounts = New paymentsaccountsDataTable
        MyBase.Tables.Add(Me.tablepaymentsaccounts)
        Me.tableaccountSummary = New accountSummaryDataTable
        MyBase.Tables.Add(Me.tableaccountSummary)
        Me.tableEnrolmentReportV2 = New EnrolmentReportV2DataTable
        MyBase.Tables.Add(Me.tableEnrolmentReportV2)
        Me.tableTORNew = New TORNewDataTable
        MyBase.Tables.Add(Me.tableTORNew)
        Me.tableDTR = New DTRDataTable
        MyBase.Tables.Add(Me.tableDTR)
        Me.tableCOR2 = New COR2DataTable
        MyBase.Tables.Add(Me.tableCOR2)
        Me.tablescholarsListingv2 = New scholarsListingv2DataTable
        MyBase.Tables.Add(Me.tablescholarsListingv2)
        Me.tableStudentVerification = New StudentVerificationDataTable
        MyBase.Tables.Add(Me.tableStudentVerification)
        Me.tableCAVDataSet = New CAVDataSetDataTable
        MyBase.Tables.Add(Me.tableCAVDataSet)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializenewCOR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeprofile_semesterstude() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializebillingStatement() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializestatisticalReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepaymentsaccounts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeaccountSummary() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrolmentReportV2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTORNew() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDTR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOR2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializescholarsListingv2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudentVerification() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCAVDataSet() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Report3 = New Report3
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub newCORRowChangeEventHandler(ByVal sender As Object, ByVal e As newCORRowChangeEvent)
    
    Public Delegate Sub profile_semesterstudeRowChangeEventHandler(ByVal sender As Object, ByVal e As profile_semesterstudeRowChangeEvent)
    
    Public Delegate Sub billingStatementRowChangeEventHandler(ByVal sender As Object, ByVal e As billingStatementRowChangeEvent)
    
    Public Delegate Sub statisticalReportRowChangeEventHandler(ByVal sender As Object, ByVal e As statisticalReportRowChangeEvent)
    
    Public Delegate Sub paymentsaccountsRowChangeEventHandler(ByVal sender As Object, ByVal e As paymentsaccountsRowChangeEvent)
    
    Public Delegate Sub accountSummaryRowChangeEventHandler(ByVal sender As Object, ByVal e As accountSummaryRowChangeEvent)
    
    Public Delegate Sub EnrolmentReportV2RowChangeEventHandler(ByVal sender As Object, ByVal e As EnrolmentReportV2RowChangeEvent)
    
    Public Delegate Sub TORNewRowChangeEventHandler(ByVal sender As Object, ByVal e As TORNewRowChangeEvent)
    
    Public Delegate Sub DTRRowChangeEventHandler(ByVal sender As Object, ByVal e As DTRRowChangeEvent)
    
    Public Delegate Sub COR2RowChangeEventHandler(ByVal sender As Object, ByVal e As COR2RowChangeEvent)
    
    Public Delegate Sub scholarsListingv2RowChangeEventHandler(ByVal sender As Object, ByVal e As scholarsListingv2RowChangeEvent)
    
    Public Delegate Sub StudentVerificationRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentVerificationRowChangeEvent)
    
    Public Delegate Sub CAVDataSetRowChangeEventHandler(ByVal sender As Object, ByVal e As CAVDataSetRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class newCORDataTable
        Inherits Global.System.Data.TypedTableBase(Of newCORRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnBirthdate As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnSem As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnMajor As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnLecUnit As Global.System.Data.DataColumn
        
        Private columnLabUnit As Global.System.Data.DataColumn
        
        Private columnUnits As Global.System.Data.DataColumn
        
        Private columnLabTime As Global.System.Data.DataColumn
        
        Private columnSchedTime As Global.System.Data.DataColumn
        
        Private columnRoom As Global.System.Data.DataColumn
        
        Private columnInstructor As Global.System.Data.DataColumn
        
        Private columnschedType As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnRegistrar As Global.System.Data.DataColumn
        
        Private columnregistrarPosition As Global.System.Data.DataColumn
        
        Private columncashier As Global.System.Data.DataColumn
        
        Private columncashierPosition As Global.System.Data.DataColumn
        
        Private columnscholarshipCoordinator As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnPresSign As Global.System.Data.DataColumn
        
        Private columnfooter As Global.System.Data.DataColumn
        
        Private columnregSign As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "newCOR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MajorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMajor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LecUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLecUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchedTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchedTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RoomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRoom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InstructorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInstructor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schedTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschedType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrarPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrarPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashierPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashierPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property scholarshipCoordinatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnscholarshipCoordinator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PresSignColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPresSign
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property footerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfooter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regSignColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregSign
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As newCORRow
            Get
                Return CType(Me.Rows(index),newCORRow)
            End Get
        End Property
        
        Public Event newCORRowChanging As newCORRowChangeEventHandler
        
        Public Event newCORRowChanged As newCORRowChangeEventHandler
        
        Public Event newCORRowDeleting As newCORRowChangeEventHandler
        
        Public Event newCORRowDeleted As newCORRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddnewCORRow(ByVal row As newCORRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddnewCORRow( _
                    ByVal StudentNumber As String,  _
                    ByVal StudentName As String,  _
                    ByVal Birthdate As Date,  _
                    ByVal Sex As String,  _
                    ByVal Sem As String,  _
                    ByVal SY As String,  _
                    ByVal Course As String,  _
                    ByVal Major As String,  _
                    ByVal YearLevel As String,  _
                    ByVal SubjectCode As String,  _
                    ByVal Description As String,  _
                    ByVal Section As String,  _
                    ByVal LecUnit As String,  _
                    ByVal LabUnit As String,  _
                    ByVal Units As Double,  _
                    ByVal LabTime As String,  _
                    ByVal SchedTime As String,  _
                    ByVal Room As String,  _
                    ByVal Instructor As String,  _
                    ByVal schedType As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal Registrar As String,  _
                    ByVal registrarPosition As String,  _
                    ByVal cashier As String,  _
                    ByVal cashierPosition As String,  _
                    ByVal scholarshipCoordinator As String,  _
                    ByVal letterHead() As Byte,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal PresSign() As Byte,  _
                    ByVal footer() As Byte,  _
                    ByVal regSign() As Byte) As newCORRow
            Dim rownewCORRow As newCORRow = CType(Me.NewRow,newCORRow)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, StudentName, Birthdate, Sex, Sem, SY, Course, Major, YearLevel, SubjectCode, Description, Section, LecUnit, LabUnit, Units, LabTime, SchedTime, Room, Instructor, schedType, SchoolName, SchoolAddress, Registrar, registrarPosition, cashier, cashierPosition, scholarshipCoordinator, letterHead, SchoolHead, sHeadPosition, PresSign, footer, regSign}
            rownewCORRow.ItemArray = columnValuesArray
            Me.Rows.Add(rownewCORRow)
            Return rownewCORRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As newCORRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),newCORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As newCORDataTable = CType(MyBase.Clone,newCORDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New newCORDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnBirthdate = MyBase.Columns("Birthdate")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnSem = MyBase.Columns("Sem")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnMajor = MyBase.Columns("Major")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnLecUnit = MyBase.Columns("LecUnit")
            Me.columnLabUnit = MyBase.Columns("LabUnit")
            Me.columnUnits = MyBase.Columns("Units")
            Me.columnLabTime = MyBase.Columns("LabTime")
            Me.columnSchedTime = MyBase.Columns("SchedTime")
            Me.columnRoom = MyBase.Columns("Room")
            Me.columnInstructor = MyBase.Columns("Instructor")
            Me.columnschedType = MyBase.Columns("schedType")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnRegistrar = MyBase.Columns("Registrar")
            Me.columnregistrarPosition = MyBase.Columns("registrarPosition")
            Me.columncashier = MyBase.Columns("cashier")
            Me.columncashierPosition = MyBase.Columns("cashierPosition")
            Me.columnscholarshipCoordinator = MyBase.Columns("scholarshipCoordinator")
            Me.columnletterHead = MyBase.Columns("letterHead")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnPresSign = MyBase.Columns("PresSign")
            Me.columnfooter = MyBase.Columns("footer")
            Me.columnregSign = MyBase.Columns("regSign")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnBirthdate = New Global.System.Data.DataColumn("Birthdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthdate)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnSem = New Global.System.Data.DataColumn("Sem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSem)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnMajor = New Global.System.Data.DataColumn("Major", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMajor)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnLecUnit = New Global.System.Data.DataColumn("LecUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLecUnit)
            Me.columnLabUnit = New Global.System.Data.DataColumn("LabUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabUnit)
            Me.columnUnits = New Global.System.Data.DataColumn("Units", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits)
            Me.columnLabTime = New Global.System.Data.DataColumn("LabTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabTime)
            Me.columnSchedTime = New Global.System.Data.DataColumn("SchedTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchedTime)
            Me.columnRoom = New Global.System.Data.DataColumn("Room", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRoom)
            Me.columnInstructor = New Global.System.Data.DataColumn("Instructor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstructor)
            Me.columnschedType = New Global.System.Data.DataColumn("schedType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschedType)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnRegistrar = New Global.System.Data.DataColumn("Registrar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrar)
            Me.columnregistrarPosition = New Global.System.Data.DataColumn("registrarPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrarPosition)
            Me.columncashier = New Global.System.Data.DataColumn("cashier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashier)
            Me.columncashierPosition = New Global.System.Data.DataColumn("cashierPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashierPosition)
            Me.columnscholarshipCoordinator = New Global.System.Data.DataColumn("scholarshipCoordinator", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnscholarshipCoordinator)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnPresSign = New Global.System.Data.DataColumn("PresSign", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPresSign)
            Me.columnfooter = New Global.System.Data.DataColumn("footer", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfooter)
            Me.columnregSign = New Global.System.Data.DataColumn("regSign", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregSign)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnStudentName.MaxLength = 182
            Me.columnBirthdate.AllowDBNull = false
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnSem.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnCourse.AllowDBNull = false
            Me.columnCourse.MaxLength = 250
            Me.columnMajor.AllowDBNull = false
            Me.columnMajor.MaxLength = 45
            Me.columnYearLevel.AllowDBNull = false
            Me.columnYearLevel.MaxLength = 45
            Me.columnSubjectCode.MaxLength = 45
            Me.columnDescription.MaxLength = 250
            Me.columnSection.MaxLength = 45
            Me.columnLecUnit.MaxLength = 45
            Me.columnLabUnit.MaxLength = 45
            Me.columnLabTime.MaxLength = 45
            Me.columnSchedTime.MaxLength = 45
            Me.columnRoom.MaxLength = 45
            Me.columnInstructor.MaxLength = 45
            Me.columnschedType.AllowDBNull = false
            Me.columnschedType.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnRegistrar.AllowDBNull = false
            Me.columnRegistrar.MaxLength = 65
            Me.columnregistrarPosition.AllowDBNull = false
            Me.columnregistrarPosition.MaxLength = 45
            Me.columncashier.AllowDBNull = false
            Me.columncashier.MaxLength = 45
            Me.columncashierPosition.AllowDBNull = false
            Me.columncashierPosition.MaxLength = 45
            Me.columnscholarshipCoordinator.AllowDBNull = false
            Me.columnscholarshipCoordinator.MaxLength = 65
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewnewCORRow() As newCORRow
            Return CType(Me.NewRow,newCORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New newCORRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(newCORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.newCORRowChangedEvent) Is Nothing) Then
                RaiseEvent newCORRowChanged(Me, New newCORRowChangeEvent(CType(e.Row,newCORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.newCORRowChangingEvent) Is Nothing) Then
                RaiseEvent newCORRowChanging(Me, New newCORRowChangeEvent(CType(e.Row,newCORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.newCORRowDeletedEvent) Is Nothing) Then
                RaiseEvent newCORRowDeleted(Me, New newCORRowChangeEvent(CType(e.Row,newCORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.newCORRowDeletingEvent) Is Nothing) Then
                RaiseEvent newCORRowDeleting(Me, New newCORRowChangeEvent(CType(e.Row,newCORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovenewCORRow(ByVal row As newCORRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Report3 = New Report3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "newCORDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class profile_semesterstudeDataTable
        Inherits Global.System.Data.TypedTableBase(Of profile_semesterstudeRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnCivilStatus As Global.System.Data.DataColumn
        
        Private columnBirthPlace As Global.System.Data.DataColumn
        
        Private columnReligion As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columncontactNo As Global.System.Data.DataColumn
        
        Private columnworking As Global.System.Data.DataColumn
        
        Private columnoccupation As Global.System.Data.DataColumn
        
        Private columnsalary As Global.System.Data.DataColumn
        
        Private columnemployer As Global.System.Data.DataColumn
        
        Private columnemployerAddress As Global.System.Data.DataColumn
        
        Private columnbirthDate As Global.System.Data.DataColumn
        
        Private columnadmissionDate As Global.System.Data.DataColumn
        
        Private columngraduationDate As Global.System.Data.DataColumn
        
        Private columnguardian As Global.System.Data.DataColumn
        
        Private columnguardianRelationship As Global.System.Data.DataColumn
        
        Private columnguardianContact As Global.System.Data.DataColumn
        
        Private columnguardianAddress As Global.System.Data.DataColumn
        
        Private columnspouse As Global.System.Data.DataColumn
        
        Private columnspouseRelationship As Global.System.Data.DataColumn
        
        Private columnspouseContact As Global.System.Data.DataColumn
        
        Private columnchildren As Global.System.Data.DataColumn
        
        Private columnspouseIncome As Global.System.Data.DataColumn
        
        Private columnimagePath As Global.System.Data.DataColumn
        
        Private columncourse As Global.System.Data.DataColumn
        
        Private columnyearLevel As Global.System.Data.DataColumn
        
        Private columnfather As Global.System.Data.DataColumn
        
        Private columnfOccupation As Global.System.Data.DataColumn
        
        Private columnfatherAddress As Global.System.Data.DataColumn
        
        Private columnmother As Global.System.Data.DataColumn
        
        Private columnmOccupation As Global.System.Data.DataColumn
        
        Private columnmotherAddress As Global.System.Data.DataColumn
        
        Private columnsiblings As Global.System.Data.DataColumn
        
        Private columnbirthOrder As Global.System.Data.DataColumn
        
        Private columnage As Global.System.Data.DataColumn
        
        Private columntitle As Global.System.Data.DataColumn
        
        Private columnpronoun As Global.System.Data.DataColumn
        
        Private columnpronoun2 As Global.System.Data.DataColumn
        
        Private columnpronoun3 As Global.System.Data.DataColumn
        
        Private columnscholarship As Global.System.Data.DataColumn
        
        Private columnethnicity As Global.System.Data.DataColumn
        
        Private columnfourPs As Global.System.Data.DataColumn
        
        Private columnseniorCitizen As Global.System.Data.DataColumn
        
        Private columnals As Global.System.Data.DataColumn
        
        Private columndisability As Global.System.Data.DataColumn
        
        Private columnparentsMonthly As Global.System.Data.DataColumn
        
        Private columnprovince As Global.System.Data.DataColumn
        
        Private columncity As Global.System.Data.DataColumn
        
        Private columnbrgy As Global.System.Data.DataColumn
        
        Private columnsitio As Global.System.Data.DataColumn
        
        Private columnprovincePresent As Global.System.Data.DataColumn
        
        Private columncityPresent As Global.System.Data.DataColumn
        
        Private columnbrgyPresent As Global.System.Data.DataColumn
        
        Private columnsitioPresent As Global.System.Data.DataColumn
        
        Private columnelementary As Global.System.Data.DataColumn
        
        Private columnelementaryAddress As Global.System.Data.DataColumn
        
        Private columnelemGraduated As Global.System.Data.DataColumn
        
        Private columnelemMerits As Global.System.Data.DataColumn
        
        Private columnsecondary As Global.System.Data.DataColumn
        
        Private columnsecondaryAddress As Global.System.Data.DataColumn
        
        Private columnsecondaryGraduated As Global.System.Data.DataColumn
        
        Private columnsecondaryMerits As Global.System.Data.DataColumn
        
        Private columnvocational As Global.System.Data.DataColumn
        
        Private columnvocationaladdress As Global.System.Data.DataColumn
        
        Private columnvocationalGraduated As Global.System.Data.DataColumn
        
        Private columnvocationalCourse As Global.System.Data.DataColumn
        
        Private columnncLevel As Global.System.Data.DataColumn
        
        Private columntransfereeSchool As Global.System.Data.DataColumn
        
        Private columntransfereeAddress As Global.System.Data.DataColumn
        
        Private columntransfereeCourse As Global.System.Data.DataColumn
        
        Private columntransfereeGraduated As Global.System.Data.DataColumn
        
        Private columnskills As Global.System.Data.DataColumn
        
        Private columnsettingsID As Global.System.Data.DataColumn
        
        Private columnapplicationNo As Global.System.Data.DataColumn
        
        Private columntestCenter As Global.System.Data.DataColumn
        
        Private columntestDate As Global.System.Data.DataColumn
        
        Private columnencoder As Global.System.Data.DataColumn
        
        Private columnsemstudentid As Global.System.Data.DataColumn
        
        Private columnStudentNumber1 As Global.System.Data.DataColumn
        
        Private columnFName As Global.System.Data.DataColumn
        
        Private columnMName As Global.System.Data.DataColumn
        
        Private columnLName As Global.System.Data.DataColumn
        
        Private columnCourse1 As Global.System.Data.DataColumn
        
        Private columnYearLevel1 As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnTerm As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnStudeStatus As Global.System.Data.DataColumn
        
        Private columnScholarship1 As Global.System.Data.DataColumn
        
        Private columnDurationFrom As Global.System.Data.DataColumn
        
        Private columnDurationTo As Global.System.Data.DataColumn
        
        Private columnAssessmentDate As Global.System.Data.DataColumn
        
        Private columnAssessmentResult As Global.System.Data.DataColumn
        
        Private columnPayingStatus As Global.System.Data.DataColumn
        
        Private columnGrantAmount As Global.System.Data.DataColumn
        
        Private columnYearLevelStat As Global.System.Data.DataColumn
        
        Private columnMajor As Global.System.Data.DataColumn
        
        Private columnsettingsID1 As Global.System.Data.DataColumn
        
        Private columnenroledDate As Global.System.Data.DataColumn
        
        Private columncrossEnrollee As Global.System.Data.DataColumn
        
        Private columnclassSession As Global.System.Data.DataColumn
        
        Private columnprevGPA As Global.System.Data.DataColumn
        
        Private columnsettingsID2 As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnRegistrar As Global.System.Data.DataColumn
        
        Private columnregistrarPosition As Global.System.Data.DataColumn
        
        Private columnclerk As Global.System.Data.DataColumn
        
        Private columnclerkPosition As Global.System.Data.DataColumn
        
        Private columnadministrative As Global.System.Data.DataColumn
        
        Private columnadministrativePosition As Global.System.Data.DataColumn
        
        Private columncashier As Global.System.Data.DataColumn
        
        Private columncashierPosition As Global.System.Data.DataColumn
        
        Private columnadmissionOfficer As Global.System.Data.DataColumn
        
        Private columnstudentNoCode As Global.System.Data.DataColumn
        
        Private columnadmissionSem As Global.System.Data.DataColumn
        
        Private columnadmissionSY As Global.System.Data.DataColumn
        
        Private columnadmissionBasis As Global.System.Data.DataColumn
        
        Private columnlastAttended As Global.System.Data.DataColumn
        
        Private columnlastSchool As Global.System.Data.DataColumn
        
        Private columnlastSchoolDate As Global.System.Data.DataColumn
        
        Private columnscholarshipCoordinator As Global.System.Data.DataColumn
        
        Private columnaccountant As Global.System.Data.DataColumn
        
        Private columnschoolLogo As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "profile_semesterstude"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CivilStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCivilStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthPlaceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthPlace
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReligionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReligion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property contactNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontactNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property workingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnworking
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property occupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property salaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property employerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemployer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property employerAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemployerAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property birthDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbirthDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property admissionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadmissionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property graduationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngraduationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property guardianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnguardian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property guardianRelationshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnguardianRelationship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property guardianContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnguardianContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property guardianAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnguardianAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property spouseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnspouse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property spouseRelationshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnspouseRelationship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property spouseContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnspouseContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property childrenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchildren
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property spouseIncomeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnspouseIncome
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imagePathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimagePath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property courseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fatherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfather
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fOccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fatherAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfatherAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property motherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmother
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mOccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property motherAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmotherAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property siblingsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsiblings
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property birthOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbirthOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property titleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pronounColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpronoun
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pronoun2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnpronoun2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pronoun3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnpronoun3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property scholarshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnscholarship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ethnicityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnethnicity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fourPsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfourPs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property seniorCitizenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseniorCitizen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnals
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property disabilityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndisability
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property parentsMonthlyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnparentsMonthly
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property provinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprovince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property brgyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbrgy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sitioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsitio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property provincePresentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprovincePresent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cityPresentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncityPresent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property brgyPresentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbrgyPresent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sitioPresentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsitioPresent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property elementaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnelementary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property elementaryAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnelementaryAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property elemGraduatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnelemGraduated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property elemMeritsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnelemMerits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property secondaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsecondary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property secondaryAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsecondaryAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property secondaryGraduatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsecondaryGraduated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property secondaryMeritsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsecondaryMerits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vocationalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvocational
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vocationaladdressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvocationaladdress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vocationalGraduatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvocationalGraduated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vocationalCourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvocationalCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ncLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnncLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transfereeSchoolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransfereeSchool
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transfereeAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransfereeAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transfereeCourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransfereeCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transfereeGraduatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransfereeGraduated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property skillsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnskills
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property settingsIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsettingsID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property applicationNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnapplicationNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testCenterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntestCenter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntestDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property encoderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnencoder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semstudentidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemstudentid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumber1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Course1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevel1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TermColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTerm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudeStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudeStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Scholarship1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnScholarship1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DurationFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDurationFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DurationToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDurationTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssessmentDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssessmentDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssessmentResultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssessmentResult
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayingStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayingStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrantAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrantAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelStatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevelStat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MajorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMajor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property settingsID1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsettingsID1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property enroledDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnenroledDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property crossEnrolleeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncrossEnrollee
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property classSessionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclassSession
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prevGPAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprevGPA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property settingsID2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsettingsID2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrarPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrarPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clerkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclerk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clerkPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclerkPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property administrativeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadministrative
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property administrativePositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadministrativePosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashierPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashierPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property admissionOfficerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadmissionOfficer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentNoCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentNoCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property admissionSemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadmissionSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property admissionSYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadmissionSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property admissionBasisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadmissionBasis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lastAttendedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlastAttended
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lastSchoolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlastSchool
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lastSchoolDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlastSchoolDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property scholarshipCoordinatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnscholarshipCoordinator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property accountantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccountant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schoolLogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschoolLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As profile_semesterstudeRow
            Get
                Return CType(Me.Rows(index),profile_semesterstudeRow)
            End Get
        End Property
        
        Public Event profile_semesterstudeRowChanging As profile_semesterstudeRowChangeEventHandler
        
        Public Event profile_semesterstudeRowChanged As profile_semesterstudeRowChangeEventHandler
        
        Public Event profile_semesterstudeRowDeleting As profile_semesterstudeRowChangeEventHandler
        
        Public Event profile_semesterstudeRowDeleted As profile_semesterstudeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addprofile_semesterstudeRow(ByVal row As profile_semesterstudeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addprofile_semesterstudeRow( _
                    ByVal StudentNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Sex As String,  _
                    ByVal CivilStatus As String,  _
                    ByVal BirthPlace As String,  _
                    ByVal Religion As String,  _
                    ByVal email As String,  _
                    ByVal contactNo As String,  _
                    ByVal working As String,  _
                    ByVal occupation As String,  _
                    ByVal salary As String,  _
                    ByVal employer As String,  _
                    ByVal employerAddress As String,  _
                    ByVal birthDate As Date,  _
                    ByVal admissionDate As Date,  _
                    ByVal graduationDate As String,  _
                    ByVal guardian As String,  _
                    ByVal guardianRelationship As String,  _
                    ByVal guardianContact As String,  _
                    ByVal guardianAddress As String,  _
                    ByVal spouse As String,  _
                    ByVal spouseRelationship As String,  _
                    ByVal spouseContact As String,  _
                    ByVal children As String,  _
                    ByVal spouseIncome As String,  _
                    ByVal imagePath As String,  _
                    ByVal course As String,  _
                    ByVal yearLevel As String,  _
                    ByVal father As String,  _
                    ByVal fOccupation As String,  _
                    ByVal fatherAddress As String,  _
                    ByVal mother As String,  _
                    ByVal mOccupation As String,  _
                    ByVal motherAddress As String,  _
                    ByVal siblings As String,  _
                    ByVal birthOrder As String,  _
                    ByVal age As String,  _
                    ByVal title As String,  _
                    ByVal pronoun As String,  _
                    ByVal pronoun2 As String,  _
                    ByVal pronoun3 As String,  _
                    ByVal scholarship As String,  _
                    ByVal ethnicity As String,  _
                    ByVal fourPs As String,  _
                    ByVal seniorCitizen As String,  _
                    ByVal als As String,  _
                    ByVal disability As String,  _
                    ByVal parentsMonthly As String,  _
                    ByVal province As String,  _
                    ByVal city As String,  _
                    ByVal brgy As String,  _
                    ByVal sitio As String,  _
                    ByVal provincePresent As String,  _
                    ByVal cityPresent As String,  _
                    ByVal brgyPresent As String,  _
                    ByVal sitioPresent As String,  _
                    ByVal elementary As String,  _
                    ByVal elementaryAddress As String,  _
                    ByVal elemGraduated As String,  _
                    ByVal elemMerits As String,  _
                    ByVal secondary As String,  _
                    ByVal secondaryAddress As String,  _
                    ByVal secondaryGraduated As String,  _
                    ByVal secondaryMerits As String,  _
                    ByVal vocational As String,  _
                    ByVal vocationaladdress As String,  _
                    ByVal vocationalGraduated As String,  _
                    ByVal vocationalCourse As String,  _
                    ByVal ncLevel As String,  _
                    ByVal transfereeSchool As String,  _
                    ByVal transfereeAddress As String,  _
                    ByVal transfereeCourse As String,  _
                    ByVal transfereeGraduated As String,  _
                    ByVal skills As String,  _
                    ByVal settingsID As UInteger,  _
                    ByVal applicationNo As String,  _
                    ByVal testCenter As String,  _
                    ByVal testDate As Date,  _
                    ByVal encoder As String,  _
                    ByVal semstudentid As UInteger,  _
                    ByVal StudentNumber1 As String,  _
                    ByVal FName As String,  _
                    ByVal MName As String,  _
                    ByVal LName As String,  _
                    ByVal Course1 As String,  _
                    ByVal YearLevel1 As String,  _
                    ByVal Status As String,  _
                    ByVal Semester As String,  _
                    ByVal SY As String,  _
                    ByVal Term As String,  _
                    ByVal Section As String,  _
                    ByVal StudeStatus As String,  _
                    ByVal Scholarship1 As String,  _
                    ByVal DurationFrom As String,  _
                    ByVal DurationTo As String,  _
                    ByVal AssessmentDate As String,  _
                    ByVal AssessmentResult As String,  _
                    ByVal PayingStatus As String,  _
                    ByVal GrantAmount As Double,  _
                    ByVal YearLevelStat As String,  _
                    ByVal Major As String,  _
                    ByVal settingsID1 As UInteger,  _
                    ByVal enroledDate As Date,  _
                    ByVal crossEnrollee As String,  _
                    ByVal classSession As String,  _
                    ByVal prevGPA As String,  _
                    ByVal settingsID2 As UInteger,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal Registrar As String,  _
                    ByVal registrarPosition As String,  _
                    ByVal clerk As String,  _
                    ByVal clerkPosition As String,  _
                    ByVal administrative As String,  _
                    ByVal administrativePosition As String,  _
                    ByVal cashier As String,  _
                    ByVal cashierPosition As String,  _
                    ByVal admissionOfficer As String,  _
                    ByVal studentNoCode As String,  _
                    ByVal admissionSem As String,  _
                    ByVal admissionSY As String,  _
                    ByVal admissionBasis As String,  _
                    ByVal lastAttended As String,  _
                    ByVal lastSchool As String,  _
                    ByVal lastSchoolDate As String,  _
                    ByVal scholarshipCoordinator As String,  _
                    ByVal accountant As String,  _
                    ByVal schoolLogo() As Byte,  _
                    ByVal letterHead() As Byte) As profile_semesterstudeRow
            Dim rowprofile_semesterstudeRow As profile_semesterstudeRow = CType(Me.NewRow,profile_semesterstudeRow)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, FirstName, MiddleName, LastName, Sex, CivilStatus, BirthPlace, Religion, email, contactNo, working, occupation, salary, employer, employerAddress, birthDate, admissionDate, graduationDate, guardian, guardianRelationship, guardianContact, guardianAddress, spouse, spouseRelationship, spouseContact, children, spouseIncome, imagePath, course, yearLevel, father, fOccupation, fatherAddress, mother, mOccupation, motherAddress, siblings, birthOrder, age, title, pronoun, pronoun2, pronoun3, scholarship, ethnicity, fourPs, seniorCitizen, als, disability, parentsMonthly, province, city, brgy, sitio, provincePresent, cityPresent, brgyPresent, sitioPresent, elementary, elementaryAddress, elemGraduated, elemMerits, secondary, secondaryAddress, secondaryGraduated, secondaryMerits, vocational, vocationaladdress, vocationalGraduated, vocationalCourse, ncLevel, transfereeSchool, transfereeAddress, transfereeCourse, transfereeGraduated, skills, settingsID, applicationNo, testCenter, testDate, encoder, semstudentid, StudentNumber1, FName, MName, LName, Course1, YearLevel1, Status, Semester, SY, Term, Section, StudeStatus, Scholarship1, DurationFrom, DurationTo, AssessmentDate, AssessmentResult, PayingStatus, GrantAmount, YearLevelStat, Major, settingsID1, enroledDate, crossEnrollee, classSession, prevGPA, settingsID2, SchoolName, SchoolAddress, SchoolHead, sHeadPosition, Registrar, registrarPosition, clerk, clerkPosition, administrative, administrativePosition, cashier, cashierPosition, admissionOfficer, studentNoCode, admissionSem, admissionSY, admissionBasis, lastAttended, lastSchool, lastSchoolDate, scholarshipCoordinator, accountant, schoolLogo, letterHead}
            rowprofile_semesterstudeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowprofile_semesterstudeRow)
            Return rowprofile_semesterstudeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumbersemstudentidsettingsID2(ByVal StudentNumber As String, ByVal semstudentid As UInteger, ByVal settingsID2 As UInteger) As profile_semesterstudeRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber, semstudentid, settingsID2}),profile_semesterstudeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As profile_semesterstudeDataTable = CType(MyBase.Clone,profile_semesterstudeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New profile_semesterstudeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnCivilStatus = MyBase.Columns("CivilStatus")
            Me.columnBirthPlace = MyBase.Columns("BirthPlace")
            Me.columnReligion = MyBase.Columns("Religion")
            Me.columnemail = MyBase.Columns("email")
            Me.columncontactNo = MyBase.Columns("contactNo")
            Me.columnworking = MyBase.Columns("working")
            Me.columnoccupation = MyBase.Columns("occupation")
            Me.columnsalary = MyBase.Columns("salary")
            Me.columnemployer = MyBase.Columns("employer")
            Me.columnemployerAddress = MyBase.Columns("employerAddress")
            Me.columnbirthDate = MyBase.Columns("birthDate")
            Me.columnadmissionDate = MyBase.Columns("admissionDate")
            Me.columngraduationDate = MyBase.Columns("graduationDate")
            Me.columnguardian = MyBase.Columns("guardian")
            Me.columnguardianRelationship = MyBase.Columns("guardianRelationship")
            Me.columnguardianContact = MyBase.Columns("guardianContact")
            Me.columnguardianAddress = MyBase.Columns("guardianAddress")
            Me.columnspouse = MyBase.Columns("spouse")
            Me.columnspouseRelationship = MyBase.Columns("spouseRelationship")
            Me.columnspouseContact = MyBase.Columns("spouseContact")
            Me.columnchildren = MyBase.Columns("children")
            Me.columnspouseIncome = MyBase.Columns("spouseIncome")
            Me.columnimagePath = MyBase.Columns("imagePath")
            Me.columncourse = MyBase.Columns("course")
            Me.columnyearLevel = MyBase.Columns("yearLevel")
            Me.columnfather = MyBase.Columns("father")
            Me.columnfOccupation = MyBase.Columns("fOccupation")
            Me.columnfatherAddress = MyBase.Columns("fatherAddress")
            Me.columnmother = MyBase.Columns("mother")
            Me.columnmOccupation = MyBase.Columns("mOccupation")
            Me.columnmotherAddress = MyBase.Columns("motherAddress")
            Me.columnsiblings = MyBase.Columns("siblings")
            Me.columnbirthOrder = MyBase.Columns("birthOrder")
            Me.columnage = MyBase.Columns("age")
            Me.columntitle = MyBase.Columns("title")
            Me.columnpronoun = MyBase.Columns("pronoun")
            Me.columnpronoun2 = MyBase.Columns("pronoun2")
            Me.columnpronoun3 = MyBase.Columns("pronoun3")
            Me.columnscholarship = MyBase.Columns("scholarship")
            Me.columnethnicity = MyBase.Columns("ethnicity")
            Me.columnfourPs = MyBase.Columns("fourPs")
            Me.columnseniorCitizen = MyBase.Columns("seniorCitizen")
            Me.columnals = MyBase.Columns("als")
            Me.columndisability = MyBase.Columns("disability")
            Me.columnparentsMonthly = MyBase.Columns("parentsMonthly")
            Me.columnprovince = MyBase.Columns("province")
            Me.columncity = MyBase.Columns("city")
            Me.columnbrgy = MyBase.Columns("brgy")
            Me.columnsitio = MyBase.Columns("sitio")
            Me.columnprovincePresent = MyBase.Columns("provincePresent")
            Me.columncityPresent = MyBase.Columns("cityPresent")
            Me.columnbrgyPresent = MyBase.Columns("brgyPresent")
            Me.columnsitioPresent = MyBase.Columns("sitioPresent")
            Me.columnelementary = MyBase.Columns("elementary")
            Me.columnelementaryAddress = MyBase.Columns("elementaryAddress")
            Me.columnelemGraduated = MyBase.Columns("elemGraduated")
            Me.columnelemMerits = MyBase.Columns("elemMerits")
            Me.columnsecondary = MyBase.Columns("secondary")
            Me.columnsecondaryAddress = MyBase.Columns("secondaryAddress")
            Me.columnsecondaryGraduated = MyBase.Columns("secondaryGraduated")
            Me.columnsecondaryMerits = MyBase.Columns("secondaryMerits")
            Me.columnvocational = MyBase.Columns("vocational")
            Me.columnvocationaladdress = MyBase.Columns("vocationaladdress")
            Me.columnvocationalGraduated = MyBase.Columns("vocationalGraduated")
            Me.columnvocationalCourse = MyBase.Columns("vocationalCourse")
            Me.columnncLevel = MyBase.Columns("ncLevel")
            Me.columntransfereeSchool = MyBase.Columns("transfereeSchool")
            Me.columntransfereeAddress = MyBase.Columns("transfereeAddress")
            Me.columntransfereeCourse = MyBase.Columns("transfereeCourse")
            Me.columntransfereeGraduated = MyBase.Columns("transfereeGraduated")
            Me.columnskills = MyBase.Columns("skills")
            Me.columnsettingsID = MyBase.Columns("settingsID")
            Me.columnapplicationNo = MyBase.Columns("applicationNo")
            Me.columntestCenter = MyBase.Columns("testCenter")
            Me.columntestDate = MyBase.Columns("testDate")
            Me.columnencoder = MyBase.Columns("encoder")
            Me.columnsemstudentid = MyBase.Columns("semstudentid")
            Me.columnStudentNumber1 = MyBase.Columns("StudentNumber1")
            Me.columnFName = MyBase.Columns("FName")
            Me.columnMName = MyBase.Columns("MName")
            Me.columnLName = MyBase.Columns("LName")
            Me.columnCourse1 = MyBase.Columns("Course1")
            Me.columnYearLevel1 = MyBase.Columns("YearLevel1")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnTerm = MyBase.Columns("Term")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnStudeStatus = MyBase.Columns("StudeStatus")
            Me.columnScholarship1 = MyBase.Columns("Scholarship1")
            Me.columnDurationFrom = MyBase.Columns("DurationFrom")
            Me.columnDurationTo = MyBase.Columns("DurationTo")
            Me.columnAssessmentDate = MyBase.Columns("AssessmentDate")
            Me.columnAssessmentResult = MyBase.Columns("AssessmentResult")
            Me.columnPayingStatus = MyBase.Columns("PayingStatus")
            Me.columnGrantAmount = MyBase.Columns("GrantAmount")
            Me.columnYearLevelStat = MyBase.Columns("YearLevelStat")
            Me.columnMajor = MyBase.Columns("Major")
            Me.columnsettingsID1 = MyBase.Columns("settingsID1")
            Me.columnenroledDate = MyBase.Columns("enroledDate")
            Me.columncrossEnrollee = MyBase.Columns("crossEnrollee")
            Me.columnclassSession = MyBase.Columns("classSession")
            Me.columnprevGPA = MyBase.Columns("prevGPA")
            Me.columnsettingsID2 = MyBase.Columns("settingsID2")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnRegistrar = MyBase.Columns("Registrar")
            Me.columnregistrarPosition = MyBase.Columns("registrarPosition")
            Me.columnclerk = MyBase.Columns("clerk")
            Me.columnclerkPosition = MyBase.Columns("clerkPosition")
            Me.columnadministrative = MyBase.Columns("administrative")
            Me.columnadministrativePosition = MyBase.Columns("administrativePosition")
            Me.columncashier = MyBase.Columns("cashier")
            Me.columncashierPosition = MyBase.Columns("cashierPosition")
            Me.columnadmissionOfficer = MyBase.Columns("admissionOfficer")
            Me.columnstudentNoCode = MyBase.Columns("studentNoCode")
            Me.columnadmissionSem = MyBase.Columns("admissionSem")
            Me.columnadmissionSY = MyBase.Columns("admissionSY")
            Me.columnadmissionBasis = MyBase.Columns("admissionBasis")
            Me.columnlastAttended = MyBase.Columns("lastAttended")
            Me.columnlastSchool = MyBase.Columns("lastSchool")
            Me.columnlastSchoolDate = MyBase.Columns("lastSchoolDate")
            Me.columnscholarshipCoordinator = MyBase.Columns("scholarshipCoordinator")
            Me.columnaccountant = MyBase.Columns("accountant")
            Me.columnschoolLogo = MyBase.Columns("schoolLogo")
            Me.columnletterHead = MyBase.Columns("letterHead")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnCivilStatus = New Global.System.Data.DataColumn("CivilStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCivilStatus)
            Me.columnBirthPlace = New Global.System.Data.DataColumn("BirthPlace", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthPlace)
            Me.columnReligion = New Global.System.Data.DataColumn("Religion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReligion)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columncontactNo = New Global.System.Data.DataColumn("contactNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontactNo)
            Me.columnworking = New Global.System.Data.DataColumn("working", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnworking)
            Me.columnoccupation = New Global.System.Data.DataColumn("occupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoccupation)
            Me.columnsalary = New Global.System.Data.DataColumn("salary", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalary)
            Me.columnemployer = New Global.System.Data.DataColumn("employer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemployer)
            Me.columnemployerAddress = New Global.System.Data.DataColumn("employerAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemployerAddress)
            Me.columnbirthDate = New Global.System.Data.DataColumn("birthDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbirthDate)
            Me.columnadmissionDate = New Global.System.Data.DataColumn("admissionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadmissionDate)
            Me.columngraduationDate = New Global.System.Data.DataColumn("graduationDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngraduationDate)
            Me.columnguardian = New Global.System.Data.DataColumn("guardian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnguardian)
            Me.columnguardianRelationship = New Global.System.Data.DataColumn("guardianRelationship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnguardianRelationship)
            Me.columnguardianContact = New Global.System.Data.DataColumn("guardianContact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnguardianContact)
            Me.columnguardianAddress = New Global.System.Data.DataColumn("guardianAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnguardianAddress)
            Me.columnspouse = New Global.System.Data.DataColumn("spouse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnspouse)
            Me.columnspouseRelationship = New Global.System.Data.DataColumn("spouseRelationship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnspouseRelationship)
            Me.columnspouseContact = New Global.System.Data.DataColumn("spouseContact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnspouseContact)
            Me.columnchildren = New Global.System.Data.DataColumn("children", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchildren)
            Me.columnspouseIncome = New Global.System.Data.DataColumn("spouseIncome", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnspouseIncome)
            Me.columnimagePath = New Global.System.Data.DataColumn("imagePath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimagePath)
            Me.columncourse = New Global.System.Data.DataColumn("course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncourse)
            Me.columnyearLevel = New Global.System.Data.DataColumn("yearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearLevel)
            Me.columnfather = New Global.System.Data.DataColumn("father", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfather)
            Me.columnfOccupation = New Global.System.Data.DataColumn("fOccupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfOccupation)
            Me.columnfatherAddress = New Global.System.Data.DataColumn("fatherAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfatherAddress)
            Me.columnmother = New Global.System.Data.DataColumn("mother", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmother)
            Me.columnmOccupation = New Global.System.Data.DataColumn("mOccupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmOccupation)
            Me.columnmotherAddress = New Global.System.Data.DataColumn("motherAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmotherAddress)
            Me.columnsiblings = New Global.System.Data.DataColumn("siblings", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsiblings)
            Me.columnbirthOrder = New Global.System.Data.DataColumn("birthOrder", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbirthOrder)
            Me.columnage = New Global.System.Data.DataColumn("age", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnage)
            Me.columntitle = New Global.System.Data.DataColumn("title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntitle)
            Me.columnpronoun = New Global.System.Data.DataColumn("pronoun", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpronoun)
            Me.columnpronoun2 = New Global.System.Data.DataColumn("pronoun2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpronoun2)
            Me.columnpronoun3 = New Global.System.Data.DataColumn("pronoun3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpronoun3)
            Me.columnscholarship = New Global.System.Data.DataColumn("scholarship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnscholarship)
            Me.columnethnicity = New Global.System.Data.DataColumn("ethnicity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnethnicity)
            Me.columnfourPs = New Global.System.Data.DataColumn("fourPs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfourPs)
            Me.columnseniorCitizen = New Global.System.Data.DataColumn("seniorCitizen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseniorCitizen)
            Me.columnals = New Global.System.Data.DataColumn("als", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnals)
            Me.columndisability = New Global.System.Data.DataColumn("disability", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndisability)
            Me.columnparentsMonthly = New Global.System.Data.DataColumn("parentsMonthly", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnparentsMonthly)
            Me.columnprovince = New Global.System.Data.DataColumn("province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprovince)
            Me.columncity = New Global.System.Data.DataColumn("city", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncity)
            Me.columnbrgy = New Global.System.Data.DataColumn("brgy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbrgy)
            Me.columnsitio = New Global.System.Data.DataColumn("sitio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsitio)
            Me.columnprovincePresent = New Global.System.Data.DataColumn("provincePresent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprovincePresent)
            Me.columncityPresent = New Global.System.Data.DataColumn("cityPresent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncityPresent)
            Me.columnbrgyPresent = New Global.System.Data.DataColumn("brgyPresent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbrgyPresent)
            Me.columnsitioPresent = New Global.System.Data.DataColumn("sitioPresent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsitioPresent)
            Me.columnelementary = New Global.System.Data.DataColumn("elementary", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnelementary)
            Me.columnelementaryAddress = New Global.System.Data.DataColumn("elementaryAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnelementaryAddress)
            Me.columnelemGraduated = New Global.System.Data.DataColumn("elemGraduated", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnelemGraduated)
            Me.columnelemMerits = New Global.System.Data.DataColumn("elemMerits", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnelemMerits)
            Me.columnsecondary = New Global.System.Data.DataColumn("secondary", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsecondary)
            Me.columnsecondaryAddress = New Global.System.Data.DataColumn("secondaryAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsecondaryAddress)
            Me.columnsecondaryGraduated = New Global.System.Data.DataColumn("secondaryGraduated", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsecondaryGraduated)
            Me.columnsecondaryMerits = New Global.System.Data.DataColumn("secondaryMerits", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsecondaryMerits)
            Me.columnvocational = New Global.System.Data.DataColumn("vocational", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvocational)
            Me.columnvocationaladdress = New Global.System.Data.DataColumn("vocationaladdress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvocationaladdress)
            Me.columnvocationalGraduated = New Global.System.Data.DataColumn("vocationalGraduated", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvocationalGraduated)
            Me.columnvocationalCourse = New Global.System.Data.DataColumn("vocationalCourse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvocationalCourse)
            Me.columnncLevel = New Global.System.Data.DataColumn("ncLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnncLevel)
            Me.columntransfereeSchool = New Global.System.Data.DataColumn("transfereeSchool", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransfereeSchool)
            Me.columntransfereeAddress = New Global.System.Data.DataColumn("transfereeAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransfereeAddress)
            Me.columntransfereeCourse = New Global.System.Data.DataColumn("transfereeCourse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransfereeCourse)
            Me.columntransfereeGraduated = New Global.System.Data.DataColumn("transfereeGraduated", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransfereeGraduated)
            Me.columnskills = New Global.System.Data.DataColumn("skills", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskills)
            Me.columnsettingsID = New Global.System.Data.DataColumn("settingsID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsettingsID)
            Me.columnapplicationNo = New Global.System.Data.DataColumn("applicationNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnapplicationNo)
            Me.columntestCenter = New Global.System.Data.DataColumn("testCenter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestCenter)
            Me.columntestDate = New Global.System.Data.DataColumn("testDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestDate)
            Me.columnencoder = New Global.System.Data.DataColumn("encoder", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnencoder)
            Me.columnsemstudentid = New Global.System.Data.DataColumn("semstudentid", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemstudentid)
            Me.columnStudentNumber1 = New Global.System.Data.DataColumn("StudentNumber1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber1)
            Me.columnFName = New Global.System.Data.DataColumn("FName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFName)
            Me.columnMName = New Global.System.Data.DataColumn("MName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMName)
            Me.columnLName = New Global.System.Data.DataColumn("LName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLName)
            Me.columnCourse1 = New Global.System.Data.DataColumn("Course1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse1)
            Me.columnYearLevel1 = New Global.System.Data.DataColumn("YearLevel1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel1)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnTerm = New Global.System.Data.DataColumn("Term", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTerm)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnStudeStatus = New Global.System.Data.DataColumn("StudeStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudeStatus)
            Me.columnScholarship1 = New Global.System.Data.DataColumn("Scholarship1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScholarship1)
            Me.columnDurationFrom = New Global.System.Data.DataColumn("DurationFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDurationFrom)
            Me.columnDurationTo = New Global.System.Data.DataColumn("DurationTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDurationTo)
            Me.columnAssessmentDate = New Global.System.Data.DataColumn("AssessmentDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssessmentDate)
            Me.columnAssessmentResult = New Global.System.Data.DataColumn("AssessmentResult", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssessmentResult)
            Me.columnPayingStatus = New Global.System.Data.DataColumn("PayingStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayingStatus)
            Me.columnGrantAmount = New Global.System.Data.DataColumn("GrantAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrantAmount)
            Me.columnYearLevelStat = New Global.System.Data.DataColumn("YearLevelStat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevelStat)
            Me.columnMajor = New Global.System.Data.DataColumn("Major", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMajor)
            Me.columnsettingsID1 = New Global.System.Data.DataColumn("settingsID1", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsettingsID1)
            Me.columnenroledDate = New Global.System.Data.DataColumn("enroledDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnenroledDate)
            Me.columncrossEnrollee = New Global.System.Data.DataColumn("crossEnrollee", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncrossEnrollee)
            Me.columnclassSession = New Global.System.Data.DataColumn("classSession", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclassSession)
            Me.columnprevGPA = New Global.System.Data.DataColumn("prevGPA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprevGPA)
            Me.columnsettingsID2 = New Global.System.Data.DataColumn("settingsID2", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsettingsID2)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnRegistrar = New Global.System.Data.DataColumn("Registrar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrar)
            Me.columnregistrarPosition = New Global.System.Data.DataColumn("registrarPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrarPosition)
            Me.columnclerk = New Global.System.Data.DataColumn("clerk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclerk)
            Me.columnclerkPosition = New Global.System.Data.DataColumn("clerkPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclerkPosition)
            Me.columnadministrative = New Global.System.Data.DataColumn("administrative", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadministrative)
            Me.columnadministrativePosition = New Global.System.Data.DataColumn("administrativePosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadministrativePosition)
            Me.columncashier = New Global.System.Data.DataColumn("cashier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashier)
            Me.columncashierPosition = New Global.System.Data.DataColumn("cashierPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashierPosition)
            Me.columnadmissionOfficer = New Global.System.Data.DataColumn("admissionOfficer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadmissionOfficer)
            Me.columnstudentNoCode = New Global.System.Data.DataColumn("studentNoCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentNoCode)
            Me.columnadmissionSem = New Global.System.Data.DataColumn("admissionSem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadmissionSem)
            Me.columnadmissionSY = New Global.System.Data.DataColumn("admissionSY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadmissionSY)
            Me.columnadmissionBasis = New Global.System.Data.DataColumn("admissionBasis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadmissionBasis)
            Me.columnlastAttended = New Global.System.Data.DataColumn("lastAttended", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlastAttended)
            Me.columnlastSchool = New Global.System.Data.DataColumn("lastSchool", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlastSchool)
            Me.columnlastSchoolDate = New Global.System.Data.DataColumn("lastSchoolDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlastSchoolDate)
            Me.columnscholarshipCoordinator = New Global.System.Data.DataColumn("scholarshipCoordinator", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnscholarshipCoordinator)
            Me.columnaccountant = New Global.System.Data.DataColumn("accountant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccountant)
            Me.columnschoolLogo = New Global.System.Data.DataColumn("schoolLogo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschoolLogo)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber, Me.columnsemstudentid, Me.columnsettingsID2}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.MaxLength = 45
            Me.columnFirstName.MaxLength = 60
            Me.columnMiddleName.MaxLength = 60
            Me.columnLastName.MaxLength = 60
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnCivilStatus.AllowDBNull = false
            Me.columnCivilStatus.MaxLength = 45
            Me.columnBirthPlace.AllowDBNull = false
            Me.columnBirthPlace.MaxLength = 250
            Me.columnReligion.AllowDBNull = false
            Me.columnReligion.MaxLength = 100
            Me.columnemail.AllowDBNull = false
            Me.columnemail.MaxLength = 45
            Me.columncontactNo.AllowDBNull = false
            Me.columncontactNo.MaxLength = 45
            Me.columnworking.MaxLength = 10
            Me.columnoccupation.MaxLength = 60
            Me.columnsalary.MaxLength = 60
            Me.columnemployer.MaxLength = 100
            Me.columnemployerAddress.MaxLength = 150
            Me.columnbirthDate.AllowDBNull = false
            Me.columnadmissionDate.AllowDBNull = false
            Me.columngraduationDate.MaxLength = 45
            Me.columnguardian.AllowDBNull = false
            Me.columnguardian.MaxLength = 150
            Me.columnguardianRelationship.AllowDBNull = false
            Me.columnguardianRelationship.MaxLength = 45
            Me.columnguardianContact.AllowDBNull = false
            Me.columnguardianContact.MaxLength = 45
            Me.columnguardianAddress.AllowDBNull = false
            Me.columnguardianAddress.MaxLength = 250
            Me.columnspouse.AllowDBNull = false
            Me.columnspouse.MaxLength = 65
            Me.columnspouseRelationship.AllowDBNull = false
            Me.columnspouseRelationship.MaxLength = 65
            Me.columnspouseContact.AllowDBNull = false
            Me.columnspouseContact.MaxLength = 65
            Me.columnchildren.AllowDBNull = false
            Me.columnchildren.MaxLength = 65
            Me.columnspouseIncome.AllowDBNull = false
            Me.columnspouseIncome.MaxLength = 65
            Me.columnimagePath.MaxLength = 45
            Me.columncourse.AllowDBNull = false
            Me.columncourse.MaxLength = 250
            Me.columnyearLevel.AllowDBNull = false
            Me.columnyearLevel.MaxLength = 45
            Me.columnfather.AllowDBNull = false
            Me.columnfather.MaxLength = 65
            Me.columnfOccupation.AllowDBNull = false
            Me.columnfOccupation.MaxLength = 65
            Me.columnfatherAddress.AllowDBNull = false
            Me.columnfatherAddress.MaxLength = 150
            Me.columnmother.AllowDBNull = false
            Me.columnmother.MaxLength = 65
            Me.columnmOccupation.AllowDBNull = false
            Me.columnmOccupation.MaxLength = 100
            Me.columnmotherAddress.AllowDBNull = false
            Me.columnmotherAddress.MaxLength = 150
            Me.columnsiblings.AllowDBNull = false
            Me.columnsiblings.MaxLength = 10
            Me.columnbirthOrder.AllowDBNull = false
            Me.columnbirthOrder.MaxLength = 45
            Me.columnage.AllowDBNull = false
            Me.columnage.MaxLength = 45
            Me.columntitle.AllowDBNull = false
            Me.columntitle.MaxLength = 45
            Me.columnpronoun.AllowDBNull = false
            Me.columnpronoun.MaxLength = 45
            Me.columnpronoun2.AllowDBNull = false
            Me.columnpronoun2.MaxLength = 45
            Me.columnpronoun3.AllowDBNull = false
            Me.columnpronoun3.MaxLength = 45
            Me.columnscholarship.AllowDBNull = false
            Me.columnscholarship.MaxLength = 65
            Me.columnethnicity.AllowDBNull = false
            Me.columnethnicity.MaxLength = 105
            Me.columnfourPs.AllowDBNull = false
            Me.columnfourPs.MaxLength = 10
            Me.columnseniorCitizen.AllowDBNull = false
            Me.columnseniorCitizen.MaxLength = 10
            Me.columnals.AllowDBNull = false
            Me.columnals.MaxLength = 10
            Me.columndisability.AllowDBNull = false
            Me.columndisability.MaxLength = 65
            Me.columnparentsMonthly.AllowDBNull = false
            Me.columnparentsMonthly.MaxLength = 45
            Me.columnprovince.AllowDBNull = false
            Me.columnprovince.MaxLength = 65
            Me.columncity.AllowDBNull = false
            Me.columncity.MaxLength = 65
            Me.columnbrgy.AllowDBNull = false
            Me.columnbrgy.MaxLength = 45
            Me.columnsitio.AllowDBNull = false
            Me.columnsitio.MaxLength = 45
            Me.columnprovincePresent.AllowDBNull = false
            Me.columnprovincePresent.MaxLength = 45
            Me.columncityPresent.AllowDBNull = false
            Me.columncityPresent.MaxLength = 45
            Me.columnbrgyPresent.AllowDBNull = false
            Me.columnbrgyPresent.MaxLength = 45
            Me.columnsitioPresent.AllowDBNull = false
            Me.columnsitioPresent.MaxLength = 45
            Me.columnelementary.AllowDBNull = false
            Me.columnelementary.MaxLength = 105
            Me.columnelementaryAddress.AllowDBNull = false
            Me.columnelementaryAddress.MaxLength = 105
            Me.columnelemGraduated.AllowDBNull = false
            Me.columnelemGraduated.MaxLength = 10
            Me.columnelemMerits.AllowDBNull = false
            Me.columnelemMerits.MaxLength = 60
            Me.columnsecondary.AllowDBNull = false
            Me.columnsecondary.MaxLength = 60
            Me.columnsecondaryAddress.AllowDBNull = false
            Me.columnsecondaryAddress.MaxLength = 100
            Me.columnsecondaryGraduated.AllowDBNull = false
            Me.columnsecondaryGraduated.MaxLength = 100
            Me.columnsecondaryMerits.AllowDBNull = false
            Me.columnsecondaryMerits.MaxLength = 100
            Me.columnvocational.AllowDBNull = false
            Me.columnvocational.MaxLength = 100
            Me.columnvocationaladdress.AllowDBNull = false
            Me.columnvocationaladdress.MaxLength = 100
            Me.columnvocationalGraduated.AllowDBNull = false
            Me.columnvocationalGraduated.MaxLength = 100
            Me.columnvocationalCourse.AllowDBNull = false
            Me.columnvocationalCourse.MaxLength = 100
            Me.columnncLevel.AllowDBNull = false
            Me.columnncLevel.MaxLength = 100
            Me.columntransfereeSchool.AllowDBNull = false
            Me.columntransfereeSchool.MaxLength = 150
            Me.columntransfereeAddress.AllowDBNull = false
            Me.columntransfereeAddress.MaxLength = 150
            Me.columntransfereeCourse.AllowDBNull = false
            Me.columntransfereeCourse.MaxLength = 150
            Me.columntransfereeGraduated.AllowDBNull = false
            Me.columntransfereeGraduated.MaxLength = 10
            Me.columnskills.AllowDBNull = false
            Me.columnskills.MaxLength = 60
            Me.columnsettingsID.AllowDBNull = false
            Me.columnapplicationNo.AllowDBNull = false
            Me.columnapplicationNo.MaxLength = 45
            Me.columntestCenter.AllowDBNull = false
            Me.columntestCenter.MaxLength = 100
            Me.columntestDate.AllowDBNull = false
            Me.columnencoder.AllowDBNull = false
            Me.columnencoder.MaxLength = 45
            Me.columnsemstudentid.AllowDBNull = false
            Me.columnStudentNumber1.MaxLength = 45
            Me.columnFName.MaxLength = 45
            Me.columnMName.MaxLength = 45
            Me.columnLName.MaxLength = 45
            Me.columnCourse1.MaxLength = 250
            Me.columnYearLevel1.MaxLength = 45
            Me.columnStatus.MaxLength = 45
            Me.columnSemester.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnTerm.MaxLength = 45
            Me.columnSection.MaxLength = 150
            Me.columnStudeStatus.AllowDBNull = false
            Me.columnStudeStatus.MaxLength = 45
            Me.columnScholarship1.AllowDBNull = false
            Me.columnScholarship1.MaxLength = 150
            Me.columnDurationFrom.AllowDBNull = false
            Me.columnDurationFrom.MaxLength = 45
            Me.columnDurationTo.AllowDBNull = false
            Me.columnDurationTo.MaxLength = 45
            Me.columnAssessmentDate.AllowDBNull = false
            Me.columnAssessmentDate.MaxLength = 45
            Me.columnAssessmentResult.AllowDBNull = false
            Me.columnAssessmentResult.MaxLength = 45
            Me.columnPayingStatus.AllowDBNull = false
            Me.columnPayingStatus.MaxLength = 45
            Me.columnGrantAmount.AllowDBNull = false
            Me.columnYearLevelStat.AllowDBNull = false
            Me.columnYearLevelStat.MaxLength = 45
            Me.columnMajor.AllowDBNull = false
            Me.columnMajor.MaxLength = 45
            Me.columnsettingsID1.AllowDBNull = false
            Me.columnenroledDate.AllowDBNull = false
            Me.columncrossEnrollee.AllowDBNull = false
            Me.columncrossEnrollee.MaxLength = 45
            Me.columnclassSession.AllowDBNull = false
            Me.columnclassSession.MaxLength = 45
            Me.columnprevGPA.AllowDBNull = false
            Me.columnprevGPA.MaxLength = 45
            Me.columnsettingsID2.AllowDBNull = false
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnRegistrar.AllowDBNull = false
            Me.columnRegistrar.MaxLength = 65
            Me.columnregistrarPosition.AllowDBNull = false
            Me.columnregistrarPosition.MaxLength = 45
            Me.columnclerk.AllowDBNull = false
            Me.columnclerk.MaxLength = 65
            Me.columnclerkPosition.AllowDBNull = false
            Me.columnclerkPosition.MaxLength = 45
            Me.columnadministrative.AllowDBNull = false
            Me.columnadministrative.MaxLength = 65
            Me.columnadministrativePosition.AllowDBNull = false
            Me.columnadministrativePosition.MaxLength = 45
            Me.columncashier.AllowDBNull = false
            Me.columncashier.MaxLength = 45
            Me.columncashierPosition.AllowDBNull = false
            Me.columncashierPosition.MaxLength = 45
            Me.columnadmissionOfficer.MaxLength = 65
            Me.columnstudentNoCode.AllowDBNull = false
            Me.columnstudentNoCode.MaxLength = 45
            Me.columnadmissionSem.AllowDBNull = false
            Me.columnadmissionSem.MaxLength = 45
            Me.columnadmissionSY.AllowDBNull = false
            Me.columnadmissionSY.MaxLength = 45
            Me.columnadmissionBasis.AllowDBNull = false
            Me.columnadmissionBasis.MaxLength = 120
            Me.columnlastAttended.AllowDBNull = false
            Me.columnlastAttended.MaxLength = 65
            Me.columnlastSchool.AllowDBNull = false
            Me.columnlastSchool.MaxLength = 65
            Me.columnlastSchoolDate.AllowDBNull = false
            Me.columnlastSchoolDate.MaxLength = 45
            Me.columnscholarshipCoordinator.AllowDBNull = false
            Me.columnscholarshipCoordinator.MaxLength = 65
            Me.columnaccountant.AllowDBNull = false
            Me.columnaccountant.MaxLength = 65
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newprofile_semesterstudeRow() As profile_semesterstudeRow
            Return CType(Me.NewRow,profile_semesterstudeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New profile_semesterstudeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(profile_semesterstudeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.profile_semesterstudeRowChangedEvent) Is Nothing) Then
                RaiseEvent profile_semesterstudeRowChanged(Me, New profile_semesterstudeRowChangeEvent(CType(e.Row,profile_semesterstudeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.profile_semesterstudeRowChangingEvent) Is Nothing) Then
                RaiseEvent profile_semesterstudeRowChanging(Me, New profile_semesterstudeRowChangeEvent(CType(e.Row,profile_semesterstudeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.profile_semesterstudeRowDeletedEvent) Is Nothing) Then
                RaiseEvent profile_semesterstudeRowDeleted(Me, New profile_semesterstudeRowChangeEvent(CType(e.Row,profile_semesterstudeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.profile_semesterstudeRowDeletingEvent) Is Nothing) Then
                RaiseEvent profile_semesterstudeRowDeleting(Me, New profile_semesterstudeRowChangeEvent(CType(e.Row,profile_semesterstudeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeprofile_semesterstudeRow(ByVal row As profile_semesterstudeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Report3 = New Report3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "profile_semesterstudeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class billingStatementDataTable
        Inherits Global.System.Data.TypedTableBase(Of billingStatementRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnMI As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columncontactNo As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnMajor As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnScholarship As Global.System.Data.DataColumn
        
        Private columnGrantAmount As Global.System.Data.DataColumn
        
        Private columnAcctTotal As Global.System.Data.DataColumn
        
        Private columnSem As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnscholarshipCoordinator As Global.System.Data.DataColumn
        
        Private columnaccountant As Global.System.Data.DataColumn
        
        Private columnRegistrar As Global.System.Data.DataColumn
        
        Private columntotalUnits As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "billingStatement"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property contactNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontactNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MajorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMajor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScholarshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScholarship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrantAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrantAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcctTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property scholarshipCoordinatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnscholarshipCoordinator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property accountantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccountant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totalUnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotalUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As billingStatementRow
            Get
                Return CType(Me.Rows(index),billingStatementRow)
            End Get
        End Property
        
        Public Event billingStatementRowChanging As billingStatementRowChangeEventHandler
        
        Public Event billingStatementRowChanged As billingStatementRowChangeEventHandler
        
        Public Event billingStatementRowDeleting As billingStatementRowChangeEventHandler
        
        Public Event billingStatementRowDeleted As billingStatementRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddbillingStatementRow(ByVal row As billingStatementRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddbillingStatementRow( _
                    ByVal StudentNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal MI As String,  _
                    ByVal Sex As String,  _
                    ByVal email As String,  _
                    ByVal contactNo As String,  _
                    ByVal Course As String,  _
                    ByVal Major As String,  _
                    ByVal YearLevel As String,  _
                    ByVal Scholarship As String,  _
                    ByVal GrantAmount As Double,  _
                    ByVal AcctTotal As Double,  _
                    ByVal Sem As String,  _
                    ByVal SY As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal scholarshipCoordinator As String,  _
                    ByVal accountant As String,  _
                    ByVal Registrar As String,  _
                    ByVal totalUnits As Double) As billingStatementRow
            Dim rowbillingStatementRow As billingStatementRow = CType(Me.NewRow,billingStatementRow)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, FirstName, LastName, MI, Sex, email, contactNo, Course, Major, YearLevel, Scholarship, GrantAmount, AcctTotal, Sem, SY, SchoolName, SchoolAddress, SchoolHead, sHeadPosition, scholarshipCoordinator, accountant, Registrar, totalUnits}
            rowbillingStatementRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowbillingStatementRow)
            Return rowbillingStatementRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As billingStatementRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),billingStatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As billingStatementDataTable = CType(MyBase.Clone,billingStatementDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New billingStatementDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnMI = MyBase.Columns("MI")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnemail = MyBase.Columns("email")
            Me.columncontactNo = MyBase.Columns("contactNo")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnMajor = MyBase.Columns("Major")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnScholarship = MyBase.Columns("Scholarship")
            Me.columnGrantAmount = MyBase.Columns("GrantAmount")
            Me.columnAcctTotal = MyBase.Columns("AcctTotal")
            Me.columnSem = MyBase.Columns("Sem")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnscholarshipCoordinator = MyBase.Columns("scholarshipCoordinator")
            Me.columnaccountant = MyBase.Columns("accountant")
            Me.columnRegistrar = MyBase.Columns("Registrar")
            Me.columntotalUnits = MyBase.Columns("totalUnits")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnMI = New Global.System.Data.DataColumn("MI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMI)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columncontactNo = New Global.System.Data.DataColumn("contactNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontactNo)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnMajor = New Global.System.Data.DataColumn("Major", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMajor)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnScholarship = New Global.System.Data.DataColumn("Scholarship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScholarship)
            Me.columnGrantAmount = New Global.System.Data.DataColumn("GrantAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrantAmount)
            Me.columnAcctTotal = New Global.System.Data.DataColumn("AcctTotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctTotal)
            Me.columnSem = New Global.System.Data.DataColumn("Sem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSem)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnscholarshipCoordinator = New Global.System.Data.DataColumn("scholarshipCoordinator", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnscholarshipCoordinator)
            Me.columnaccountant = New Global.System.Data.DataColumn("accountant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccountant)
            Me.columnRegistrar = New Global.System.Data.DataColumn("Registrar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrar)
            Me.columntotalUnits = New Global.System.Data.DataColumn("totalUnits", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotalUnits)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnFirstName.MaxLength = 60
            Me.columnLastName.MaxLength = 60
            Me.columnMI.MaxLength = 1
            Me.columnSex.MaxLength = 1
            Me.columnemail.AllowDBNull = false
            Me.columnemail.MaxLength = 45
            Me.columncontactNo.AllowDBNull = false
            Me.columncontactNo.MaxLength = 45
            Me.columnCourse.MaxLength = 250
            Me.columnMajor.AllowDBNull = false
            Me.columnMajor.MaxLength = 45
            Me.columnYearLevel.MaxLength = 45
            Me.columnScholarship.AllowDBNull = false
            Me.columnScholarship.MaxLength = 150
            Me.columnGrantAmount.AllowDBNull = false
            Me.columnAcctTotal.AllowDBNull = false
            Me.columnSem.AllowDBNull = false
            Me.columnSem.MaxLength = 45
            Me.columnSY.AllowDBNull = false
            Me.columnSY.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnscholarshipCoordinator.AllowDBNull = false
            Me.columnscholarshipCoordinator.MaxLength = 120
            Me.columnaccountant.AllowDBNull = false
            Me.columnaccountant.MaxLength = 120
            Me.columnRegistrar.AllowDBNull = false
            Me.columnRegistrar.MaxLength = 65
            Me.columntotalUnits.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewbillingStatementRow() As billingStatementRow
            Return CType(Me.NewRow,billingStatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New billingStatementRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(billingStatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.billingStatementRowChangedEvent) Is Nothing) Then
                RaiseEvent billingStatementRowChanged(Me, New billingStatementRowChangeEvent(CType(e.Row,billingStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.billingStatementRowChangingEvent) Is Nothing) Then
                RaiseEvent billingStatementRowChanging(Me, New billingStatementRowChangeEvent(CType(e.Row,billingStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.billingStatementRowDeletedEvent) Is Nothing) Then
                RaiseEvent billingStatementRowDeleted(Me, New billingStatementRowChangeEvent(CType(e.Row,billingStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.billingStatementRowDeletingEvent) Is Nothing) Then
                RaiseEvent billingStatementRowDeleting(Me, New billingStatementRowChangeEvent(CType(e.Row,billingStatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovebillingStatementRow(ByVal row As billingStatementRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Report3 = New Report3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "billingStatementDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class statisticalReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of statisticalReportRow)
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnMajor As Global.System.Data.DataColumn
        
        Private columnStatusCount As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnEnrolledCount As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnRegistrar As Global.System.Data.DataColumn
        
        Private columnregistrarPosition As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "statisticalReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MajorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMajor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnrolledCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnrolledCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrarPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrarPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As statisticalReportRow
            Get
                Return CType(Me.Rows(index),statisticalReportRow)
            End Get
        End Property
        
        Public Event statisticalReportRowChanging As statisticalReportRowChangeEventHandler
        
        Public Event statisticalReportRowChanged As statisticalReportRowChangeEventHandler
        
        Public Event statisticalReportRowDeleting As statisticalReportRowChangeEventHandler
        
        Public Event statisticalReportRowDeleted As statisticalReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddstatisticalReportRow(ByVal row As statisticalReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddstatisticalReportRow( _
                    ByVal Sex As String,  _
                    ByVal Course As String,  _
                    ByVal Major As String,  _
                    ByVal StatusCount As Long,  _
                    ByVal Status As String,  _
                    ByVal YearLevel As String,  _
                    ByVal EnrolledCount As Long,  _
                    ByVal Semester As String,  _
                    ByVal SY As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal Registrar As String,  _
                    ByVal registrarPosition As String,  _
                    ByVal letterHead() As Byte) As statisticalReportRow
            Dim rowstatisticalReportRow As statisticalReportRow = CType(Me.NewRow,statisticalReportRow)
            Dim columnValuesArray() As Object = New Object() {Sex, Course, Major, StatusCount, Status, YearLevel, EnrolledCount, Semester, SY, SchoolName, SchoolAddress, SchoolHead, sHeadPosition, Registrar, registrarPosition, letterHead}
            rowstatisticalReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowstatisticalReportRow)
            Return rowstatisticalReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As statisticalReportDataTable = CType(MyBase.Clone,statisticalReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New statisticalReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnMajor = MyBase.Columns("Major")
            Me.columnStatusCount = MyBase.Columns("StatusCount")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnEnrolledCount = MyBase.Columns("EnrolledCount")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnRegistrar = MyBase.Columns("Registrar")
            Me.columnregistrarPosition = MyBase.Columns("registrarPosition")
            Me.columnletterHead = MyBase.Columns("letterHead")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnMajor = New Global.System.Data.DataColumn("Major", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMajor)
            Me.columnStatusCount = New Global.System.Data.DataColumn("StatusCount", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusCount)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnEnrolledCount = New Global.System.Data.DataColumn("EnrolledCount", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnrolledCount)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnRegistrar = New Global.System.Data.DataColumn("Registrar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrar)
            Me.columnregistrarPosition = New Global.System.Data.DataColumn("registrarPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrarPosition)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 1
            Me.columnCourse.MaxLength = 250
            Me.columnMajor.AllowDBNull = false
            Me.columnMajor.MaxLength = 45
            Me.columnStatusCount.AllowDBNull = false
            Me.columnStatus.MaxLength = 45
            Me.columnYearLevel.MaxLength = 45
            Me.columnEnrolledCount.AllowDBNull = false
            Me.columnSemester.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnRegistrar.AllowDBNull = false
            Me.columnRegistrar.MaxLength = 65
            Me.columnregistrarPosition.AllowDBNull = false
            Me.columnregistrarPosition.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewstatisticalReportRow() As statisticalReportRow
            Return CType(Me.NewRow,statisticalReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New statisticalReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(statisticalReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.statisticalReportRowChangedEvent) Is Nothing) Then
                RaiseEvent statisticalReportRowChanged(Me, New statisticalReportRowChangeEvent(CType(e.Row,statisticalReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.statisticalReportRowChangingEvent) Is Nothing) Then
                RaiseEvent statisticalReportRowChanging(Me, New statisticalReportRowChangeEvent(CType(e.Row,statisticalReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.statisticalReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent statisticalReportRowDeleted(Me, New statisticalReportRowChangeEvent(CType(e.Row,statisticalReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.statisticalReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent statisticalReportRowDeleting(Me, New statisticalReportRowChangeEvent(CType(e.Row,statisticalReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovestatisticalReportRow(ByVal row As statisticalReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Report3 = New Report3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "statisticalReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class paymentsaccountsDataTable
        Inherits Global.System.Data.TypedTableBase(Of paymentsaccountsRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnPDate As Global.System.Data.DataColumn
        
        Private columnORNumber As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnPaymentType As Global.System.Data.DataColumn
        
        Private columnCheckNumber As Global.System.Data.DataColumn
        
        Private columnSem As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnCollectionSource As Global.System.Data.DataColumn
        
        Private columnBank As Global.System.Data.DataColumn
        
        Private columnORStatus As Global.System.Data.DataColumn
        
        Private columnCashier As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "paymentsaccounts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CollectionSourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCollectionSource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As paymentsaccountsRow
            Get
                Return CType(Me.Rows(index),paymentsaccountsRow)
            End Get
        End Property
        
        Public Event paymentsaccountsRowChanging As paymentsaccountsRowChangeEventHandler
        
        Public Event paymentsaccountsRowChanged As paymentsaccountsRowChangeEventHandler
        
        Public Event paymentsaccountsRowDeleting As paymentsaccountsRowChangeEventHandler
        
        Public Event paymentsaccountsRowDeleted As paymentsaccountsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddpaymentsaccountsRow(ByVal row As paymentsaccountsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddpaymentsaccountsRow( _
                    ByVal ID As UInteger,  _
                    ByVal StudentNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Course As String,  _
                    ByVal PDate As Date,  _
                    ByVal ORNumber As String,  _
                    ByVal Amount As Double,  _
                    ByVal description As String,  _
                    ByVal PaymentType As String,  _
                    ByVal CheckNumber As String,  _
                    ByVal Sem As String,  _
                    ByVal SY As String,  _
                    ByVal CollectionSource As String,  _
                    ByVal Bank As String,  _
                    ByVal ORStatus As String,  _
                    ByVal Cashier As String) As paymentsaccountsRow
            Dim rowpaymentsaccountsRow As paymentsaccountsRow = CType(Me.NewRow,paymentsaccountsRow)
            Dim columnValuesArray() As Object = New Object() {ID, StudentNumber, FirstName, MiddleName, LastName, Course, PDate, ORNumber, Amount, description, PaymentType, CheckNumber, Sem, SY, CollectionSource, Bank, ORStatus, Cashier}
            rowpaymentsaccountsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpaymentsaccountsRow)
            Return rowpaymentsaccountsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As UInteger) As paymentsaccountsRow
            Return CType(Me.Rows.Find(New Object() {ID}),paymentsaccountsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As paymentsaccountsDataTable = CType(MyBase.Clone,paymentsaccountsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New paymentsaccountsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnPDate = MyBase.Columns("PDate")
            Me.columnORNumber = MyBase.Columns("ORNumber")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columndescription = MyBase.Columns("description")
            Me.columnPaymentType = MyBase.Columns("PaymentType")
            Me.columnCheckNumber = MyBase.Columns("CheckNumber")
            Me.columnSem = MyBase.Columns("Sem")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnCollectionSource = MyBase.Columns("CollectionSource")
            Me.columnBank = MyBase.Columns("Bank")
            Me.columnORStatus = MyBase.Columns("ORStatus")
            Me.columnCashier = MyBase.Columns("Cashier")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnPDate = New Global.System.Data.DataColumn("PDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPDate)
            Me.columnORNumber = New Global.System.Data.DataColumn("ORNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORNumber)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnPaymentType = New Global.System.Data.DataColumn("PaymentType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentType)
            Me.columnCheckNumber = New Global.System.Data.DataColumn("CheckNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckNumber)
            Me.columnSem = New Global.System.Data.DataColumn("Sem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSem)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnCollectionSource = New Global.System.Data.DataColumn("CollectionSource", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCollectionSource)
            Me.columnBank = New Global.System.Data.DataColumn("Bank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBank)
            Me.columnORStatus = New Global.System.Data.DataColumn("ORStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORStatus)
            Me.columnCashier = New Global.System.Data.DataColumn("Cashier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashier)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.MaxLength = 45
            Me.columnFirstName.AllowDBNull = false
            Me.columnFirstName.MaxLength = 45
            Me.columnMiddleName.AllowDBNull = false
            Me.columnMiddleName.MaxLength = 45
            Me.columnLastName.AllowDBNull = false
            Me.columnLastName.MaxLength = 45
            Me.columnCourse.MaxLength = 65
            Me.columnPDate.AllowDBNull = false
            Me.columnORNumber.AllowDBNull = false
            Me.columnORNumber.MaxLength = 45
            Me.columnAmount.AllowDBNull = false
            Me.columndescription.MaxLength = 100
            Me.columnPaymentType.AllowDBNull = false
            Me.columnPaymentType.MaxLength = 45
            Me.columnCheckNumber.AllowDBNull = false
            Me.columnCheckNumber.MaxLength = 45
            Me.columnSem.AllowDBNull = false
            Me.columnSem.MaxLength = 45
            Me.columnSY.AllowDBNull = false
            Me.columnSY.MaxLength = 45
            Me.columnCollectionSource.AllowDBNull = false
            Me.columnCollectionSource.MaxLength = 45
            Me.columnBank.AllowDBNull = false
            Me.columnBank.MaxLength = 65
            Me.columnORStatus.AllowDBNull = false
            Me.columnORStatus.MaxLength = 45
            Me.columnCashier.AllowDBNull = false
            Me.columnCashier.MaxLength = 65
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewpaymentsaccountsRow() As paymentsaccountsRow
            Return CType(Me.NewRow,paymentsaccountsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New paymentsaccountsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(paymentsaccountsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.paymentsaccountsRowChangedEvent) Is Nothing) Then
                RaiseEvent paymentsaccountsRowChanged(Me, New paymentsaccountsRowChangeEvent(CType(e.Row,paymentsaccountsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.paymentsaccountsRowChangingEvent) Is Nothing) Then
                RaiseEvent paymentsaccountsRowChanging(Me, New paymentsaccountsRowChangeEvent(CType(e.Row,paymentsaccountsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.paymentsaccountsRowDeletedEvent) Is Nothing) Then
                RaiseEvent paymentsaccountsRowDeleted(Me, New paymentsaccountsRowChangeEvent(CType(e.Row,paymentsaccountsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.paymentsaccountsRowDeletingEvent) Is Nothing) Then
                RaiseEvent paymentsaccountsRowDeleting(Me, New paymentsaccountsRowChangeEvent(CType(e.Row,paymentsaccountsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovepaymentsaccountsRow(ByVal row As paymentsaccountsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Report3 = New Report3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "paymentsaccountsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class accountSummaryDataTable
        Inherits Global.System.Data.TypedTableBase(Of accountSummaryRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnTotalLec As Global.System.Data.DataColumn
        
        Private columnFeesDesc As Global.System.Data.DataColumn
        
        Private columnFeesAmount As Global.System.Data.DataColumn
        
        Private columnfeesType As Global.System.Data.DataColumn
        
        Private columnSem As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columncashier As Global.System.Data.DataColumn
        
        Private columncashierPosition As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnAcctTotal As Global.System.Data.DataColumn
        
        Private columntuitionDay As Global.System.Data.DataColumn
        
        Private columnspecialTuition As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "accountSummary"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalLecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalLec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FeesDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeesDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FeesAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFeesAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property feesTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfeesType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashierPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashierPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcctTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuitionDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuitionDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property specialTuitionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnspecialTuition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As accountSummaryRow
            Get
                Return CType(Me.Rows(index),accountSummaryRow)
            End Get
        End Property
        
        Public Event accountSummaryRowChanging As accountSummaryRowChangeEventHandler
        
        Public Event accountSummaryRowChanged As accountSummaryRowChangeEventHandler
        
        Public Event accountSummaryRowDeleting As accountSummaryRowChangeEventHandler
        
        Public Event accountSummaryRowDeleted As accountSummaryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddaccountSummaryRow(ByVal row As accountSummaryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddaccountSummaryRow( _
                    ByVal StudentNumber As String,  _
                    ByVal Sex As String,  _
                    ByVal Course As String,  _
                    ByVal YearLevel As String,  _
                    ByVal TotalLec As Double,  _
                    ByVal FeesDesc As String,  _
                    ByVal FeesAmount As Double,  _
                    ByVal feesType As String,  _
                    ByVal Sem As String,  _
                    ByVal SY As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal cashier As String,  _
                    ByVal cashierPosition As String,  _
                    ByVal StudentName As String,  _
                    ByVal AcctTotal As Double,  _
                    ByVal tuitionDay As Double,  _
                    ByVal specialTuition As Double,  _
                    ByVal letterHead() As Byte) As accountSummaryRow
            Dim rowaccountSummaryRow As accountSummaryRow = CType(Me.NewRow,accountSummaryRow)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, Sex, Course, YearLevel, TotalLec, FeesDesc, FeesAmount, feesType, Sem, SY, SchoolName, SchoolAddress, cashier, cashierPosition, StudentName, AcctTotal, tuitionDay, specialTuition, letterHead}
            rowaccountSummaryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowaccountSummaryRow)
            Return rowaccountSummaryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As accountSummaryRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),accountSummaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As accountSummaryDataTable = CType(MyBase.Clone,accountSummaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New accountSummaryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnTotalLec = MyBase.Columns("TotalLec")
            Me.columnFeesDesc = MyBase.Columns("FeesDesc")
            Me.columnFeesAmount = MyBase.Columns("FeesAmount")
            Me.columnfeesType = MyBase.Columns("feesType")
            Me.columnSem = MyBase.Columns("Sem")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columncashier = MyBase.Columns("cashier")
            Me.columncashierPosition = MyBase.Columns("cashierPosition")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnAcctTotal = MyBase.Columns("AcctTotal")
            Me.columntuitionDay = MyBase.Columns("tuitionDay")
            Me.columnspecialTuition = MyBase.Columns("specialTuition")
            Me.columnletterHead = MyBase.Columns("letterHead")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnTotalLec = New Global.System.Data.DataColumn("TotalLec", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalLec)
            Me.columnFeesDesc = New Global.System.Data.DataColumn("FeesDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeesDesc)
            Me.columnFeesAmount = New Global.System.Data.DataColumn("FeesAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFeesAmount)
            Me.columnfeesType = New Global.System.Data.DataColumn("feesType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfeesType)
            Me.columnSem = New Global.System.Data.DataColumn("Sem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSem)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columncashier = New Global.System.Data.DataColumn("cashier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashier)
            Me.columncashierPosition = New Global.System.Data.DataColumn("cashierPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashierPosition)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnAcctTotal = New Global.System.Data.DataColumn("AcctTotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctTotal)
            Me.columntuitionDay = New Global.System.Data.DataColumn("tuitionDay", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuitionDay)
            Me.columnspecialTuition = New Global.System.Data.DataColumn("specialTuition", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnspecialTuition)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnCourse.AllowDBNull = false
            Me.columnCourse.MaxLength = 150
            Me.columnYearLevel.AllowDBNull = false
            Me.columnYearLevel.MaxLength = 45
            Me.columnTotalLec.AllowDBNull = false
            Me.columnFeesDesc.AllowDBNull = false
            Me.columnFeesDesc.MaxLength = 65535
            Me.columnFeesAmount.AllowDBNull = false
            Me.columnfeesType.MaxLength = 45
            Me.columnSem.AllowDBNull = false
            Me.columnSem.MaxLength = 45
            Me.columnSY.AllowDBNull = false
            Me.columnSY.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columncashier.AllowDBNull = false
            Me.columncashier.MaxLength = 45
            Me.columncashierPosition.AllowDBNull = false
            Me.columncashierPosition.MaxLength = 45
            Me.columnStudentName.MaxLength = 122
            Me.columnAcctTotal.AllowDBNull = false
            Me.columntuitionDay.AllowDBNull = false
            Me.columnspecialTuition.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewaccountSummaryRow() As accountSummaryRow
            Return CType(Me.NewRow,accountSummaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New accountSummaryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(accountSummaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.accountSummaryRowChangedEvent) Is Nothing) Then
                RaiseEvent accountSummaryRowChanged(Me, New accountSummaryRowChangeEvent(CType(e.Row,accountSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.accountSummaryRowChangingEvent) Is Nothing) Then
                RaiseEvent accountSummaryRowChanging(Me, New accountSummaryRowChangeEvent(CType(e.Row,accountSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.accountSummaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent accountSummaryRowDeleted(Me, New accountSummaryRowChangeEvent(CType(e.Row,accountSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.accountSummaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent accountSummaryRowDeleting(Me, New accountSummaryRowChangeEvent(CType(e.Row,accountSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveaccountSummaryRow(ByVal row As accountSummaryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Report3 = New Report3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "accountSummaryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrolmentReportV2DataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrolmentReportV2Row)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnUnits As Global.System.Data.DataColumn
        
        Private columnSem As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnregistrar As Global.System.Data.DataColumn
        
        Private columnregistrarPosition As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrolmentReportV2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrarPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrarPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrolmentReportV2Row
            Get
                Return CType(Me.Rows(index),EnrolmentReportV2Row)
            End Get
        End Property
        
        Public Event EnrolmentReportV2RowChanging As EnrolmentReportV2RowChangeEventHandler
        
        Public Event EnrolmentReportV2RowChanged As EnrolmentReportV2RowChangeEventHandler
        
        Public Event EnrolmentReportV2RowDeleting As EnrolmentReportV2RowChangeEventHandler
        
        Public Event EnrolmentReportV2RowDeleted As EnrolmentReportV2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrolmentReportV2Row(ByVal row As EnrolmentReportV2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrolmentReportV2Row(ByVal StudentNumber As String, ByVal StudentName As String, ByVal Sex As String, ByVal SubjectCode As String, ByVal Units As Double, ByVal Sem As String, ByVal SY As String, ByVal SchoolName As String, ByVal SchoolAddress As String, ByVal registrar As String, ByVal registrarPosition As String) As EnrolmentReportV2Row
            Dim rowEnrolmentReportV2Row As EnrolmentReportV2Row = CType(Me.NewRow,EnrolmentReportV2Row)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, StudentName, Sex, SubjectCode, Units, Sem, SY, SchoolName, SchoolAddress, registrar, registrarPosition}
            rowEnrolmentReportV2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrolmentReportV2Row)
            Return rowEnrolmentReportV2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As EnrolmentReportV2Row
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),EnrolmentReportV2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrolmentReportV2DataTable = CType(MyBase.Clone,EnrolmentReportV2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrolmentReportV2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnUnits = MyBase.Columns("Units")
            Me.columnSem = MyBase.Columns("Sem")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnregistrar = MyBase.Columns("registrar")
            Me.columnregistrarPosition = MyBase.Columns("registrarPosition")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnUnits = New Global.System.Data.DataColumn("Units", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits)
            Me.columnSem = New Global.System.Data.DataColumn("Sem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSem)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnregistrar = New Global.System.Data.DataColumn("registrar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrar)
            Me.columnregistrarPosition = New Global.System.Data.DataColumn("registrarPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrarPosition)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnStudentName.MaxLength = 122
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnSubjectCode.MaxLength = 45
            Me.columnSem.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnregistrar.AllowDBNull = false
            Me.columnregistrar.MaxLength = 65
            Me.columnregistrarPosition.AllowDBNull = false
            Me.columnregistrarPosition.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrolmentReportV2Row() As EnrolmentReportV2Row
            Return CType(Me.NewRow,EnrolmentReportV2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrolmentReportV2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrolmentReportV2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrolmentReportV2RowChangedEvent) Is Nothing) Then
                RaiseEvent EnrolmentReportV2RowChanged(Me, New EnrolmentReportV2RowChangeEvent(CType(e.Row,EnrolmentReportV2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrolmentReportV2RowChangingEvent) Is Nothing) Then
                RaiseEvent EnrolmentReportV2RowChanging(Me, New EnrolmentReportV2RowChangeEvent(CType(e.Row,EnrolmentReportV2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrolmentReportV2RowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrolmentReportV2RowDeleted(Me, New EnrolmentReportV2RowChangeEvent(CType(e.Row,EnrolmentReportV2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrolmentReportV2RowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrolmentReportV2RowDeleting(Me, New EnrolmentReportV2RowChangeEvent(CType(e.Row,EnrolmentReportV2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrolmentReportV2Row(ByVal row As EnrolmentReportV2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Report3 = New Report3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrolmentReportV2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TORNewDataTable
        Inherits Global.System.Data.TypedTableBase(Of TORNewRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columncivilStatus As Global.System.Data.DataColumn
        
        Private columnbirthDate As Global.System.Data.DataColumn
        
        Private columnBirthPlace As Global.System.Data.DataColumn
        
        Private columnfather As Global.System.Data.DataColumn
        
        Private columnmother As Global.System.Data.DataColumn
        
        Private columnaddress As Global.System.Data.DataColumn
        
        Private columnlastSchool As Global.System.Data.DataColumn
        
        Private columnlastSchoolDate As Global.System.Data.DataColumn
        
        Private columnadmissionDate As Global.System.Data.DataColumn
        
        Private columnadmissionSem As Global.System.Data.DataColumn
        
        Private columnadmissionSY As Global.System.Data.DataColumn
        
        Private columnadmissionBasis As Global.System.Data.DataColumn
        
        Private columnlastAttended As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnMajor As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnFinal As Global.System.Data.DataColumn
        
        Private columnComplied As Global.System.Data.DataColumn
        
        Private columnCredits As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnregistrar As Global.System.Data.DataColumn
        
        Private columnregistrarPosition As Global.System.Data.DataColumn
        
        Private columnprofImage As Global.System.Data.DataColumn
        
        Private columnhonors As Global.System.Data.DataColumn
        
        Private columnrotcSerial As Global.System.Data.DataColumn
        
        Private columncwtsSerial As Global.System.Data.DataColumn
        
        Private columngraduationDate As Global.System.Data.DataColumn
        
        Private columntransfereeSchool As Global.System.Data.DataColumn
        
        Private columntransfereeAddress As Global.System.Data.DataColumn
        
        Private columnwebsite As Global.System.Data.DataColumn
        
        Private columnemailad As Global.System.Data.DataColumn
        
        Private columntelNo As Global.System.Data.DataColumn
        
        Private columnwebsite1 As Global.System.Data.DataColumn
        
        Private columnregistrarEmail As Global.System.Data.DataColumn
        
        Private columnschoolLogo As Global.System.Data.DataColumn
        
        Private columnltsSerialNo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TORNew"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property civilStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncivilStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property birthDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbirthDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthPlaceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthPlace
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fatherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfather
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property motherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmother
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property addressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lastSchoolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlastSchool
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lastSchoolDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlastSchoolDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property admissionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadmissionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property admissionSemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadmissionSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property admissionSYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadmissionSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property admissionBasisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadmissionBasis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lastAttendedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlastAttended
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MajorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMajor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompliedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComplied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCredits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrarPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrarPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property profImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprofImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property honorsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhonors
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rotcSerialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrotcSerial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cwtsSerialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncwtsSerial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property graduationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngraduationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transfereeSchoolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransfereeSchool
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transfereeAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransfereeAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property websiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwebsite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemailad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property telNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntelNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property website1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnwebsite1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrarEmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrarEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schoolLogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschoolLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ltsSerialNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnltsSerialNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TORNewRow
            Get
                Return CType(Me.Rows(index),TORNewRow)
            End Get
        End Property
        
        Public Event TORNewRowChanging As TORNewRowChangeEventHandler
        
        Public Event TORNewRowChanged As TORNewRowChangeEventHandler
        
        Public Event TORNewRowDeleting As TORNewRowChangeEventHandler
        
        Public Event TORNewRowDeleted As TORNewRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTORNewRow(ByVal row As TORNewRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTORNewRow( _
                    ByVal StudentNumber As String,  _
                    ByVal LastName As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal Sex As String,  _
                    ByVal civilStatus As String,  _
                    ByVal birthDate As Date,  _
                    ByVal BirthPlace As String,  _
                    ByVal father As String,  _
                    ByVal mother As String,  _
                    ByVal address As String,  _
                    ByVal lastSchool As String,  _
                    ByVal lastSchoolDate As String,  _
                    ByVal admissionDate As Date,  _
                    ByVal admissionSem As String,  _
                    ByVal admissionSY As String,  _
                    ByVal admissionBasis As String,  _
                    ByVal lastAttended As String,  _
                    ByVal Course As String,  _
                    ByVal Major As String,  _
                    ByVal SubjectCode As String,  _
                    ByVal Description As String,  _
                    ByVal Final As String,  _
                    ByVal Complied As String,  _
                    ByVal Credits As Double,  _
                    ByVal Semester As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal registrar As String,  _
                    ByVal registrarPosition As String,  _
                    ByVal profImage() As Byte,  _
                    ByVal honors As String,  _
                    ByVal rotcSerial As String,  _
                    ByVal cwtsSerial As String,  _
                    ByVal graduationDate As String,  _
                    ByVal transfereeSchool As String,  _
                    ByVal transfereeAddress As String,  _
                    ByVal website As String,  _
                    ByVal emailad As String,  _
                    ByVal telNo As String,  _
                    ByVal website1 As String,  _
                    ByVal registrarEmail As String,  _
                    ByVal schoolLogo() As Byte,  _
                    ByVal ltsSerialNo As String) As TORNewRow
            Dim rowTORNewRow As TORNewRow = CType(Me.NewRow,TORNewRow)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, LastName, FirstName, MiddleName, Sex, civilStatus, birthDate, BirthPlace, father, mother, address, lastSchool, lastSchoolDate, admissionDate, admissionSem, admissionSY, admissionBasis, lastAttended, Course, Major, SubjectCode, Description, Final, Complied, Credits, Semester, SchoolName, SchoolAddress, registrar, registrarPosition, profImage, honors, rotcSerial, cwtsSerial, graduationDate, transfereeSchool, transfereeAddress, website, emailad, telNo, website1, registrarEmail, schoolLogo, ltsSerialNo}
            rowTORNewRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTORNewRow)
            Return rowTORNewRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As TORNewRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),TORNewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TORNewDataTable = CType(MyBase.Clone,TORNewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TORNewDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columncivilStatus = MyBase.Columns("civilStatus")
            Me.columnbirthDate = MyBase.Columns("birthDate")
            Me.columnBirthPlace = MyBase.Columns("BirthPlace")
            Me.columnfather = MyBase.Columns("father")
            Me.columnmother = MyBase.Columns("mother")
            Me.columnaddress = MyBase.Columns("address")
            Me.columnlastSchool = MyBase.Columns("lastSchool")
            Me.columnlastSchoolDate = MyBase.Columns("lastSchoolDate")
            Me.columnadmissionDate = MyBase.Columns("admissionDate")
            Me.columnadmissionSem = MyBase.Columns("admissionSem")
            Me.columnadmissionSY = MyBase.Columns("admissionSY")
            Me.columnadmissionBasis = MyBase.Columns("admissionBasis")
            Me.columnlastAttended = MyBase.Columns("lastAttended")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnMajor = MyBase.Columns("Major")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnFinal = MyBase.Columns("Final")
            Me.columnComplied = MyBase.Columns("Complied")
            Me.columnCredits = MyBase.Columns("Credits")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnregistrar = MyBase.Columns("registrar")
            Me.columnregistrarPosition = MyBase.Columns("registrarPosition")
            Me.columnprofImage = MyBase.Columns("profImage")
            Me.columnhonors = MyBase.Columns("honors")
            Me.columnrotcSerial = MyBase.Columns("rotcSerial")
            Me.columncwtsSerial = MyBase.Columns("cwtsSerial")
            Me.columngraduationDate = MyBase.Columns("graduationDate")
            Me.columntransfereeSchool = MyBase.Columns("transfereeSchool")
            Me.columntransfereeAddress = MyBase.Columns("transfereeAddress")
            Me.columnwebsite = MyBase.Columns("website")
            Me.columnemailad = MyBase.Columns("emailad")
            Me.columntelNo = MyBase.Columns("telNo")
            Me.columnwebsite1 = MyBase.Columns("website1")
            Me.columnregistrarEmail = MyBase.Columns("registrarEmail")
            Me.columnschoolLogo = MyBase.Columns("schoolLogo")
            Me.columnltsSerialNo = MyBase.Columns("ltsSerialNo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columncivilStatus = New Global.System.Data.DataColumn("civilStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncivilStatus)
            Me.columnbirthDate = New Global.System.Data.DataColumn("birthDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbirthDate)
            Me.columnBirthPlace = New Global.System.Data.DataColumn("BirthPlace", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthPlace)
            Me.columnfather = New Global.System.Data.DataColumn("father", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfather)
            Me.columnmother = New Global.System.Data.DataColumn("mother", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmother)
            Me.columnaddress = New Global.System.Data.DataColumn("address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddress)
            Me.columnlastSchool = New Global.System.Data.DataColumn("lastSchool", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlastSchool)
            Me.columnlastSchoolDate = New Global.System.Data.DataColumn("lastSchoolDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlastSchoolDate)
            Me.columnadmissionDate = New Global.System.Data.DataColumn("admissionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadmissionDate)
            Me.columnadmissionSem = New Global.System.Data.DataColumn("admissionSem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadmissionSem)
            Me.columnadmissionSY = New Global.System.Data.DataColumn("admissionSY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadmissionSY)
            Me.columnadmissionBasis = New Global.System.Data.DataColumn("admissionBasis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadmissionBasis)
            Me.columnlastAttended = New Global.System.Data.DataColumn("lastAttended", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlastAttended)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnMajor = New Global.System.Data.DataColumn("Major", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMajor)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnFinal = New Global.System.Data.DataColumn("Final", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinal)
            Me.columnComplied = New Global.System.Data.DataColumn("Complied", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComplied)
            Me.columnCredits = New Global.System.Data.DataColumn("Credits", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCredits)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnregistrar = New Global.System.Data.DataColumn("registrar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrar)
            Me.columnregistrarPosition = New Global.System.Data.DataColumn("registrarPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrarPosition)
            Me.columnprofImage = New Global.System.Data.DataColumn("profImage", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprofImage)
            Me.columnhonors = New Global.System.Data.DataColumn("honors", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhonors)
            Me.columnrotcSerial = New Global.System.Data.DataColumn("rotcSerial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrotcSerial)
            Me.columncwtsSerial = New Global.System.Data.DataColumn("cwtsSerial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncwtsSerial)
            Me.columngraduationDate = New Global.System.Data.DataColumn("graduationDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngraduationDate)
            Me.columntransfereeSchool = New Global.System.Data.DataColumn("transfereeSchool", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransfereeSchool)
            Me.columntransfereeAddress = New Global.System.Data.DataColumn("transfereeAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransfereeAddress)
            Me.columnwebsite = New Global.System.Data.DataColumn("website", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwebsite)
            Me.columnemailad = New Global.System.Data.DataColumn("emailad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemailad)
            Me.columntelNo = New Global.System.Data.DataColumn("telNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntelNo)
            Me.columnwebsite1 = New Global.System.Data.DataColumn("website1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwebsite1)
            Me.columnregistrarEmail = New Global.System.Data.DataColumn("registrarEmail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrarEmail)
            Me.columnschoolLogo = New Global.System.Data.DataColumn("schoolLogo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschoolLogo)
            Me.columnltsSerialNo = New Global.System.Data.DataColumn("ltsSerialNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnltsSerialNo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnLastName.MaxLength = 60
            Me.columnFirstName.MaxLength = 60
            Me.columnMiddleName.MaxLength = 60
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columncivilStatus.AllowDBNull = false
            Me.columncivilStatus.MaxLength = 45
            Me.columnbirthDate.AllowDBNull = false
            Me.columnBirthPlace.AllowDBNull = false
            Me.columnBirthPlace.MaxLength = 250
            Me.columnfather.AllowDBNull = false
            Me.columnfather.MaxLength = 65
            Me.columnmother.AllowDBNull = false
            Me.columnmother.MaxLength = 65
            Me.columnaddress.MaxLength = 226
            Me.columnlastSchool.AllowDBNull = false
            Me.columnlastSchool.MaxLength = 120
            Me.columnlastSchoolDate.AllowDBNull = false
            Me.columnlastSchoolDate.MaxLength = 45
            Me.columnadmissionDate.AllowDBNull = false
            Me.columnadmissionSem.AllowDBNull = false
            Me.columnadmissionSem.MaxLength = 45
            Me.columnadmissionSY.AllowDBNull = false
            Me.columnadmissionSY.MaxLength = 45
            Me.columnadmissionBasis.AllowDBNull = false
            Me.columnadmissionBasis.MaxLength = 150
            Me.columnlastAttended.AllowDBNull = false
            Me.columnlastAttended.MaxLength = 45
            Me.columnCourse.MaxLength = 250
            Me.columnMajor.AllowDBNull = false
            Me.columnMajor.MaxLength = 45
            Me.columnSubjectCode.AllowDBNull = false
            Me.columnSubjectCode.MaxLength = 45
            Me.columnDescription.AllowDBNull = false
            Me.columnDescription.MaxLength = 250
            Me.columnFinal.AllowDBNull = false
            Me.columnFinal.MaxLength = 45
            Me.columnComplied.AllowDBNull = false
            Me.columnComplied.MaxLength = 45
            Me.columnSemester.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnregistrar.AllowDBNull = false
            Me.columnregistrar.MaxLength = 65
            Me.columnregistrarPosition.AllowDBNull = false
            Me.columnregistrarPosition.MaxLength = 45
            Me.columnhonors.AllowDBNull = false
            Me.columnhonors.MaxLength = 150
            Me.columnrotcSerial.AllowDBNull = false
            Me.columnrotcSerial.MaxLength = 45
            Me.columncwtsSerial.AllowDBNull = false
            Me.columncwtsSerial.MaxLength = 45
            Me.columngraduationDate.MaxLength = 45
            Me.columntransfereeSchool.AllowDBNull = false
            Me.columntransfereeSchool.MaxLength = 150
            Me.columntransfereeAddress.AllowDBNull = false
            Me.columntransfereeAddress.MaxLength = 150
            Me.columnwebsite.AllowDBNull = false
            Me.columnwebsite.MaxLength = 45
            Me.columnemailad.AllowDBNull = false
            Me.columnemailad.MaxLength = 45
            Me.columntelNo.AllowDBNull = false
            Me.columntelNo.MaxLength = 45
            Me.columnwebsite1.AllowDBNull = false
            Me.columnwebsite1.MaxLength = 45
            Me.columnregistrarEmail.AllowDBNull = false
            Me.columnregistrarEmail.MaxLength = 45
            Me.columnltsSerialNo.AllowDBNull = false
            Me.columnltsSerialNo.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTORNewRow() As TORNewRow
            Return CType(Me.NewRow,TORNewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TORNewRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TORNewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TORNewRowChangedEvent) Is Nothing) Then
                RaiseEvent TORNewRowChanged(Me, New TORNewRowChangeEvent(CType(e.Row,TORNewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TORNewRowChangingEvent) Is Nothing) Then
                RaiseEvent TORNewRowChanging(Me, New TORNewRowChangeEvent(CType(e.Row,TORNewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TORNewRowDeletedEvent) Is Nothing) Then
                RaiseEvent TORNewRowDeleted(Me, New TORNewRowChangeEvent(CType(e.Row,TORNewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TORNewRowDeletingEvent) Is Nothing) Then
                RaiseEvent TORNewRowDeleting(Me, New TORNewRowChangeEvent(CType(e.Row,TORNewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTORNewRow(ByVal row As TORNewRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Report3 = New Report3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TORNewDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DTRDataTable
        Inherits Global.System.Data.TypedTableBase(Of DTRRow)
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnlogDate As Global.System.Data.DataColumn
        
        Private columnlogTime As Global.System.Data.DataColumn
        
        Private columnMonthName As Global.System.Data.DataColumn
        
        Private columnYearName As Global.System.Data.DataColumn
        
        Private columnschoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DTR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property logDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlogDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property logTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlogTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonthNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonthName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DTRRow
            Get
                Return CType(Me.Rows(index),DTRRow)
            End Get
        End Property
        
        Public Event DTRRowChanging As DTRRowChangeEventHandler
        
        Public Event DTRRowChanged As DTRRowChangeEventHandler
        
        Public Event DTRRowDeleting As DTRRowChangeEventHandler
        
        Public Event DTRRowDeleted As DTRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDTRRow(ByVal row As DTRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDTRRow(ByVal FirstName As String, ByVal MiddleName As String, ByVal LastName As String, ByVal logDate As Date, ByVal logTime As String, ByVal MonthName As String, ByVal YearName As Long, ByVal schoolHead As String, ByVal sHeadPosition As String) As DTRRow
            Dim rowDTRRow As DTRRow = CType(Me.NewRow,DTRRow)
            Dim columnValuesArray() As Object = New Object() {FirstName, MiddleName, LastName, logDate, logTime, MonthName, YearName, schoolHead, sHeadPosition}
            rowDTRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDTRRow)
            Return rowDTRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DTRDataTable = CType(MyBase.Clone,DTRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DTRDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnlogDate = MyBase.Columns("logDate")
            Me.columnlogTime = MyBase.Columns("logTime")
            Me.columnMonthName = MyBase.Columns("MonthName")
            Me.columnYearName = MyBase.Columns("YearName")
            Me.columnschoolHead = MyBase.Columns("schoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnlogDate = New Global.System.Data.DataColumn("logDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlogDate)
            Me.columnlogTime = New Global.System.Data.DataColumn("logTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlogTime)
            Me.columnMonthName = New Global.System.Data.DataColumn("MonthName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonthName)
            Me.columnYearName = New Global.System.Data.DataColumn("YearName", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearName)
            Me.columnschoolHead = New Global.System.Data.DataColumn("schoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnFirstName.AllowDBNull = false
            Me.columnFirstName.MaxLength = 45
            Me.columnMiddleName.MaxLength = 1
            Me.columnLastName.AllowDBNull = false
            Me.columnLastName.MaxLength = 65
            Me.columnlogDate.AllowDBNull = false
            Me.columnlogTime.AllowDBNull = false
            Me.columnlogTime.MaxLength = 45
            Me.columnMonthName.MaxLength = 9
            Me.columnschoolHead.AllowDBNull = false
            Me.columnschoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDTRRow() As DTRRow
            Return CType(Me.NewRow,DTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DTRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DTRRowChangedEvent) Is Nothing) Then
                RaiseEvent DTRRowChanged(Me, New DTRRowChangeEvent(CType(e.Row,DTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DTRRowChangingEvent) Is Nothing) Then
                RaiseEvent DTRRowChanging(Me, New DTRRowChangeEvent(CType(e.Row,DTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DTRRowDeletedEvent) Is Nothing) Then
                RaiseEvent DTRRowDeleted(Me, New DTRRowChangeEvent(CType(e.Row,DTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DTRRowDeletingEvent) Is Nothing) Then
                RaiseEvent DTRRowDeleting(Me, New DTRRowChangeEvent(CType(e.Row,DTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDTRRow(ByVal row As DTRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Report3 = New Report3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DTRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COR2DataTable
        Inherits Global.System.Data.TypedTableBase(Of COR2Row)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnBirthdate As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnSem As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnMajor As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnLecUnit As Global.System.Data.DataColumn
        
        Private columnLabUnit As Global.System.Data.DataColumn
        
        Private columnUnits As Global.System.Data.DataColumn
        
        Private columnLabTime As Global.System.Data.DataColumn
        
        Private columnSchedTime As Global.System.Data.DataColumn
        
        Private columnRoom As Global.System.Data.DataColumn
        
        Private columnInstructor As Global.System.Data.DataColumn
        
        Private columnschedType As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnRegistrar As Global.System.Data.DataColumn
        
        Private columnregistrarPosition As Global.System.Data.DataColumn
        
        Private columncashier As Global.System.Data.DataColumn
        
        Private columncashierPosition As Global.System.Data.DataColumn
        
        Private columnscholarshipCoordinator As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnPresSign As Global.System.Data.DataColumn
        
        Private columnfooter As Global.System.Data.DataColumn
        
        Private columnTerm As Global.System.Data.DataColumn
        
        Private columnregSign As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COR2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MajorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMajor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LecUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLecUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchedTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchedTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RoomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRoom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InstructorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInstructor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schedTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschedType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrarPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrarPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashierPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashierPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property scholarshipCoordinatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnscholarshipCoordinator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PresSignColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPresSign
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property footerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfooter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TermColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTerm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regSignColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregSign
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COR2Row
            Get
                Return CType(Me.Rows(index),COR2Row)
            End Get
        End Property
        
        Public Event COR2RowChanging As COR2RowChangeEventHandler
        
        Public Event COR2RowChanged As COR2RowChangeEventHandler
        
        Public Event COR2RowDeleting As COR2RowChangeEventHandler
        
        Public Event COR2RowDeleted As COR2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOR2Row(ByVal row As COR2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOR2Row( _
                    ByVal StudentNumber As String,  _
                    ByVal StudentName As String,  _
                    ByVal Birthdate As Date,  _
                    ByVal Sex As String,  _
                    ByVal Sem As String,  _
                    ByVal SY As String,  _
                    ByVal Course As String,  _
                    ByVal Major As String,  _
                    ByVal YearLevel As String,  _
                    ByVal SubjectCode As String,  _
                    ByVal Description As String,  _
                    ByVal Section As String,  _
                    ByVal LecUnit As String,  _
                    ByVal LabUnit As String,  _
                    ByVal Units As Double,  _
                    ByVal LabTime As String,  _
                    ByVal SchedTime As String,  _
                    ByVal Room As String,  _
                    ByVal Instructor As String,  _
                    ByVal schedType As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal Registrar As String,  _
                    ByVal registrarPosition As String,  _
                    ByVal cashier As String,  _
                    ByVal cashierPosition As String,  _
                    ByVal scholarshipCoordinator As String,  _
                    ByVal letterHead() As Byte,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal PresSign() As Byte,  _
                    ByVal footer() As Byte,  _
                    ByVal Term As String,  _
                    ByVal regSign() As Byte) As COR2Row
            Dim rowCOR2Row As COR2Row = CType(Me.NewRow,COR2Row)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, StudentName, Birthdate, Sex, Sem, SY, Course, Major, YearLevel, SubjectCode, Description, Section, LecUnit, LabUnit, Units, LabTime, SchedTime, Room, Instructor, schedType, SchoolName, SchoolAddress, Registrar, registrarPosition, cashier, cashierPosition, scholarshipCoordinator, letterHead, SchoolHead, sHeadPosition, PresSign, footer, Term, regSign}
            rowCOR2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOR2Row)
            Return rowCOR2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As COR2Row
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),COR2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COR2DataTable = CType(MyBase.Clone,COR2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COR2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnBirthdate = MyBase.Columns("Birthdate")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnSem = MyBase.Columns("Sem")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnMajor = MyBase.Columns("Major")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnLecUnit = MyBase.Columns("LecUnit")
            Me.columnLabUnit = MyBase.Columns("LabUnit")
            Me.columnUnits = MyBase.Columns("Units")
            Me.columnLabTime = MyBase.Columns("LabTime")
            Me.columnSchedTime = MyBase.Columns("SchedTime")
            Me.columnRoom = MyBase.Columns("Room")
            Me.columnInstructor = MyBase.Columns("Instructor")
            Me.columnschedType = MyBase.Columns("schedType")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnRegistrar = MyBase.Columns("Registrar")
            Me.columnregistrarPosition = MyBase.Columns("registrarPosition")
            Me.columncashier = MyBase.Columns("cashier")
            Me.columncashierPosition = MyBase.Columns("cashierPosition")
            Me.columnscholarshipCoordinator = MyBase.Columns("scholarshipCoordinator")
            Me.columnletterHead = MyBase.Columns("letterHead")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnPresSign = MyBase.Columns("PresSign")
            Me.columnfooter = MyBase.Columns("footer")
            Me.columnTerm = MyBase.Columns("Term")
            Me.columnregSign = MyBase.Columns("regSign")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnBirthdate = New Global.System.Data.DataColumn("Birthdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthdate)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnSem = New Global.System.Data.DataColumn("Sem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSem)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnMajor = New Global.System.Data.DataColumn("Major", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMajor)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnLecUnit = New Global.System.Data.DataColumn("LecUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLecUnit)
            Me.columnLabUnit = New Global.System.Data.DataColumn("LabUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabUnit)
            Me.columnUnits = New Global.System.Data.DataColumn("Units", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits)
            Me.columnLabTime = New Global.System.Data.DataColumn("LabTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabTime)
            Me.columnSchedTime = New Global.System.Data.DataColumn("SchedTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchedTime)
            Me.columnRoom = New Global.System.Data.DataColumn("Room", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRoom)
            Me.columnInstructor = New Global.System.Data.DataColumn("Instructor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstructor)
            Me.columnschedType = New Global.System.Data.DataColumn("schedType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschedType)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnRegistrar = New Global.System.Data.DataColumn("Registrar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrar)
            Me.columnregistrarPosition = New Global.System.Data.DataColumn("registrarPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrarPosition)
            Me.columncashier = New Global.System.Data.DataColumn("cashier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashier)
            Me.columncashierPosition = New Global.System.Data.DataColumn("cashierPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashierPosition)
            Me.columnscholarshipCoordinator = New Global.System.Data.DataColumn("scholarshipCoordinator", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnscholarshipCoordinator)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnPresSign = New Global.System.Data.DataColumn("PresSign", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPresSign)
            Me.columnfooter = New Global.System.Data.DataColumn("footer", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfooter)
            Me.columnTerm = New Global.System.Data.DataColumn("Term", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTerm)
            Me.columnregSign = New Global.System.Data.DataColumn("regSign", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregSign)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnStudentName.MaxLength = 182
            Me.columnBirthdate.AllowDBNull = false
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnSem.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnCourse.AllowDBNull = false
            Me.columnCourse.MaxLength = 250
            Me.columnMajor.AllowDBNull = false
            Me.columnMajor.MaxLength = 45
            Me.columnYearLevel.AllowDBNull = false
            Me.columnYearLevel.MaxLength = 45
            Me.columnSubjectCode.MaxLength = 45
            Me.columnDescription.MaxLength = 250
            Me.columnSection.MaxLength = 45
            Me.columnLecUnit.MaxLength = 45
            Me.columnLabUnit.MaxLength = 45
            Me.columnLabTime.MaxLength = 45
            Me.columnSchedTime.MaxLength = 45
            Me.columnRoom.MaxLength = 45
            Me.columnInstructor.MaxLength = 45
            Me.columnschedType.AllowDBNull = false
            Me.columnschedType.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnRegistrar.AllowDBNull = false
            Me.columnRegistrar.MaxLength = 65
            Me.columnregistrarPosition.AllowDBNull = false
            Me.columnregistrarPosition.MaxLength = 45
            Me.columncashier.AllowDBNull = false
            Me.columncashier.MaxLength = 45
            Me.columncashierPosition.AllowDBNull = false
            Me.columncashierPosition.MaxLength = 45
            Me.columnscholarshipCoordinator.AllowDBNull = false
            Me.columnscholarshipCoordinator.MaxLength = 65
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnTerm.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOR2Row() As COR2Row
            Return CType(Me.NewRow,COR2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COR2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COR2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COR2RowChangedEvent) Is Nothing) Then
                RaiseEvent COR2RowChanged(Me, New COR2RowChangeEvent(CType(e.Row,COR2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COR2RowChangingEvent) Is Nothing) Then
                RaiseEvent COR2RowChanging(Me, New COR2RowChangeEvent(CType(e.Row,COR2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COR2RowDeletedEvent) Is Nothing) Then
                RaiseEvent COR2RowDeleted(Me, New COR2RowChangeEvent(CType(e.Row,COR2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COR2RowDeletingEvent) Is Nothing) Then
                RaiseEvent COR2RowDeleting(Me, New COR2RowChangeEvent(CType(e.Row,COR2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOR2Row(ByVal row As COR2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Report3 = New Report3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COR2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class scholarsListingv2DataTable
        Inherits Global.System.Data.TypedTableBase(Of scholarsListingv2Row)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnlrn As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMI As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnBirthDate As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnScholarship As Global.System.Data.DataColumn
        
        Private columnprevGPA As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "scholarsListingv2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lrnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlrn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScholarshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScholarship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prevGPAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprevGPA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As scholarsListingv2Row
            Get
                Return CType(Me.Rows(index),scholarsListingv2Row)
            End Get
        End Property
        
        Public Event scholarsListingv2RowChanging As scholarsListingv2RowChangeEventHandler
        
        Public Event scholarsListingv2RowChanged As scholarsListingv2RowChangeEventHandler
        
        Public Event scholarsListingv2RowDeleting As scholarsListingv2RowChangeEventHandler
        
        Public Event scholarsListingv2RowDeleted As scholarsListingv2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddscholarsListingv2Row(ByVal row As scholarsListingv2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddscholarsListingv2Row( _
                    ByVal StudentNumber As String,  _
                    ByVal lrn As String,  _
                    ByVal LastName As String,  _
                    ByVal FirstName As String,  _
                    ByVal MI As String,  _
                    ByVal Sex As String,  _
                    ByVal BirthDate As Date,  _
                    ByVal YearLevel As String,  _
                    ByVal Course As String,  _
                    ByVal Scholarship As String,  _
                    ByVal prevGPA As String,  _
                    ByVal Semester As String,  _
                    ByVal SY As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal letterHead() As Byte) As scholarsListingv2Row
            Dim rowscholarsListingv2Row As scholarsListingv2Row = CType(Me.NewRow,scholarsListingv2Row)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, lrn, LastName, FirstName, MI, Sex, BirthDate, YearLevel, Course, Scholarship, prevGPA, Semester, SY, SchoolName, SchoolAddress, letterHead}
            rowscholarsListingv2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowscholarsListingv2Row)
            Return rowscholarsListingv2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As scholarsListingv2Row
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),scholarsListingv2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As scholarsListingv2DataTable = CType(MyBase.Clone,scholarsListingv2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New scholarsListingv2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnlrn = MyBase.Columns("lrn")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMI = MyBase.Columns("MI")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnBirthDate = MyBase.Columns("BirthDate")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnScholarship = MyBase.Columns("Scholarship")
            Me.columnprevGPA = MyBase.Columns("prevGPA")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnletterHead = MyBase.Columns("letterHead")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnlrn = New Global.System.Data.DataColumn("lrn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlrn)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMI = New Global.System.Data.DataColumn("MI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMI)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnBirthDate = New Global.System.Data.DataColumn("BirthDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDate)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnScholarship = New Global.System.Data.DataColumn("Scholarship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScholarship)
            Me.columnprevGPA = New Global.System.Data.DataColumn("prevGPA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprevGPA)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnlrn.AllowDBNull = false
            Me.columnlrn.MaxLength = 45
            Me.columnLastName.MaxLength = 60
            Me.columnFirstName.MaxLength = 60
            Me.columnMI.MaxLength = 1
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnBirthDate.AllowDBNull = false
            Me.columnYearLevel.MaxLength = 45
            Me.columnCourse.MaxLength = 250
            Me.columnScholarship.AllowDBNull = false
            Me.columnScholarship.MaxLength = 150
            Me.columnprevGPA.AllowDBNull = false
            Me.columnprevGPA.MaxLength = 45
            Me.columnSemester.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewscholarsListingv2Row() As scholarsListingv2Row
            Return CType(Me.NewRow,scholarsListingv2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New scholarsListingv2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(scholarsListingv2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.scholarsListingv2RowChangedEvent) Is Nothing) Then
                RaiseEvent scholarsListingv2RowChanged(Me, New scholarsListingv2RowChangeEvent(CType(e.Row,scholarsListingv2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.scholarsListingv2RowChangingEvent) Is Nothing) Then
                RaiseEvent scholarsListingv2RowChanging(Me, New scholarsListingv2RowChangeEvent(CType(e.Row,scholarsListingv2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.scholarsListingv2RowDeletedEvent) Is Nothing) Then
                RaiseEvent scholarsListingv2RowDeleted(Me, New scholarsListingv2RowChangeEvent(CType(e.Row,scholarsListingv2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.scholarsListingv2RowDeletingEvent) Is Nothing) Then
                RaiseEvent scholarsListingv2RowDeleting(Me, New scholarsListingv2RowChangeEvent(CType(e.Row,scholarsListingv2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovescholarsListingv2Row(ByVal row As scholarsListingv2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Report3 = New Report3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "scholarsListingv2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentVerificationDataTable
        Inherits Global.System.Data.TypedTableBase(Of StudentVerificationRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnsvNo As Global.System.Data.DataColumn
        
        Private columnseriesNo As Global.System.Data.DataColumn
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnstudentName As Global.System.Data.DataColumn
        
        Private columndegree As Global.System.Data.DataColumn
        
        Private columndateAttended As Global.System.Data.DataColumn
        
        Private columnyearLevel As Global.System.Data.DataColumn
        
        Private columngradDate As Global.System.Data.DataColumn
        
        Private columndateRequested As Global.System.Data.DataColumn
        
        Private columndateReleased As Global.System.Data.DataColumn
        
        Private columnsettingsID As Global.System.Data.DataColumn
        
        Private columnsettingsID1 As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnRegistrar As Global.System.Data.DataColumn
        
        Private columnregistrarPosition As Global.System.Data.DataColumn
        
        Private columnclerk As Global.System.Data.DataColumn
        
        Private columnclerkPosition As Global.System.Data.DataColumn
        
        Private columnadministrative As Global.System.Data.DataColumn
        
        Private columnadministrativePosition As Global.System.Data.DataColumn
        
        Private columncashier As Global.System.Data.DataColumn
        
        Private columncashierPosition As Global.System.Data.DataColumn
        
        Private columnadmissionOfficer As Global.System.Data.DataColumn
        
        Private columnstudentNoCode As Global.System.Data.DataColumn
        
        Private columnscholarshipCoordinator As Global.System.Data.DataColumn
        
        Private columnaccountant As Global.System.Data.DataColumn
        
        Private columnmainRegistrar As Global.System.Data.DataColumn
        
        Private columnwebsite As Global.System.Data.DataColumn
        
        Private columntelNo As Global.System.Data.DataColumn
        
        Private columnmobileNo As Global.System.Data.DataColumn
        
        Private columnbranchCode As Global.System.Data.DataColumn
        
        Private columnemailad As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        Private columnloginFormImage As Global.System.Data.DataColumn
        
        Private columnregistrarEmail As Global.System.Data.DataColumn
        
        Private columnschoolEmail As Global.System.Data.DataColumn
        
        Private columnschoolLogo As Global.System.Data.DataColumn
        
        Private columnVPAA As Global.System.Data.DataColumn
        
        Private columnPropertyCustodian As Global.System.Data.DataColumn
        
        Private columnUnitsEarned As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "StudentVerification"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property svNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsvNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property seriesNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseriesNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property degreeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndegree
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateAttendedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateAttended
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngradDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateRequestedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateRequested
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateReleasedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateReleased
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property settingsIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsettingsID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property settingsID1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsettingsID1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrarPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrarPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clerkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclerk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clerkPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclerkPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property administrativeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadministrative
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property administrativePositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadministrativePosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashierPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashierPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property admissionOfficerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadmissionOfficer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentNoCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentNoCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property scholarshipCoordinatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnscholarshipCoordinator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property accountantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccountant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mainRegistrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmainRegistrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property websiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwebsite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property telNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntelNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mobileNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmobileNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property branchCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbranchCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemailad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property loginFormImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnloginFormImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrarEmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrarEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schoolEmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschoolEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schoolLogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschoolLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VPAAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVPAA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropertyCustodianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropertyCustodian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitsEarnedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnitsEarned
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentVerificationRow
            Get
                Return CType(Me.Rows(index),StudentVerificationRow)
            End Get
        End Property
        
        Public Event StudentVerificationRowChanging As StudentVerificationRowChangeEventHandler
        
        Public Event StudentVerificationRowChanged As StudentVerificationRowChangeEventHandler
        
        Public Event StudentVerificationRowDeleting As StudentVerificationRowChangeEventHandler
        
        Public Event StudentVerificationRowDeleted As StudentVerificationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudentVerificationRow(ByVal row As StudentVerificationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudentVerificationRow( _
                    ByVal id As UInteger,  _
                    ByVal svNo As String,  _
                    ByVal seriesNo As String,  _
                    ByVal StudentNumber As String,  _
                    ByVal studentName As String,  _
                    ByVal degree As String,  _
                    ByVal dateAttended As String,  _
                    ByVal yearLevel As String,  _
                    ByVal gradDate As String,  _
                    ByVal dateRequested As String,  _
                    ByVal dateReleased As String,  _
                    ByVal settingsID As UInteger,  _
                    ByVal settingsID1 As UInteger,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal Registrar As String,  _
                    ByVal registrarPosition As String,  _
                    ByVal clerk As String,  _
                    ByVal clerkPosition As String,  _
                    ByVal administrative As String,  _
                    ByVal administrativePosition As String,  _
                    ByVal cashier As String,  _
                    ByVal cashierPosition As String,  _
                    ByVal admissionOfficer As String,  _
                    ByVal studentNoCode As String,  _
                    ByVal scholarshipCoordinator As String,  _
                    ByVal accountant As String,  _
                    ByVal mainRegistrar As String,  _
                    ByVal website As String,  _
                    ByVal telNo As String,  _
                    ByVal mobileNo As String,  _
                    ByVal branchCode As String,  _
                    ByVal emailad As String,  _
                    ByVal letterHead() As Byte,  _
                    ByVal loginFormImage As String,  _
                    ByVal registrarEmail As String,  _
                    ByVal schoolEmail As String,  _
                    ByVal schoolLogo() As Byte,  _
                    ByVal VPAA As String,  _
                    ByVal PropertyCustodian As String,  _
                    ByVal UnitsEarned As Double) As StudentVerificationRow
            Dim rowStudentVerificationRow As StudentVerificationRow = CType(Me.NewRow,StudentVerificationRow)
            Dim columnValuesArray() As Object = New Object() {id, svNo, seriesNo, StudentNumber, studentName, degree, dateAttended, yearLevel, gradDate, dateRequested, dateReleased, settingsID, settingsID1, SchoolName, SchoolAddress, SchoolHead, sHeadPosition, Registrar, registrarPosition, clerk, clerkPosition, administrative, administrativePosition, cashier, cashierPosition, admissionOfficer, studentNoCode, scholarshipCoordinator, accountant, mainRegistrar, website, telNo, mobileNo, branchCode, emailad, letterHead, loginFormImage, registrarEmail, schoolEmail, schoolLogo, VPAA, PropertyCustodian, UnitsEarned}
            rowStudentVerificationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudentVerificationRow)
            Return rowStudentVerificationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByidsettingsID1(ByVal id As UInteger, ByVal settingsID1 As UInteger) As StudentVerificationRow
            Return CType(Me.Rows.Find(New Object() {id, settingsID1}),StudentVerificationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudentVerificationDataTable = CType(MyBase.Clone,StudentVerificationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudentVerificationDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnsvNo = MyBase.Columns("svNo")
            Me.columnseriesNo = MyBase.Columns("seriesNo")
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnstudentName = MyBase.Columns("studentName")
            Me.columndegree = MyBase.Columns("degree")
            Me.columndateAttended = MyBase.Columns("dateAttended")
            Me.columnyearLevel = MyBase.Columns("yearLevel")
            Me.columngradDate = MyBase.Columns("gradDate")
            Me.columndateRequested = MyBase.Columns("dateRequested")
            Me.columndateReleased = MyBase.Columns("dateReleased")
            Me.columnsettingsID = MyBase.Columns("settingsID")
            Me.columnsettingsID1 = MyBase.Columns("settingsID1")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnRegistrar = MyBase.Columns("Registrar")
            Me.columnregistrarPosition = MyBase.Columns("registrarPosition")
            Me.columnclerk = MyBase.Columns("clerk")
            Me.columnclerkPosition = MyBase.Columns("clerkPosition")
            Me.columnadministrative = MyBase.Columns("administrative")
            Me.columnadministrativePosition = MyBase.Columns("administrativePosition")
            Me.columncashier = MyBase.Columns("cashier")
            Me.columncashierPosition = MyBase.Columns("cashierPosition")
            Me.columnadmissionOfficer = MyBase.Columns("admissionOfficer")
            Me.columnstudentNoCode = MyBase.Columns("studentNoCode")
            Me.columnscholarshipCoordinator = MyBase.Columns("scholarshipCoordinator")
            Me.columnaccountant = MyBase.Columns("accountant")
            Me.columnmainRegistrar = MyBase.Columns("mainRegistrar")
            Me.columnwebsite = MyBase.Columns("website")
            Me.columntelNo = MyBase.Columns("telNo")
            Me.columnmobileNo = MyBase.Columns("mobileNo")
            Me.columnbranchCode = MyBase.Columns("branchCode")
            Me.columnemailad = MyBase.Columns("emailad")
            Me.columnletterHead = MyBase.Columns("letterHead")
            Me.columnloginFormImage = MyBase.Columns("loginFormImage")
            Me.columnregistrarEmail = MyBase.Columns("registrarEmail")
            Me.columnschoolEmail = MyBase.Columns("schoolEmail")
            Me.columnschoolLogo = MyBase.Columns("schoolLogo")
            Me.columnVPAA = MyBase.Columns("VPAA")
            Me.columnPropertyCustodian = MyBase.Columns("PropertyCustodian")
            Me.columnUnitsEarned = MyBase.Columns("UnitsEarned")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnsvNo = New Global.System.Data.DataColumn("svNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsvNo)
            Me.columnseriesNo = New Global.System.Data.DataColumn("seriesNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseriesNo)
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnstudentName = New Global.System.Data.DataColumn("studentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentName)
            Me.columndegree = New Global.System.Data.DataColumn("degree", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndegree)
            Me.columndateAttended = New Global.System.Data.DataColumn("dateAttended", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateAttended)
            Me.columnyearLevel = New Global.System.Data.DataColumn("yearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearLevel)
            Me.columngradDate = New Global.System.Data.DataColumn("gradDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngradDate)
            Me.columndateRequested = New Global.System.Data.DataColumn("dateRequested", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateRequested)
            Me.columndateReleased = New Global.System.Data.DataColumn("dateReleased", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateReleased)
            Me.columnsettingsID = New Global.System.Data.DataColumn("settingsID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsettingsID)
            Me.columnsettingsID1 = New Global.System.Data.DataColumn("settingsID1", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsettingsID1)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnRegistrar = New Global.System.Data.DataColumn("Registrar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrar)
            Me.columnregistrarPosition = New Global.System.Data.DataColumn("registrarPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrarPosition)
            Me.columnclerk = New Global.System.Data.DataColumn("clerk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclerk)
            Me.columnclerkPosition = New Global.System.Data.DataColumn("clerkPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclerkPosition)
            Me.columnadministrative = New Global.System.Data.DataColumn("administrative", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadministrative)
            Me.columnadministrativePosition = New Global.System.Data.DataColumn("administrativePosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadministrativePosition)
            Me.columncashier = New Global.System.Data.DataColumn("cashier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashier)
            Me.columncashierPosition = New Global.System.Data.DataColumn("cashierPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashierPosition)
            Me.columnadmissionOfficer = New Global.System.Data.DataColumn("admissionOfficer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadmissionOfficer)
            Me.columnstudentNoCode = New Global.System.Data.DataColumn("studentNoCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentNoCode)
            Me.columnscholarshipCoordinator = New Global.System.Data.DataColumn("scholarshipCoordinator", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnscholarshipCoordinator)
            Me.columnaccountant = New Global.System.Data.DataColumn("accountant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccountant)
            Me.columnmainRegistrar = New Global.System.Data.DataColumn("mainRegistrar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmainRegistrar)
            Me.columnwebsite = New Global.System.Data.DataColumn("website", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwebsite)
            Me.columntelNo = New Global.System.Data.DataColumn("telNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntelNo)
            Me.columnmobileNo = New Global.System.Data.DataColumn("mobileNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmobileNo)
            Me.columnbranchCode = New Global.System.Data.DataColumn("branchCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbranchCode)
            Me.columnemailad = New Global.System.Data.DataColumn("emailad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemailad)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columnloginFormImage = New Global.System.Data.DataColumn("loginFormImage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnloginFormImage)
            Me.columnregistrarEmail = New Global.System.Data.DataColumn("registrarEmail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrarEmail)
            Me.columnschoolEmail = New Global.System.Data.DataColumn("schoolEmail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschoolEmail)
            Me.columnschoolLogo = New Global.System.Data.DataColumn("schoolLogo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschoolLogo)
            Me.columnVPAA = New Global.System.Data.DataColumn("VPAA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVPAA)
            Me.columnPropertyCustodian = New Global.System.Data.DataColumn("PropertyCustodian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropertyCustodian)
            Me.columnUnitsEarned = New Global.System.Data.DataColumn("UnitsEarned", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitsEarned)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid, Me.columnsettingsID1}, true))
            Me.columnid.AllowDBNull = false
            Me.columnsvNo.AllowDBNull = false
            Me.columnsvNo.MaxLength = 45
            Me.columnseriesNo.AllowDBNull = false
            Me.columnseriesNo.MaxLength = 45
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.MaxLength = 45
            Me.columnstudentName.AllowDBNull = false
            Me.columnstudentName.MaxLength = 100
            Me.columndegree.AllowDBNull = false
            Me.columndegree.MaxLength = 65
            Me.columndateAttended.AllowDBNull = false
            Me.columndateAttended.MaxLength = 45
            Me.columnyearLevel.AllowDBNull = false
            Me.columnyearLevel.MaxLength = 45
            Me.columngradDate.AllowDBNull = false
            Me.columngradDate.MaxLength = 45
            Me.columndateRequested.AllowDBNull = false
            Me.columndateRequested.MaxLength = 45
            Me.columndateReleased.AllowDBNull = false
            Me.columndateReleased.MaxLength = 45
            Me.columnsettingsID.AllowDBNull = false
            Me.columnsettingsID1.AllowDBNull = false
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnRegistrar.AllowDBNull = false
            Me.columnRegistrar.MaxLength = 65
            Me.columnregistrarPosition.AllowDBNull = false
            Me.columnregistrarPosition.MaxLength = 45
            Me.columnclerk.AllowDBNull = false
            Me.columnclerk.MaxLength = 65
            Me.columnclerkPosition.AllowDBNull = false
            Me.columnclerkPosition.MaxLength = 45
            Me.columnadministrative.AllowDBNull = false
            Me.columnadministrative.MaxLength = 65
            Me.columnadministrativePosition.AllowDBNull = false
            Me.columnadministrativePosition.MaxLength = 45
            Me.columncashier.AllowDBNull = false
            Me.columncashier.MaxLength = 45
            Me.columncashierPosition.AllowDBNull = false
            Me.columncashierPosition.MaxLength = 45
            Me.columnadmissionOfficer.MaxLength = 65
            Me.columnstudentNoCode.AllowDBNull = false
            Me.columnstudentNoCode.MaxLength = 45
            Me.columnscholarshipCoordinator.AllowDBNull = false
            Me.columnscholarshipCoordinator.MaxLength = 45
            Me.columnaccountant.AllowDBNull = false
            Me.columnaccountant.MaxLength = 45
            Me.columnmainRegistrar.AllowDBNull = false
            Me.columnmainRegistrar.MaxLength = 150
            Me.columnwebsite.AllowDBNull = false
            Me.columnwebsite.MaxLength = 45
            Me.columntelNo.AllowDBNull = false
            Me.columntelNo.MaxLength = 45
            Me.columnmobileNo.AllowDBNull = false
            Me.columnmobileNo.MaxLength = 45
            Me.columnbranchCode.AllowDBNull = false
            Me.columnbranchCode.MaxLength = 45
            Me.columnemailad.AllowDBNull = false
            Me.columnemailad.MaxLength = 45
            Me.columnloginFormImage.AllowDBNull = false
            Me.columnloginFormImage.MaxLength = 500
            Me.columnregistrarEmail.AllowDBNull = false
            Me.columnregistrarEmail.MaxLength = 45
            Me.columnschoolEmail.AllowDBNull = false
            Me.columnschoolEmail.MaxLength = 45
            Me.columnVPAA.AllowDBNull = false
            Me.columnVPAA.MaxLength = 65
            Me.columnPropertyCustodian.AllowDBNull = false
            Me.columnPropertyCustodian.MaxLength = 65
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudentVerificationRow() As StudentVerificationRow
            Return CType(Me.NewRow,StudentVerificationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudentVerificationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudentVerificationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentVerificationRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentVerificationRowChanged(Me, New StudentVerificationRowChangeEvent(CType(e.Row,StudentVerificationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentVerificationRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentVerificationRowChanging(Me, New StudentVerificationRowChangeEvent(CType(e.Row,StudentVerificationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentVerificationRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentVerificationRowDeleted(Me, New StudentVerificationRowChangeEvent(CType(e.Row,StudentVerificationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentVerificationRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentVerificationRowDeleting(Me, New StudentVerificationRowChangeEvent(CType(e.Row,StudentVerificationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudentVerificationRow(ByVal row As StudentVerificationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Report3 = New Report3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentVerificationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CAVDataSetDataTable
        Inherits Global.System.Data.TypedTableBase(Of CAVDataSetRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnsvNo As Global.System.Data.DataColumn
        
        Private columnseriesNo As Global.System.Data.DataColumn
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnstudentName As Global.System.Data.DataColumn
        
        Private columndegree As Global.System.Data.DataColumn
        
        Private columndateAttended As Global.System.Data.DataColumn
        
        Private columnyearLevel As Global.System.Data.DataColumn
        
        Private columngradDate As Global.System.Data.DataColumn
        
        Private columndateReleased As Global.System.Data.DataColumn
        
        Private columnsettingsID As Global.System.Data.DataColumn
        
        Private columnsettingsID1 As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnRegistrar As Global.System.Data.DataColumn
        
        Private columnregistrarPosition As Global.System.Data.DataColumn
        
        Private columnclerk As Global.System.Data.DataColumn
        
        Private columnclerkPosition As Global.System.Data.DataColumn
        
        Private columnadministrative As Global.System.Data.DataColumn
        
        Private columnadministrativePosition As Global.System.Data.DataColumn
        
        Private columncashier As Global.System.Data.DataColumn
        
        Private columncashierPosition As Global.System.Data.DataColumn
        
        Private columnadmissionOfficer As Global.System.Data.DataColumn
        
        Private columnstudentNoCode As Global.System.Data.DataColumn
        
        Private columnscholarshipCoordinator As Global.System.Data.DataColumn
        
        Private columnaccountant As Global.System.Data.DataColumn
        
        Private columnmainRegistrar As Global.System.Data.DataColumn
        
        Private columnwebsite As Global.System.Data.DataColumn
        
        Private columntelNo As Global.System.Data.DataColumn
        
        Private columnmobileNo As Global.System.Data.DataColumn
        
        Private columnbranchCode As Global.System.Data.DataColumn
        
        Private columnemailad As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        Private columnloginFormImage As Global.System.Data.DataColumn
        
        Private columnregistrarEmail As Global.System.Data.DataColumn
        
        Private columnschoolEmail As Global.System.Data.DataColumn
        
        Private columnschoolLogo As Global.System.Data.DataColumn
        
        Private columnVPAA As Global.System.Data.DataColumn
        
        Private columnPropertyCustodian As Global.System.Data.DataColumn
        
        Private columnUnitsEarned As Global.System.Data.DataColumn
        
        Private columnreviewedBy As Global.System.Data.DataColumn
        
        Private columnorNo As Global.System.Data.DataColumn
        
        Private columnamountPaid As Global.System.Data.DataColumn
        
        Private columndatePaid As Global.System.Data.DataColumn
        
        Private columnprocessedBy As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CAVDataSet"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property svNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsvNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property seriesNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseriesNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property degreeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndegree
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateAttendedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateAttended
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngradDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateReleasedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateReleased
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property settingsIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsettingsID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property settingsID1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsettingsID1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrarPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrarPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clerkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclerk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clerkPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclerkPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property administrativeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadministrative
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property administrativePositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadministrativePosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashierPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashierPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property admissionOfficerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadmissionOfficer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentNoCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentNoCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property scholarshipCoordinatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnscholarshipCoordinator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property accountantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccountant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mainRegistrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmainRegistrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property websiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwebsite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property telNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntelNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mobileNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmobileNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property branchCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbranchCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemailad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property loginFormImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnloginFormImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrarEmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrarEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schoolEmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschoolEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schoolLogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschoolLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VPAAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVPAA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropertyCustodianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropertyCustodian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitsEarnedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnitsEarned
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property reviewedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreviewedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property orNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnorNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amountPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamountPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property datePaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatePaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property processedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprocessedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CAVDataSetRow
            Get
                Return CType(Me.Rows(index),CAVDataSetRow)
            End Get
        End Property
        
        Public Event CAVDataSetRowChanging As CAVDataSetRowChangeEventHandler
        
        Public Event CAVDataSetRowChanged As CAVDataSetRowChangeEventHandler
        
        Public Event CAVDataSetRowDeleting As CAVDataSetRowChangeEventHandler
        
        Public Event CAVDataSetRowDeleted As CAVDataSetRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCAVDataSetRow(ByVal row As CAVDataSetRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCAVDataSetRow( _
                    ByVal id As UInteger,  _
                    ByVal svNo As String,  _
                    ByVal seriesNo As String,  _
                    ByVal StudentNumber As String,  _
                    ByVal studentName As String,  _
                    ByVal degree As String,  _
                    ByVal dateAttended As String,  _
                    ByVal yearLevel As String,  _
                    ByVal gradDate As String,  _
                    ByVal dateReleased As String,  _
                    ByVal settingsID As UInteger,  _
                    ByVal settingsID1 As UInteger,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal Registrar As String,  _
                    ByVal registrarPosition As String,  _
                    ByVal clerk As String,  _
                    ByVal clerkPosition As String,  _
                    ByVal administrative As String,  _
                    ByVal administrativePosition As String,  _
                    ByVal cashier As String,  _
                    ByVal cashierPosition As String,  _
                    ByVal admissionOfficer As String,  _
                    ByVal studentNoCode As String,  _
                    ByVal scholarshipCoordinator As String,  _
                    ByVal accountant As String,  _
                    ByVal mainRegistrar As String,  _
                    ByVal website As String,  _
                    ByVal telNo As String,  _
                    ByVal mobileNo As String,  _
                    ByVal branchCode As String,  _
                    ByVal emailad As String,  _
                    ByVal letterHead() As Byte,  _
                    ByVal loginFormImage As String,  _
                    ByVal registrarEmail As String,  _
                    ByVal schoolEmail As String,  _
                    ByVal schoolLogo() As Byte,  _
                    ByVal VPAA As String,  _
                    ByVal PropertyCustodian As String,  _
                    ByVal UnitsEarned As Double,  _
                    ByVal reviewedBy As String,  _
                    ByVal orNo As String,  _
                    ByVal amountPaid As Double,  _
                    ByVal datePaid As String,  _
                    ByVal processedBy As String) As CAVDataSetRow
            Dim rowCAVDataSetRow As CAVDataSetRow = CType(Me.NewRow,CAVDataSetRow)
            Dim columnValuesArray() As Object = New Object() {id, svNo, seriesNo, StudentNumber, studentName, degree, dateAttended, yearLevel, gradDate, dateReleased, settingsID, settingsID1, SchoolName, SchoolAddress, SchoolHead, sHeadPosition, Registrar, registrarPosition, clerk, clerkPosition, administrative, administrativePosition, cashier, cashierPosition, admissionOfficer, studentNoCode, scholarshipCoordinator, accountant, mainRegistrar, website, telNo, mobileNo, branchCode, emailad, letterHead, loginFormImage, registrarEmail, schoolEmail, schoolLogo, VPAA, PropertyCustodian, UnitsEarned, reviewedBy, orNo, amountPaid, datePaid, processedBy}
            rowCAVDataSetRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCAVDataSetRow)
            Return rowCAVDataSetRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByidsettingsID1(ByVal id As UInteger, ByVal settingsID1 As UInteger) As CAVDataSetRow
            Return CType(Me.Rows.Find(New Object() {id, settingsID1}),CAVDataSetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CAVDataSetDataTable = CType(MyBase.Clone,CAVDataSetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CAVDataSetDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnsvNo = MyBase.Columns("svNo")
            Me.columnseriesNo = MyBase.Columns("seriesNo")
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnstudentName = MyBase.Columns("studentName")
            Me.columndegree = MyBase.Columns("degree")
            Me.columndateAttended = MyBase.Columns("dateAttended")
            Me.columnyearLevel = MyBase.Columns("yearLevel")
            Me.columngradDate = MyBase.Columns("gradDate")
            Me.columndateReleased = MyBase.Columns("dateReleased")
            Me.columnsettingsID = MyBase.Columns("settingsID")
            Me.columnsettingsID1 = MyBase.Columns("settingsID1")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnRegistrar = MyBase.Columns("Registrar")
            Me.columnregistrarPosition = MyBase.Columns("registrarPosition")
            Me.columnclerk = MyBase.Columns("clerk")
            Me.columnclerkPosition = MyBase.Columns("clerkPosition")
            Me.columnadministrative = MyBase.Columns("administrative")
            Me.columnadministrativePosition = MyBase.Columns("administrativePosition")
            Me.columncashier = MyBase.Columns("cashier")
            Me.columncashierPosition = MyBase.Columns("cashierPosition")
            Me.columnadmissionOfficer = MyBase.Columns("admissionOfficer")
            Me.columnstudentNoCode = MyBase.Columns("studentNoCode")
            Me.columnscholarshipCoordinator = MyBase.Columns("scholarshipCoordinator")
            Me.columnaccountant = MyBase.Columns("accountant")
            Me.columnmainRegistrar = MyBase.Columns("mainRegistrar")
            Me.columnwebsite = MyBase.Columns("website")
            Me.columntelNo = MyBase.Columns("telNo")
            Me.columnmobileNo = MyBase.Columns("mobileNo")
            Me.columnbranchCode = MyBase.Columns("branchCode")
            Me.columnemailad = MyBase.Columns("emailad")
            Me.columnletterHead = MyBase.Columns("letterHead")
            Me.columnloginFormImage = MyBase.Columns("loginFormImage")
            Me.columnregistrarEmail = MyBase.Columns("registrarEmail")
            Me.columnschoolEmail = MyBase.Columns("schoolEmail")
            Me.columnschoolLogo = MyBase.Columns("schoolLogo")
            Me.columnVPAA = MyBase.Columns("VPAA")
            Me.columnPropertyCustodian = MyBase.Columns("PropertyCustodian")
            Me.columnUnitsEarned = MyBase.Columns("UnitsEarned")
            Me.columnreviewedBy = MyBase.Columns("reviewedBy")
            Me.columnorNo = MyBase.Columns("orNo")
            Me.columnamountPaid = MyBase.Columns("amountPaid")
            Me.columndatePaid = MyBase.Columns("datePaid")
            Me.columnprocessedBy = MyBase.Columns("processedBy")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnsvNo = New Global.System.Data.DataColumn("svNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsvNo)
            Me.columnseriesNo = New Global.System.Data.DataColumn("seriesNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseriesNo)
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnstudentName = New Global.System.Data.DataColumn("studentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentName)
            Me.columndegree = New Global.System.Data.DataColumn("degree", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndegree)
            Me.columndateAttended = New Global.System.Data.DataColumn("dateAttended", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateAttended)
            Me.columnyearLevel = New Global.System.Data.DataColumn("yearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearLevel)
            Me.columngradDate = New Global.System.Data.DataColumn("gradDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngradDate)
            Me.columndateReleased = New Global.System.Data.DataColumn("dateReleased", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateReleased)
            Me.columnsettingsID = New Global.System.Data.DataColumn("settingsID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsettingsID)
            Me.columnsettingsID1 = New Global.System.Data.DataColumn("settingsID1", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsettingsID1)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnRegistrar = New Global.System.Data.DataColumn("Registrar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrar)
            Me.columnregistrarPosition = New Global.System.Data.DataColumn("registrarPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrarPosition)
            Me.columnclerk = New Global.System.Data.DataColumn("clerk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclerk)
            Me.columnclerkPosition = New Global.System.Data.DataColumn("clerkPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclerkPosition)
            Me.columnadministrative = New Global.System.Data.DataColumn("administrative", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadministrative)
            Me.columnadministrativePosition = New Global.System.Data.DataColumn("administrativePosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadministrativePosition)
            Me.columncashier = New Global.System.Data.DataColumn("cashier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashier)
            Me.columncashierPosition = New Global.System.Data.DataColumn("cashierPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashierPosition)
            Me.columnadmissionOfficer = New Global.System.Data.DataColumn("admissionOfficer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadmissionOfficer)
            Me.columnstudentNoCode = New Global.System.Data.DataColumn("studentNoCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentNoCode)
            Me.columnscholarshipCoordinator = New Global.System.Data.DataColumn("scholarshipCoordinator", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnscholarshipCoordinator)
            Me.columnaccountant = New Global.System.Data.DataColumn("accountant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccountant)
            Me.columnmainRegistrar = New Global.System.Data.DataColumn("mainRegistrar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmainRegistrar)
            Me.columnwebsite = New Global.System.Data.DataColumn("website", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwebsite)
            Me.columntelNo = New Global.System.Data.DataColumn("telNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntelNo)
            Me.columnmobileNo = New Global.System.Data.DataColumn("mobileNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmobileNo)
            Me.columnbranchCode = New Global.System.Data.DataColumn("branchCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbranchCode)
            Me.columnemailad = New Global.System.Data.DataColumn("emailad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemailad)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columnloginFormImage = New Global.System.Data.DataColumn("loginFormImage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnloginFormImage)
            Me.columnregistrarEmail = New Global.System.Data.DataColumn("registrarEmail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrarEmail)
            Me.columnschoolEmail = New Global.System.Data.DataColumn("schoolEmail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschoolEmail)
            Me.columnschoolLogo = New Global.System.Data.DataColumn("schoolLogo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschoolLogo)
            Me.columnVPAA = New Global.System.Data.DataColumn("VPAA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVPAA)
            Me.columnPropertyCustodian = New Global.System.Data.DataColumn("PropertyCustodian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropertyCustodian)
            Me.columnUnitsEarned = New Global.System.Data.DataColumn("UnitsEarned", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitsEarned)
            Me.columnreviewedBy = New Global.System.Data.DataColumn("reviewedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreviewedBy)
            Me.columnorNo = New Global.System.Data.DataColumn("orNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnorNo)
            Me.columnamountPaid = New Global.System.Data.DataColumn("amountPaid", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamountPaid)
            Me.columndatePaid = New Global.System.Data.DataColumn("datePaid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatePaid)
            Me.columnprocessedBy = New Global.System.Data.DataColumn("processedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprocessedBy)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid, Me.columnsettingsID1}, true))
            Me.columnid.AllowDBNull = false
            Me.columnsvNo.AllowDBNull = false
            Me.columnsvNo.MaxLength = 45
            Me.columnseriesNo.AllowDBNull = false
            Me.columnseriesNo.MaxLength = 45
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.MaxLength = 45
            Me.columnstudentName.AllowDBNull = false
            Me.columnstudentName.MaxLength = 100
            Me.columndegree.AllowDBNull = false
            Me.columndegree.MaxLength = 65
            Me.columndateAttended.AllowDBNull = false
            Me.columndateAttended.MaxLength = 45
            Me.columnyearLevel.AllowDBNull = false
            Me.columnyearLevel.MaxLength = 45
            Me.columngradDate.AllowDBNull = false
            Me.columngradDate.MaxLength = 45
            Me.columndateReleased.AllowDBNull = false
            Me.columndateReleased.MaxLength = 45
            Me.columnsettingsID.AllowDBNull = false
            Me.columnsettingsID1.AllowDBNull = false
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnRegistrar.AllowDBNull = false
            Me.columnRegistrar.MaxLength = 65
            Me.columnregistrarPosition.AllowDBNull = false
            Me.columnregistrarPosition.MaxLength = 45
            Me.columnclerk.AllowDBNull = false
            Me.columnclerk.MaxLength = 65
            Me.columnclerkPosition.AllowDBNull = false
            Me.columnclerkPosition.MaxLength = 45
            Me.columnadministrative.AllowDBNull = false
            Me.columnadministrative.MaxLength = 65
            Me.columnadministrativePosition.AllowDBNull = false
            Me.columnadministrativePosition.MaxLength = 45
            Me.columncashier.AllowDBNull = false
            Me.columncashier.MaxLength = 45
            Me.columncashierPosition.AllowDBNull = false
            Me.columncashierPosition.MaxLength = 45
            Me.columnadmissionOfficer.MaxLength = 65
            Me.columnstudentNoCode.AllowDBNull = false
            Me.columnstudentNoCode.MaxLength = 45
            Me.columnscholarshipCoordinator.AllowDBNull = false
            Me.columnscholarshipCoordinator.MaxLength = 45
            Me.columnaccountant.AllowDBNull = false
            Me.columnaccountant.MaxLength = 45
            Me.columnmainRegistrar.AllowDBNull = false
            Me.columnmainRegistrar.MaxLength = 150
            Me.columnwebsite.AllowDBNull = false
            Me.columnwebsite.MaxLength = 45
            Me.columntelNo.AllowDBNull = false
            Me.columntelNo.MaxLength = 45
            Me.columnmobileNo.AllowDBNull = false
            Me.columnmobileNo.MaxLength = 45
            Me.columnbranchCode.AllowDBNull = false
            Me.columnbranchCode.MaxLength = 45
            Me.columnemailad.AllowDBNull = false
            Me.columnemailad.MaxLength = 45
            Me.columnloginFormImage.AllowDBNull = false
            Me.columnloginFormImage.MaxLength = 500
            Me.columnregistrarEmail.AllowDBNull = false
            Me.columnregistrarEmail.MaxLength = 45
            Me.columnschoolEmail.AllowDBNull = false
            Me.columnschoolEmail.MaxLength = 45
            Me.columnVPAA.AllowDBNull = false
            Me.columnVPAA.MaxLength = 65
            Me.columnPropertyCustodian.AllowDBNull = false
            Me.columnPropertyCustodian.MaxLength = 65
            Me.columnreviewedBy.AllowDBNull = false
            Me.columnreviewedBy.MaxLength = 65
            Me.columnorNo.AllowDBNull = false
            Me.columnorNo.MaxLength = 45
            Me.columndatePaid.AllowDBNull = false
            Me.columndatePaid.MaxLength = 45
            Me.columnprocessedBy.AllowDBNull = false
            Me.columnprocessedBy.MaxLength = 65
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCAVDataSetRow() As CAVDataSetRow
            Return CType(Me.NewRow,CAVDataSetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CAVDataSetRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CAVDataSetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CAVDataSetRowChangedEvent) Is Nothing) Then
                RaiseEvent CAVDataSetRowChanged(Me, New CAVDataSetRowChangeEvent(CType(e.Row,CAVDataSetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CAVDataSetRowChangingEvent) Is Nothing) Then
                RaiseEvent CAVDataSetRowChanging(Me, New CAVDataSetRowChangeEvent(CType(e.Row,CAVDataSetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CAVDataSetRowDeletedEvent) Is Nothing) Then
                RaiseEvent CAVDataSetRowDeleted(Me, New CAVDataSetRowChangeEvent(CType(e.Row,CAVDataSetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CAVDataSetRowDeletingEvent) Is Nothing) Then
                RaiseEvent CAVDataSetRowDeleting(Me, New CAVDataSetRowChangeEvent(CType(e.Row,CAVDataSetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCAVDataSetRow(ByVal row As CAVDataSetRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Report3 = New Report3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CAVDataSetDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class newCORRow
        Inherits Global.System.Data.DataRow
        
        Private tablenewCOR As newCORDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablenewCOR = CType(Me.Table,newCORDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tablenewCOR.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tablenewCOR.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.StudentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentName' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Birthdate() As Date
            Get
                Return CType(Me(Me.tablenewCOR.BirthdateColumn),Date)
            End Get
            Set
                Me(Me.tablenewCOR.BirthdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tablenewCOR.SexColumn),String)
            End Get
            Set
                Me(Me.tablenewCOR.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sem() As String
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.SemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sem' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.SemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Return CType(Me(Me.tablenewCOR.CourseColumn),String)
            End Get
            Set
                Me(Me.tablenewCOR.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Major() As String
            Get
                Return CType(Me(Me.tablenewCOR.MajorColumn),String)
            End Get
            Set
                Me(Me.tablenewCOR.MajorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Return CType(Me(Me.tablenewCOR.YearLevelColumn),String)
            End Get
            Set
                Me(Me.tablenewCOR.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.SubjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectCode' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LecUnit() As String
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.LecUnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LecUnit' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.LecUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabUnit() As String
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.LabUnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabUnit' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.LabUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units() As Double
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.UnitsColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.UnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabTime() As String
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.LabTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabTime' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.LabTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchedTime() As String
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.SchedTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SchedTime' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.SchedTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Room() As String
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.RoomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Room' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.RoomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Instructor() As String
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.InstructorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Instructor' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.InstructorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schedType() As String
            Get
                Return CType(Me(Me.tablenewCOR.schedTypeColumn),String)
            End Get
            Set
                Me(Me.tablenewCOR.schedTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablenewCOR.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablenewCOR.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tablenewCOR.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tablenewCOR.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Registrar() As String
            Get
                Return CType(Me(Me.tablenewCOR.RegistrarColumn),String)
            End Get
            Set
                Me(Me.tablenewCOR.RegistrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrarPosition() As String
            Get
                Return CType(Me(Me.tablenewCOR.registrarPositionColumn),String)
            End Get
            Set
                Me(Me.tablenewCOR.registrarPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashier() As String
            Get
                Return CType(Me(Me.tablenewCOR.cashierColumn),String)
            End Get
            Set
                Me(Me.tablenewCOR.cashierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashierPosition() As String
            Get
                Return CType(Me(Me.tablenewCOR.cashierPositionColumn),String)
            End Get
            Set
                Me(Me.tablenewCOR.cashierPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property scholarshipCoordinator() As String
            Get
                Return CType(Me(Me.tablenewCOR.scholarshipCoordinatorColumn),String)
            End Get
            Set
                Me(Me.tablenewCOR.scholarshipCoordinatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tablenewCOR.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tablenewCOR.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tablenewCOR.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tablenewCOR.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PresSign() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.PresSignColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PresSign' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.PresSignColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property footer() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.footerColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'footer' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.footerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property regSign() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablenewCOR.regSignColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'regSign' in table 'newCOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenewCOR.regSignColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNameNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.StudentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNameNull()
            Me(Me.tablenewCOR.StudentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.SemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemNull()
            Me(Me.tablenewCOR.SemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tablenewCOR.SYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectCodeNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.SubjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectCodeNull()
            Me(Me.tablenewCOR.SubjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tablenewCOR.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tablenewCOR.SectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLecUnitNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.LecUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLecUnitNull()
            Me(Me.tablenewCOR.LecUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabUnitNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.LabUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabUnitNull()
            Me(Me.tablenewCOR.LabUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitsNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.UnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitsNull()
            Me(Me.tablenewCOR.UnitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabTimeNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.LabTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabTimeNull()
            Me(Me.tablenewCOR.LabTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSchedTimeNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.SchedTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSchedTimeNull()
            Me(Me.tablenewCOR.SchedTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRoomNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.RoomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRoomNull()
            Me(Me.tablenewCOR.RoomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInstructorNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.InstructorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInstructorNull()
            Me(Me.tablenewCOR.InstructorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tablenewCOR.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPresSignNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.PresSignColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPresSignNull()
            Me(Me.tablenewCOR.PresSignColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfooterNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.footerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfooterNull()
            Me(Me.tablenewCOR.footerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsregSignNull() As Boolean
            Return Me.IsNull(Me.tablenewCOR.regSignColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetregSignNull()
            Me(Me.tablenewCOR.regSignColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class profile_semesterstudeRow
        Inherits Global.System.Data.DataRow
        
        Private tableprofile_semesterstude As profile_semesterstudeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableprofile_semesterstude = CType(Me.Table,profile_semesterstudeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.SexColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CivilStatus() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.CivilStatusColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.CivilStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthPlace() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.BirthPlaceColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.BirthPlaceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Religion() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.ReligionColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.ReligionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property email() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.emailColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property contactNo() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.contactNoColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.contactNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property working() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.workingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'working' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.workingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property occupation() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.occupationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'occupation' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.occupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property salary() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.salaryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'salary' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.salaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property employer() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.employerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'employer' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.employerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property employerAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.employerAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'employerAddress' in table 'profile_semesterstude' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.employerAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property birthDate() As Date
            Get
                Return CType(Me(Me.tableprofile_semesterstude.birthDateColumn),Date)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.birthDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property admissionDate() As Date
            Get
                Return CType(Me(Me.tableprofile_semesterstude.admissionDateColumn),Date)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.admissionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property graduationDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.graduationDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'graduationDate' in table 'profile_semesterstude' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.graduationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property guardian() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.guardianColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.guardianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property guardianRelationship() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.guardianRelationshipColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.guardianRelationshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property guardianContact() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.guardianContactColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.guardianContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property guardianAddress() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.guardianAddressColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.guardianAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property spouse() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.spouseColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.spouseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property spouseRelationship() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.spouseRelationshipColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.spouseRelationshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property spouseContact() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.spouseContactColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.spouseContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property children() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.childrenColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.childrenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property spouseIncome() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.spouseIncomeColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.spouseIncomeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imagePath() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.imagePathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'imagePath' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.imagePathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property course() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.courseColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.courseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearLevel() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.yearLevelColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.yearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property father() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.fatherColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.fatherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fOccupation() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.fOccupationColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.fOccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fatherAddress() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.fatherAddressColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.fatherAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mother() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.motherColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.motherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mOccupation() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.mOccupationColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.mOccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property motherAddress() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.motherAddressColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.motherAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property siblings() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.siblingsColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.siblingsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property birthOrder() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.birthOrderColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.birthOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property age() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.ageColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.ageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property title() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.titleColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.titleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pronoun() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.pronounColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.pronounColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pronoun2() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.pronoun2Column),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.pronoun2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pronoun3() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.pronoun3Column),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.pronoun3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property scholarship() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.scholarshipColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.scholarshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ethnicity() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.ethnicityColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.ethnicityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fourPs() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.fourPsColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.fourPsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property seniorCitizen() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.seniorCitizenColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.seniorCitizenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property als() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.alsColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.alsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property disability() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.disabilityColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.disabilityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property parentsMonthly() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.parentsMonthlyColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.parentsMonthlyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property province() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.provinceColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.provinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property city() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.cityColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.cityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property brgy() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.brgyColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.brgyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sitio() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.sitioColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.sitioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property provincePresent() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.provincePresentColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.provincePresentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cityPresent() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.cityPresentColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.cityPresentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property brgyPresent() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.brgyPresentColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.brgyPresentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sitioPresent() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.sitioPresentColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.sitioPresentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property elementary() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.elementaryColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.elementaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property elementaryAddress() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.elementaryAddressColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.elementaryAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property elemGraduated() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.elemGraduatedColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.elemGraduatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property elemMerits() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.elemMeritsColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.elemMeritsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property secondary() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.secondaryColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.secondaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property secondaryAddress() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.secondaryAddressColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.secondaryAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property secondaryGraduated() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.secondaryGraduatedColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.secondaryGraduatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property secondaryMerits() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.secondaryMeritsColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.secondaryMeritsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vocational() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.vocationalColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.vocationalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vocationaladdress() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.vocationaladdressColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.vocationaladdressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vocationalGraduated() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.vocationalGraduatedColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.vocationalGraduatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vocationalCourse() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.vocationalCourseColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.vocationalCourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ncLevel() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.ncLevelColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.ncLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transfereeSchool() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.transfereeSchoolColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.transfereeSchoolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transfereeAddress() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.transfereeAddressColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.transfereeAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transfereeCourse() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.transfereeCourseColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.transfereeCourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transfereeGraduated() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.transfereeGraduatedColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.transfereeGraduatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property skills() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.skillsColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.skillsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property settingsID() As UInteger
            Get
                Return CType(Me(Me.tableprofile_semesterstude.settingsIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.settingsIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property applicationNo() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.applicationNoColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.applicationNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testCenter() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.testCenterColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.testCenterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testDate() As Date
            Get
                Return CType(Me(Me.tableprofile_semesterstude.testDateColumn),Date)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.testDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property encoder() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.encoderColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.encoderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semstudentid() As UInteger
            Get
                Return CType(Me(Me.tableprofile_semesterstude.semstudentidColumn),UInteger)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.semstudentidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber1() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.StudentNumber1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentNumber1' in table 'profile_semesterstude' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.StudentNumber1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FName() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.FNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FName' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.FNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MName() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.MNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MName' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.MNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LName() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.LNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LName' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.LNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course1() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.Course1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course1' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.Course1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel1() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.YearLevel1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel1' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.YearLevel1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Term() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.TermColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Term' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.TermColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudeStatus() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.StudeStatusColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.StudeStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Scholarship1() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.Scholarship1Column),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.Scholarship1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DurationFrom() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.DurationFromColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.DurationFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DurationTo() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.DurationToColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.DurationToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssessmentDate() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.AssessmentDateColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.AssessmentDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssessmentResult() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.AssessmentResultColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.AssessmentResultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PayingStatus() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.PayingStatusColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.PayingStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrantAmount() As Double
            Get
                Return CType(Me(Me.tableprofile_semesterstude.GrantAmountColumn),Double)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.GrantAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevelStat() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.YearLevelStatColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.YearLevelStatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Major() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.MajorColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.MajorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property settingsID1() As UInteger
            Get
                Return CType(Me(Me.tableprofile_semesterstude.settingsID1Column),UInteger)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.settingsID1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property enroledDate() As Date
            Get
                Return CType(Me(Me.tableprofile_semesterstude.enroledDateColumn),Date)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.enroledDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property crossEnrollee() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.crossEnrolleeColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.crossEnrolleeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property classSession() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.classSessionColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.classSessionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prevGPA() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.prevGPAColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.prevGPAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property settingsID2() As UInteger
            Get
                Return CType(Me(Me.tableprofile_semesterstude.settingsID2Column),UInteger)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.settingsID2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Registrar() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.RegistrarColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.RegistrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrarPosition() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.registrarPositionColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.registrarPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clerk() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.clerkColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.clerkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clerkPosition() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.clerkPositionColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.clerkPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property administrative() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.administrativeColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.administrativeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property administrativePosition() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.administrativePositionColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.administrativePositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashier() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.cashierColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.cashierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashierPosition() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.cashierPositionColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.cashierPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property admissionOfficer() As String
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.admissionOfficerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'admissionOfficer' in table 'profile_semesterstude' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.admissionOfficerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentNoCode() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.studentNoCodeColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.studentNoCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property admissionSem() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.admissionSemColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.admissionSemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property admissionSY() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.admissionSYColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.admissionSYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property admissionBasis() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.admissionBasisColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.admissionBasisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lastAttended() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.lastAttendedColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.lastAttendedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lastSchool() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.lastSchoolColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.lastSchoolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lastSchoolDate() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.lastSchoolDateColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.lastSchoolDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property scholarshipCoordinator() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.scholarshipCoordinatorColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.scholarshipCoordinatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property accountant() As String
            Get
                Return CType(Me(Me.tableprofile_semesterstude.accountantColumn),String)
            End Get
            Set
                Me(Me.tableprofile_semesterstude.accountantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schoolLogo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.schoolLogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'schoolLogo' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.schoolLogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableprofile_semesterstude.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'profile_semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprofile_semesterstude.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableprofile_semesterstude.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableprofile_semesterstude.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableprofile_semesterstude.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsworkingNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.workingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetworkingNull()
            Me(Me.tableprofile_semesterstude.workingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsoccupationNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.occupationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetoccupationNull()
            Me(Me.tableprofile_semesterstude.occupationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssalaryNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.salaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsalaryNull()
            Me(Me.tableprofile_semesterstude.salaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemployerNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.employerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemployerNull()
            Me(Me.tableprofile_semesterstude.employerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemployerAddressNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.employerAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemployerAddressNull()
            Me(Me.tableprofile_semesterstude.employerAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgraduationDateNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.graduationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgraduationDateNull()
            Me(Me.tableprofile_semesterstude.graduationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsimagePathNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.imagePathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetimagePathNull()
            Me(Me.tableprofile_semesterstude.imagePathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNumber1Null() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.StudentNumber1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNumber1Null()
            Me(Me.tableprofile_semesterstude.StudentNumber1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFNameNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.FNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFNameNull()
            Me(Me.tableprofile_semesterstude.FNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMNameNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.MNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMNameNull()
            Me(Me.tableprofile_semesterstude.MNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLNameNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.LNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLNameNull()
            Me(Me.tableprofile_semesterstude.LNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourse1Null() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.Course1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourse1Null()
            Me(Me.tableprofile_semesterstude.Course1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevel1Null() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.YearLevel1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevel1Null()
            Me(Me.tableprofile_semesterstude.YearLevel1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableprofile_semesterstude.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tableprofile_semesterstude.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tableprofile_semesterstude.SYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTermNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.TermColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTermNull()
            Me(Me.tableprofile_semesterstude.TermColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tableprofile_semesterstude.SectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsadmissionOfficerNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.admissionOfficerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetadmissionOfficerNull()
            Me(Me.tableprofile_semesterstude.admissionOfficerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsschoolLogoNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.schoolLogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetschoolLogoNull()
            Me(Me.tableprofile_semesterstude.schoolLogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableprofile_semesterstude.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableprofile_semesterstude.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class billingStatementRow
        Inherits Global.System.Data.DataRow
        
        Private tablebillingStatement As billingStatementDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablebillingStatement = CType(Me.Table,billingStatementDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tablebillingStatement.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tablebillingStatement.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tablebillingStatement.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'billingStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebillingStatement.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tablebillingStatement.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'billingStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebillingStatement.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MI() As String
            Get
                Try 
                    Return CType(Me(Me.tablebillingStatement.MIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MI' in table 'billingStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebillingStatement.MIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tablebillingStatement.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'billingStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebillingStatement.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property email() As String
            Get
                Return CType(Me(Me.tablebillingStatement.emailColumn),String)
            End Get
            Set
                Me(Me.tablebillingStatement.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property contactNo() As String
            Get
                Return CType(Me(Me.tablebillingStatement.contactNoColumn),String)
            End Get
            Set
                Me(Me.tablebillingStatement.contactNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tablebillingStatement.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'billingStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebillingStatement.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Major() As String
            Get
                Return CType(Me(Me.tablebillingStatement.MajorColumn),String)
            End Get
            Set
                Me(Me.tablebillingStatement.MajorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tablebillingStatement.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'billingStatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebillingStatement.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Scholarship() As String
            Get
                Return CType(Me(Me.tablebillingStatement.ScholarshipColumn),String)
            End Get
            Set
                Me(Me.tablebillingStatement.ScholarshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrantAmount() As Double
            Get
                Return CType(Me(Me.tablebillingStatement.GrantAmountColumn),Double)
            End Get
            Set
                Me(Me.tablebillingStatement.GrantAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcctTotal() As Double
            Get
                Return CType(Me(Me.tablebillingStatement.AcctTotalColumn),Double)
            End Get
            Set
                Me(Me.tablebillingStatement.AcctTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sem() As String
            Get
                Return CType(Me(Me.tablebillingStatement.SemColumn),String)
            End Get
            Set
                Me(Me.tablebillingStatement.SemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Return CType(Me(Me.tablebillingStatement.SYColumn),String)
            End Get
            Set
                Me(Me.tablebillingStatement.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablebillingStatement.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablebillingStatement.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tablebillingStatement.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tablebillingStatement.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tablebillingStatement.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tablebillingStatement.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tablebillingStatement.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tablebillingStatement.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property scholarshipCoordinator() As String
            Get
                Return CType(Me(Me.tablebillingStatement.scholarshipCoordinatorColumn),String)
            End Get
            Set
                Me(Me.tablebillingStatement.scholarshipCoordinatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property accountant() As String
            Get
                Return CType(Me(Me.tablebillingStatement.accountantColumn),String)
            End Get
            Set
                Me(Me.tablebillingStatement.accountantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Registrar() As String
            Get
                Return CType(Me(Me.tablebillingStatement.RegistrarColumn),String)
            End Get
            Set
                Me(Me.tablebillingStatement.RegistrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property totalUnits() As Double
            Get
                Return CType(Me(Me.tablebillingStatement.totalUnitsColumn),Double)
            End Get
            Set
                Me(Me.tablebillingStatement.totalUnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tablebillingStatement.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tablebillingStatement.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tablebillingStatement.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tablebillingStatement.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMINull() As Boolean
            Return Me.IsNull(Me.tablebillingStatement.MIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMINull()
            Me(Me.tablebillingStatement.MIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tablebillingStatement.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tablebillingStatement.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tablebillingStatement.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tablebillingStatement.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tablebillingStatement.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tablebillingStatement.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class statisticalReportRow
        Inherits Global.System.Data.DataRow
        
        Private tablestatisticalReport As statisticalReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablestatisticalReport = CType(Me.Table,statisticalReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tablestatisticalReport.SexColumn),String)
            End Get
            Set
                Me(Me.tablestatisticalReport.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tablestatisticalReport.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'statisticalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestatisticalReport.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Major() As String
            Get
                Return CType(Me(Me.tablestatisticalReport.MajorColumn),String)
            End Get
            Set
                Me(Me.tablestatisticalReport.MajorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusCount() As Long
            Get
                Return CType(Me(Me.tablestatisticalReport.StatusCountColumn),Long)
            End Get
            Set
                Me(Me.tablestatisticalReport.StatusCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tablestatisticalReport.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'statisticalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestatisticalReport.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tablestatisticalReport.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'statisticalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestatisticalReport.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnrolledCount() As Long
            Get
                Return CType(Me(Me.tablestatisticalReport.EnrolledCountColumn),Long)
            End Get
            Set
                Me(Me.tablestatisticalReport.EnrolledCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tablestatisticalReport.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'statisticalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestatisticalReport.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tablestatisticalReport.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'statisticalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestatisticalReport.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablestatisticalReport.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablestatisticalReport.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tablestatisticalReport.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tablestatisticalReport.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tablestatisticalReport.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tablestatisticalReport.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tablestatisticalReport.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tablestatisticalReport.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Registrar() As String
            Get
                Return CType(Me(Me.tablestatisticalReport.RegistrarColumn),String)
            End Get
            Set
                Me(Me.tablestatisticalReport.RegistrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrarPosition() As String
            Get
                Return CType(Me(Me.tablestatisticalReport.registrarPositionColumn),String)
            End Get
            Set
                Me(Me.tablestatisticalReport.registrarPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablestatisticalReport.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'statisticalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestatisticalReport.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tablestatisticalReport.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tablestatisticalReport.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tablestatisticalReport.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tablestatisticalReport.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tablestatisticalReport.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tablestatisticalReport.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tablestatisticalReport.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tablestatisticalReport.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tablestatisticalReport.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tablestatisticalReport.SYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tablestatisticalReport.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tablestatisticalReport.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class paymentsaccountsRow
        Inherits Global.System.Data.DataRow
        
        Private tablepaymentsaccounts As paymentsaccountsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepaymentsaccounts = CType(Me.Table,paymentsaccountsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As UInteger
            Get
                Return CType(Me(Me.tablepaymentsaccounts.IDColumn),UInteger)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.FirstNameColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.MiddleNameColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.LastNameColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentsaccounts.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'paymentsaccounts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentsaccounts.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PDate() As Date
            Get
                Return CType(Me(Me.tablepaymentsaccounts.PDateColumn),Date)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.PDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORNumber() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.ORNumberColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.ORNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Double
            Get
                Return CType(Me(Me.tablepaymentsaccounts.AmountColumn),Double)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentsaccounts.descriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'description' in table 'paymentsaccounts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentsaccounts.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentType() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.PaymentTypeColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.PaymentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckNumber() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.CheckNumberColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.CheckNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sem() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.SemColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.SemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.SYColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CollectionSource() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.CollectionSourceColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.CollectionSourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bank() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.BankColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.BankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORStatus() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.ORStatusColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.ORStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cashier() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.CashierColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.CashierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tablepaymentsaccounts.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tablepaymentsaccounts.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tablepaymentsaccounts.descriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescriptionNull()
            Me(Me.tablepaymentsaccounts.descriptionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class accountSummaryRow
        Inherits Global.System.Data.DataRow
        
        Private tableaccountSummary As accountSummaryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableaccountSummary = CType(Me.Table,accountSummaryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableaccountSummary.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableaccountSummary.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tableaccountSummary.SexColumn),String)
            End Get
            Set
                Me(Me.tableaccountSummary.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Return CType(Me(Me.tableaccountSummary.CourseColumn),String)
            End Get
            Set
                Me(Me.tableaccountSummary.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Return CType(Me(Me.tableaccountSummary.YearLevelColumn),String)
            End Get
            Set
                Me(Me.tableaccountSummary.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalLec() As Double
            Get
                Return CType(Me(Me.tableaccountSummary.TotalLecColumn),Double)
            End Get
            Set
                Me(Me.tableaccountSummary.TotalLecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FeesDesc() As String
            Get
                Return CType(Me(Me.tableaccountSummary.FeesDescColumn),String)
            End Get
            Set
                Me(Me.tableaccountSummary.FeesDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FeesAmount() As Double
            Get
                Return CType(Me(Me.tableaccountSummary.FeesAmountColumn),Double)
            End Get
            Set
                Me(Me.tableaccountSummary.FeesAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property feesType() As String
            Get
                Try 
                    Return CType(Me(Me.tableaccountSummary.feesTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'feesType' in table 'accountSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaccountSummary.feesTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sem() As String
            Get
                Return CType(Me(Me.tableaccountSummary.SemColumn),String)
            End Get
            Set
                Me(Me.tableaccountSummary.SemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Return CType(Me(Me.tableaccountSummary.SYColumn),String)
            End Get
            Set
                Me(Me.tableaccountSummary.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableaccountSummary.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableaccountSummary.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableaccountSummary.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableaccountSummary.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashier() As String
            Get
                Return CType(Me(Me.tableaccountSummary.cashierColumn),String)
            End Get
            Set
                Me(Me.tableaccountSummary.cashierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashierPosition() As String
            Get
                Return CType(Me(Me.tableaccountSummary.cashierPositionColumn),String)
            End Get
            Set
                Me(Me.tableaccountSummary.cashierPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableaccountSummary.StudentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentName' in table 'accountSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaccountSummary.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcctTotal() As Double
            Get
                Return CType(Me(Me.tableaccountSummary.AcctTotalColumn),Double)
            End Get
            Set
                Me(Me.tableaccountSummary.AcctTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuitionDay() As Double
            Get
                Return CType(Me(Me.tableaccountSummary.tuitionDayColumn),Double)
            End Get
            Set
                Me(Me.tableaccountSummary.tuitionDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property specialTuition() As Double
            Get
                Return CType(Me(Me.tableaccountSummary.specialTuitionColumn),Double)
            End Get
            Set
                Me(Me.tableaccountSummary.specialTuitionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableaccountSummary.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'accountSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaccountSummary.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfeesTypeNull() As Boolean
            Return Me.IsNull(Me.tableaccountSummary.feesTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfeesTypeNull()
            Me(Me.tableaccountSummary.feesTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNameNull() As Boolean
            Return Me.IsNull(Me.tableaccountSummary.StudentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNameNull()
            Me(Me.tableaccountSummary.StudentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableaccountSummary.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableaccountSummary.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrolmentReportV2Row
        Inherits Global.System.Data.DataRow
        
        Private tableEnrolmentReportV2 As EnrolmentReportV2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrolmentReportV2 = CType(Me.Table,EnrolmentReportV2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableEnrolmentReportV2.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableEnrolmentReportV2.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrolmentReportV2.StudentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentName' in table 'EnrolmentReportV2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrolmentReportV2.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tableEnrolmentReportV2.SexColumn),String)
            End Get
            Set
                Me(Me.tableEnrolmentReportV2.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrolmentReportV2.SubjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectCode' in table 'EnrolmentReportV2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrolmentReportV2.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEnrolmentReportV2.UnitsColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units' in table 'EnrolmentReportV2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrolmentReportV2.UnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sem() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrolmentReportV2.SemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sem' in table 'EnrolmentReportV2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrolmentReportV2.SemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrolmentReportV2.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'EnrolmentReportV2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrolmentReportV2.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableEnrolmentReportV2.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableEnrolmentReportV2.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableEnrolmentReportV2.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableEnrolmentReportV2.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrar() As String
            Get
                Return CType(Me(Me.tableEnrolmentReportV2.registrarColumn),String)
            End Get
            Set
                Me(Me.tableEnrolmentReportV2.registrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrarPosition() As String
            Get
                Return CType(Me(Me.tableEnrolmentReportV2.registrarPositionColumn),String)
            End Get
            Set
                Me(Me.tableEnrolmentReportV2.registrarPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNameNull() As Boolean
            Return Me.IsNull(Me.tableEnrolmentReportV2.StudentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNameNull()
            Me(Me.tableEnrolmentReportV2.StudentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableEnrolmentReportV2.SubjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectCodeNull()
            Me(Me.tableEnrolmentReportV2.SubjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitsNull() As Boolean
            Return Me.IsNull(Me.tableEnrolmentReportV2.UnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitsNull()
            Me(Me.tableEnrolmentReportV2.UnitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemNull() As Boolean
            Return Me.IsNull(Me.tableEnrolmentReportV2.SemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemNull()
            Me(Me.tableEnrolmentReportV2.SemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tableEnrolmentReportV2.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tableEnrolmentReportV2.SYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TORNewRow
        Inherits Global.System.Data.DataRow
        
        Private tableTORNew As TORNewDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTORNew = CType(Me.Table,TORNewDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableTORNew.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tableTORNew.SexColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property civilStatus() As String
            Get
                Return CType(Me(Me.tableTORNew.civilStatusColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.civilStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property birthDate() As Date
            Get
                Return CType(Me(Me.tableTORNew.birthDateColumn),Date)
            End Get
            Set
                Me(Me.tableTORNew.birthDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthPlace() As String
            Get
                Return CType(Me(Me.tableTORNew.BirthPlaceColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.BirthPlaceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property father() As String
            Get
                Return CType(Me(Me.tableTORNew.fatherColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.fatherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mother() As String
            Get
                Return CType(Me(Me.tableTORNew.motherColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.motherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property address() As String
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.addressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'address' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.addressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lastSchool() As String
            Get
                Return CType(Me(Me.tableTORNew.lastSchoolColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.lastSchoolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lastSchoolDate() As String
            Get
                Return CType(Me(Me.tableTORNew.lastSchoolDateColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.lastSchoolDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property admissionDate() As Date
            Get
                Return CType(Me(Me.tableTORNew.admissionDateColumn),Date)
            End Get
            Set
                Me(Me.tableTORNew.admissionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property admissionSem() As String
            Get
                Return CType(Me(Me.tableTORNew.admissionSemColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.admissionSemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property admissionSY() As String
            Get
                Return CType(Me(Me.tableTORNew.admissionSYColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.admissionSYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property admissionBasis() As String
            Get
                Return CType(Me(Me.tableTORNew.admissionBasisColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.admissionBasisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lastAttended() As String
            Get
                Return CType(Me(Me.tableTORNew.lastAttendedColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.lastAttendedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Major() As String
            Get
                Return CType(Me(Me.tableTORNew.MajorColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.MajorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Return CType(Me(Me.tableTORNew.SubjectCodeColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tableTORNew.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Final() As String
            Get
                Return CType(Me(Me.tableTORNew.FinalColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.FinalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Complied() As String
            Get
                Return CType(Me(Me.tableTORNew.CompliedColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.CompliedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Credits() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.CreditsColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Credits' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.CreditsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableTORNew.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableTORNew.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrar() As String
            Get
                Return CType(Me(Me.tableTORNew.registrarColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.registrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrarPosition() As String
            Get
                Return CType(Me(Me.tableTORNew.registrarPositionColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.registrarPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property profImage() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.profImageColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'profImage' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.profImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property honors() As String
            Get
                Return CType(Me(Me.tableTORNew.honorsColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.honorsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rotcSerial() As String
            Get
                Return CType(Me(Me.tableTORNew.rotcSerialColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.rotcSerialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cwtsSerial() As String
            Get
                Return CType(Me(Me.tableTORNew.cwtsSerialColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.cwtsSerialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property graduationDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.graduationDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'graduationDate' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.graduationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transfereeSchool() As String
            Get
                Return CType(Me(Me.tableTORNew.transfereeSchoolColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.transfereeSchoolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transfereeAddress() As String
            Get
                Return CType(Me(Me.tableTORNew.transfereeAddressColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.transfereeAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property website() As String
            Get
                Return CType(Me(Me.tableTORNew.websiteColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.websiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property emailad() As String
            Get
                Return CType(Me(Me.tableTORNew.emailadColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.emailadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property telNo() As String
            Get
                Return CType(Me(Me.tableTORNew.telNoColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.telNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property website1() As String
            Get
                Return CType(Me(Me.tableTORNew.website1Column),String)
            End Get
            Set
                Me(Me.tableTORNew.website1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrarEmail() As String
            Get
                Return CType(Me(Me.tableTORNew.registrarEmailColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.registrarEmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schoolLogo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTORNew.schoolLogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'schoolLogo' in table 'TORNew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTORNew.schoolLogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ltsSerialNo() As String
            Get
                Return CType(Me(Me.tableTORNew.ltsSerialNoColumn),String)
            End Get
            Set
                Me(Me.tableTORNew.ltsSerialNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableTORNew.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableTORNew.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableTORNew.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.addressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetaddressNull()
            Me(Me.tableTORNew.addressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tableTORNew.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditsNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.CreditsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditsNull()
            Me(Me.tableTORNew.CreditsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tableTORNew.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprofImageNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.profImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprofImageNull()
            Me(Me.tableTORNew.profImageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgraduationDateNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.graduationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgraduationDateNull()
            Me(Me.tableTORNew.graduationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsschoolLogoNull() As Boolean
            Return Me.IsNull(Me.tableTORNew.schoolLogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetschoolLogoNull()
            Me(Me.tableTORNew.schoolLogoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DTRRow
        Inherits Global.System.Data.DataRow
        
        Private tableDTR As DTRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDTR = CType(Me.Table,DTRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Return CType(Me(Me.tableDTR.FirstNameColumn),String)
            End Get
            Set
                Me(Me.tableDTR.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDTR.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'DTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDTR.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Return CType(Me(Me.tableDTR.LastNameColumn),String)
            End Get
            Set
                Me(Me.tableDTR.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property logDate() As Date
            Get
                Return CType(Me(Me.tableDTR.logDateColumn),Date)
            End Get
            Set
                Me(Me.tableDTR.logDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property logTime() As String
            Get
                Return CType(Me(Me.tableDTR.logTimeColumn),String)
            End Get
            Set
                Me(Me.tableDTR.logTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MonthName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDTR.MonthNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MonthName' in table 'DTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDTR.MonthNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearName() As Long
            Get
                Try 
                    Return CType(Me(Me.tableDTR.YearNameColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearName' in table 'DTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDTR.YearNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schoolHead() As String
            Get
                Return CType(Me(Me.tableDTR.schoolHeadColumn),String)
            End Get
            Set
                Me(Me.tableDTR.schoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tableDTR.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tableDTR.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableDTR.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableDTR.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonthNameNull() As Boolean
            Return Me.IsNull(Me.tableDTR.MonthNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonthNameNull()
            Me(Me.tableDTR.MonthNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNameNull() As Boolean
            Return Me.IsNull(Me.tableDTR.YearNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNameNull()
            Me(Me.tableDTR.YearNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COR2Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOR2 As COR2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOR2 = CType(Me.Table,COR2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableCOR2.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableCOR2.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.StudentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentName' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Birthdate() As Date
            Get
                Return CType(Me(Me.tableCOR2.BirthdateColumn),Date)
            End Get
            Set
                Me(Me.tableCOR2.BirthdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tableCOR2.SexColumn),String)
            End Get
            Set
                Me(Me.tableCOR2.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sem() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.SemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sem' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.SemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Return CType(Me(Me.tableCOR2.CourseColumn),String)
            End Get
            Set
                Me(Me.tableCOR2.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Major() As String
            Get
                Return CType(Me(Me.tableCOR2.MajorColumn),String)
            End Get
            Set
                Me(Me.tableCOR2.MajorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Return CType(Me(Me.tableCOR2.YearLevelColumn),String)
            End Get
            Set
                Me(Me.tableCOR2.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.SubjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectCode' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LecUnit() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.LecUnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LecUnit' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.LecUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabUnit() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.LabUnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabUnit' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.LabUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.UnitsColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.UnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabTime() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.LabTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabTime' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.LabTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchedTime() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.SchedTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SchedTime' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.SchedTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Room() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.RoomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Room' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.RoomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Instructor() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.InstructorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Instructor' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.InstructorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schedType() As String
            Get
                Return CType(Me(Me.tableCOR2.schedTypeColumn),String)
            End Get
            Set
                Me(Me.tableCOR2.schedTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableCOR2.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableCOR2.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableCOR2.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableCOR2.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Registrar() As String
            Get
                Return CType(Me(Me.tableCOR2.RegistrarColumn),String)
            End Get
            Set
                Me(Me.tableCOR2.RegistrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrarPosition() As String
            Get
                Return CType(Me(Me.tableCOR2.registrarPositionColumn),String)
            End Get
            Set
                Me(Me.tableCOR2.registrarPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashier() As String
            Get
                Return CType(Me(Me.tableCOR2.cashierColumn),String)
            End Get
            Set
                Me(Me.tableCOR2.cashierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashierPosition() As String
            Get
                Return CType(Me(Me.tableCOR2.cashierPositionColumn),String)
            End Get
            Set
                Me(Me.tableCOR2.cashierPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property scholarshipCoordinator() As String
            Get
                Return CType(Me(Me.tableCOR2.scholarshipCoordinatorColumn),String)
            End Get
            Set
                Me(Me.tableCOR2.scholarshipCoordinatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tableCOR2.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tableCOR2.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tableCOR2.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tableCOR2.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PresSign() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.PresSignColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PresSign' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.PresSignColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property footer() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.footerColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'footer' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.footerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Term() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.TermColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Term' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.TermColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property regSign() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableCOR2.regSignColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'regSign' in table 'COR2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOR2.regSignColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNameNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.StudentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNameNull()
            Me(Me.tableCOR2.StudentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.SemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemNull()
            Me(Me.tableCOR2.SemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tableCOR2.SYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.SubjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectCodeNull()
            Me(Me.tableCOR2.SubjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableCOR2.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tableCOR2.SectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLecUnitNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.LecUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLecUnitNull()
            Me(Me.tableCOR2.LecUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabUnitNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.LabUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabUnitNull()
            Me(Me.tableCOR2.LabUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitsNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.UnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitsNull()
            Me(Me.tableCOR2.UnitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabTimeNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.LabTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabTimeNull()
            Me(Me.tableCOR2.LabTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSchedTimeNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.SchedTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSchedTimeNull()
            Me(Me.tableCOR2.SchedTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRoomNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.RoomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRoomNull()
            Me(Me.tableCOR2.RoomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInstructorNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.InstructorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInstructorNull()
            Me(Me.tableCOR2.InstructorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableCOR2.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPresSignNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.PresSignColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPresSignNull()
            Me(Me.tableCOR2.PresSignColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfooterNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.footerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfooterNull()
            Me(Me.tableCOR2.footerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTermNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.TermColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTermNull()
            Me(Me.tableCOR2.TermColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsregSignNull() As Boolean
            Return Me.IsNull(Me.tableCOR2.regSignColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetregSignNull()
            Me(Me.tableCOR2.regSignColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class scholarsListingv2Row
        Inherits Global.System.Data.DataRow
        
        Private tablescholarsListingv2 As scholarsListingv2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablescholarsListingv2 = CType(Me.Table,scholarsListingv2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tablescholarsListingv2.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tablescholarsListingv2.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lrn() As String
            Get
                Return CType(Me(Me.tablescholarsListingv2.lrnColumn),String)
            End Get
            Set
                Me(Me.tablescholarsListingv2.lrnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tablescholarsListingv2.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'scholarsListingv2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarsListingv2.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tablescholarsListingv2.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'scholarsListingv2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarsListingv2.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MI() As String
            Get
                Try 
                    Return CType(Me(Me.tablescholarsListingv2.MIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MI' in table 'scholarsListingv2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarsListingv2.MIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tablescholarsListingv2.SexColumn),String)
            End Get
            Set
                Me(Me.tablescholarsListingv2.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDate() As Date
            Get
                Return CType(Me(Me.tablescholarsListingv2.BirthDateColumn),Date)
            End Get
            Set
                Me(Me.tablescholarsListingv2.BirthDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tablescholarsListingv2.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'scholarsListingv2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarsListingv2.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tablescholarsListingv2.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'scholarsListingv2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarsListingv2.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Scholarship() As String
            Get
                Return CType(Me(Me.tablescholarsListingv2.ScholarshipColumn),String)
            End Get
            Set
                Me(Me.tablescholarsListingv2.ScholarshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prevGPA() As String
            Get
                Return CType(Me(Me.tablescholarsListingv2.prevGPAColumn),String)
            End Get
            Set
                Me(Me.tablescholarsListingv2.prevGPAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tablescholarsListingv2.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'scholarsListingv2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarsListingv2.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tablescholarsListingv2.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'scholarsListingv2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarsListingv2.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablescholarsListingv2.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablescholarsListingv2.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tablescholarsListingv2.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tablescholarsListingv2.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablescholarsListingv2.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'scholarsListingv2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarsListingv2.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tablescholarsListingv2.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tablescholarsListingv2.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tablescholarsListingv2.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tablescholarsListingv2.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMINull() As Boolean
            Return Me.IsNull(Me.tablescholarsListingv2.MIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMINull()
            Me(Me.tablescholarsListingv2.MIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tablescholarsListingv2.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tablescholarsListingv2.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tablescholarsListingv2.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tablescholarsListingv2.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tablescholarsListingv2.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tablescholarsListingv2.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tablescholarsListingv2.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tablescholarsListingv2.SYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tablescholarsListingv2.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tablescholarsListingv2.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudentVerificationRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudentVerification As StudentVerificationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudentVerification = CType(Me.Table,StudentVerificationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As UInteger
            Get
                Return CType(Me(Me.tableStudentVerification.idColumn),UInteger)
            End Get
            Set
                Me(Me.tableStudentVerification.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property svNo() As String
            Get
                Return CType(Me(Me.tableStudentVerification.svNoColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.svNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property seriesNo() As String
            Get
                Return CType(Me(Me.tableStudentVerification.seriesNoColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.seriesNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableStudentVerification.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentName() As String
            Get
                Return CType(Me(Me.tableStudentVerification.studentNameColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.studentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property degree() As String
            Get
                Return CType(Me(Me.tableStudentVerification.degreeColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.degreeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateAttended() As String
            Get
                Return CType(Me(Me.tableStudentVerification.dateAttendedColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.dateAttendedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearLevel() As String
            Get
                Return CType(Me(Me.tableStudentVerification.yearLevelColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.yearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gradDate() As String
            Get
                Return CType(Me(Me.tableStudentVerification.gradDateColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.gradDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateRequested() As String
            Get
                Return CType(Me(Me.tableStudentVerification.dateRequestedColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.dateRequestedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateReleased() As String
            Get
                Return CType(Me(Me.tableStudentVerification.dateReleasedColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.dateReleasedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property settingsID() As UInteger
            Get
                Return CType(Me(Me.tableStudentVerification.settingsIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableStudentVerification.settingsIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property settingsID1() As UInteger
            Get
                Return CType(Me(Me.tableStudentVerification.settingsID1Column),UInteger)
            End Get
            Set
                Me(Me.tableStudentVerification.settingsID1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableStudentVerification.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableStudentVerification.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tableStudentVerification.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tableStudentVerification.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Registrar() As String
            Get
                Return CType(Me(Me.tableStudentVerification.RegistrarColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.RegistrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrarPosition() As String
            Get
                Return CType(Me(Me.tableStudentVerification.registrarPositionColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.registrarPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clerk() As String
            Get
                Return CType(Me(Me.tableStudentVerification.clerkColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.clerkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clerkPosition() As String
            Get
                Return CType(Me(Me.tableStudentVerification.clerkPositionColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.clerkPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property administrative() As String
            Get
                Return CType(Me(Me.tableStudentVerification.administrativeColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.administrativeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property administrativePosition() As String
            Get
                Return CType(Me(Me.tableStudentVerification.administrativePositionColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.administrativePositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashier() As String
            Get
                Return CType(Me(Me.tableStudentVerification.cashierColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.cashierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashierPosition() As String
            Get
                Return CType(Me(Me.tableStudentVerification.cashierPositionColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.cashierPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property admissionOfficer() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentVerification.admissionOfficerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'admissionOfficer' in table 'StudentVerification' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentVerification.admissionOfficerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentNoCode() As String
            Get
                Return CType(Me(Me.tableStudentVerification.studentNoCodeColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.studentNoCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property scholarshipCoordinator() As String
            Get
                Return CType(Me(Me.tableStudentVerification.scholarshipCoordinatorColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.scholarshipCoordinatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property accountant() As String
            Get
                Return CType(Me(Me.tableStudentVerification.accountantColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.accountantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mainRegistrar() As String
            Get
                Return CType(Me(Me.tableStudentVerification.mainRegistrarColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.mainRegistrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property website() As String
            Get
                Return CType(Me(Me.tableStudentVerification.websiteColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.websiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property telNo() As String
            Get
                Return CType(Me(Me.tableStudentVerification.telNoColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.telNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mobileNo() As String
            Get
                Return CType(Me(Me.tableStudentVerification.mobileNoColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.mobileNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property branchCode() As String
            Get
                Return CType(Me(Me.tableStudentVerification.branchCodeColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.branchCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property emailad() As String
            Get
                Return CType(Me(Me.tableStudentVerification.emailadColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.emailadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableStudentVerification.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'StudentVerification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentVerification.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property loginFormImage() As String
            Get
                Return CType(Me(Me.tableStudentVerification.loginFormImageColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.loginFormImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrarEmail() As String
            Get
                Return CType(Me(Me.tableStudentVerification.registrarEmailColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.registrarEmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schoolEmail() As String
            Get
                Return CType(Me(Me.tableStudentVerification.schoolEmailColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.schoolEmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schoolLogo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableStudentVerification.schoolLogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'schoolLogo' in table 'StudentVerification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentVerification.schoolLogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VPAA() As String
            Get
                Return CType(Me(Me.tableStudentVerification.VPAAColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.VPAAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PropertyCustodian() As String
            Get
                Return CType(Me(Me.tableStudentVerification.PropertyCustodianColumn),String)
            End Get
            Set
                Me(Me.tableStudentVerification.PropertyCustodianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitsEarned() As Double
            Get
                Try 
                    Return CType(Me(Me.tableStudentVerification.UnitsEarnedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnitsEarned' in table 'StudentVerification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentVerification.UnitsEarnedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsadmissionOfficerNull() As Boolean
            Return Me.IsNull(Me.tableStudentVerification.admissionOfficerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetadmissionOfficerNull()
            Me(Me.tableStudentVerification.admissionOfficerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableStudentVerification.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableStudentVerification.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsschoolLogoNull() As Boolean
            Return Me.IsNull(Me.tableStudentVerification.schoolLogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetschoolLogoNull()
            Me(Me.tableStudentVerification.schoolLogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitsEarnedNull() As Boolean
            Return Me.IsNull(Me.tableStudentVerification.UnitsEarnedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitsEarnedNull()
            Me(Me.tableStudentVerification.UnitsEarnedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CAVDataSetRow
        Inherits Global.System.Data.DataRow
        
        Private tableCAVDataSet As CAVDataSetDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCAVDataSet = CType(Me.Table,CAVDataSetDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As UInteger
            Get
                Return CType(Me(Me.tableCAVDataSet.idColumn),UInteger)
            End Get
            Set
                Me(Me.tableCAVDataSet.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property svNo() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.svNoColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.svNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property seriesNo() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.seriesNoColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.seriesNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentName() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.studentNameColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.studentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property degree() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.degreeColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.degreeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateAttended() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.dateAttendedColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.dateAttendedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearLevel() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.yearLevelColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.yearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gradDate() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.gradDateColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.gradDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateReleased() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.dateReleasedColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.dateReleasedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property settingsID() As UInteger
            Get
                Return CType(Me(Me.tableCAVDataSet.settingsIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableCAVDataSet.settingsIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property settingsID1() As UInteger
            Get
                Return CType(Me(Me.tableCAVDataSet.settingsID1Column),UInteger)
            End Get
            Set
                Me(Me.tableCAVDataSet.settingsID1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Registrar() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.RegistrarColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.RegistrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrarPosition() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.registrarPositionColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.registrarPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clerk() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.clerkColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.clerkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clerkPosition() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.clerkPositionColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.clerkPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property administrative() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.administrativeColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.administrativeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property administrativePosition() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.administrativePositionColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.administrativePositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashier() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.cashierColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.cashierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashierPosition() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.cashierPositionColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.cashierPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property admissionOfficer() As String
            Get
                Try 
                    Return CType(Me(Me.tableCAVDataSet.admissionOfficerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'admissionOfficer' in table 'CAVDataSet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAVDataSet.admissionOfficerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentNoCode() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.studentNoCodeColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.studentNoCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property scholarshipCoordinator() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.scholarshipCoordinatorColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.scholarshipCoordinatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property accountant() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.accountantColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.accountantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mainRegistrar() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.mainRegistrarColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.mainRegistrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property website() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.websiteColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.websiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property telNo() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.telNoColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.telNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mobileNo() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.mobileNoColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.mobileNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property branchCode() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.branchCodeColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.branchCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property emailad() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.emailadColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.emailadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableCAVDataSet.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'CAVDataSet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAVDataSet.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property loginFormImage() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.loginFormImageColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.loginFormImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrarEmail() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.registrarEmailColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.registrarEmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schoolEmail() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.schoolEmailColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.schoolEmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schoolLogo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableCAVDataSet.schoolLogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'schoolLogo' in table 'CAVDataSet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAVDataSet.schoolLogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VPAA() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.VPAAColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.VPAAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PropertyCustodian() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.PropertyCustodianColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.PropertyCustodianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitsEarned() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCAVDataSet.UnitsEarnedColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnitsEarned' in table 'CAVDataSet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAVDataSet.UnitsEarnedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property reviewedBy() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.reviewedByColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.reviewedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property orNo() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.orNoColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.orNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amountPaid() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCAVDataSet.amountPaidColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'amountPaid' in table 'CAVDataSet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAVDataSet.amountPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datePaid() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.datePaidColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.datePaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property processedBy() As String
            Get
                Return CType(Me(Me.tableCAVDataSet.processedByColumn),String)
            End Get
            Set
                Me(Me.tableCAVDataSet.processedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsadmissionOfficerNull() As Boolean
            Return Me.IsNull(Me.tableCAVDataSet.admissionOfficerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetadmissionOfficerNull()
            Me(Me.tableCAVDataSet.admissionOfficerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableCAVDataSet.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableCAVDataSet.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsschoolLogoNull() As Boolean
            Return Me.IsNull(Me.tableCAVDataSet.schoolLogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetschoolLogoNull()
            Me(Me.tableCAVDataSet.schoolLogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitsEarnedNull() As Boolean
            Return Me.IsNull(Me.tableCAVDataSet.UnitsEarnedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitsEarnedNull()
            Me(Me.tableCAVDataSet.UnitsEarnedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsamountPaidNull() As Boolean
            Return Me.IsNull(Me.tableCAVDataSet.amountPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetamountPaidNull()
            Me(Me.tableCAVDataSet.amountPaidColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class newCORRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As newCORRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As newCORRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As newCORRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class profile_semesterstudeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As profile_semesterstudeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As profile_semesterstudeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As profile_semesterstudeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class billingStatementRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As billingStatementRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As billingStatementRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As billingStatementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class statisticalReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As statisticalReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As statisticalReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As statisticalReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class paymentsaccountsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As paymentsaccountsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As paymentsaccountsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As paymentsaccountsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class accountSummaryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As accountSummaryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As accountSummaryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As accountSummaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrolmentReportV2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrolmentReportV2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrolmentReportV2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrolmentReportV2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TORNewRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TORNewRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TORNewRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TORNewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DTRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DTRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DTRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DTRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COR2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COR2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COR2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COR2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class scholarsListingv2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As scholarsListingv2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As scholarsListingv2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As scholarsListingv2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudentVerificationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudentVerificationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudentVerificationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudentVerificationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CAVDataSetRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CAVDataSetRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CAVDataSetRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CAVDataSetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace Report3TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class newCORTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "newCOR"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("Birthdate", "Birthdate")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Sem", "Sem")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("Major", "Major")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("LecUnit", "LecUnit")
            tableMapping.ColumnMappings.Add("LabUnit", "LabUnit")
            tableMapping.ColumnMappings.Add("Units", "Units")
            tableMapping.ColumnMappings.Add("LabTime", "LabTime")
            tableMapping.ColumnMappings.Add("SchedTime", "SchedTime")
            tableMapping.ColumnMappings.Add("Room", "Room")
            tableMapping.ColumnMappings.Add("Instructor", "Instructor")
            tableMapping.ColumnMappings.Add("schedType", "schedType")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("Registrar", "Registrar")
            tableMapping.ColumnMappings.Add("registrarPosition", "registrarPosition")
            tableMapping.ColumnMappings.Add("cashier", "cashier")
            tableMapping.ColumnMappings.Add("cashierPosition", "cashierPosition")
            tableMapping.ColumnMappings.Add("scholarshipCoordinator", "scholarshipCoordinator")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("PresSign", "PresSign")
            tableMapping.ColumnMappings.Add("footer", "footer")
            tableMapping.ColumnMappings.Add("regSign", "regSign")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, concat(p.LastName,', ',p.FirstName,' ',p.MiddleName) as S"& _ 
                "tudentName, p.Birthdate, p.Sex, r.Sem, r.SY, r.Course, r.Major, r.YearLevel, r.S"& _ 
                "ubjectCode, r.Description, r.Section, r.LecUnit, r.LabUnit, (r.LecUnit+r.LabUnit"& _ 
                ") as Units, r.LabTime, r.SchedTime, r.Room, r.Instructor, r.schedType, st.School"& _ 
                "Name, st.SchoolAddress, st.Registrar, st.registrarPosition, st.cashier, st.cashi"& _ 
                "erPosition, st.scholarshipCoordinator, st.letterHead, st.SchoolHead, st.sHeadPos"& _ 
                "ition, st.PresSign, st.footer, st.regSign from studeprofile p join registration "& _ 
                "r on p.StudentNumber=r.StudentNumber join semsubjects ss on ss.Instructor=r.Inst"& _ 
                "ructor join srms_settings st on r.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Report3.newCORDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Report3.newCORDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Report3.newCORDataTable = New Report3.newCORDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class profile_semesterstudeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "profile_semesterstude"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("CivilStatus", "CivilStatus")
            tableMapping.ColumnMappings.Add("BirthPlace", "BirthPlace")
            tableMapping.ColumnMappings.Add("Religion", "Religion")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("contactNo", "contactNo")
            tableMapping.ColumnMappings.Add("working", "working")
            tableMapping.ColumnMappings.Add("occupation", "occupation")
            tableMapping.ColumnMappings.Add("salary", "salary")
            tableMapping.ColumnMappings.Add("employer", "employer")
            tableMapping.ColumnMappings.Add("employerAddress", "employerAddress")
            tableMapping.ColumnMappings.Add("birthDate", "birthDate")
            tableMapping.ColumnMappings.Add("admissionDate", "admissionDate")
            tableMapping.ColumnMappings.Add("graduationDate", "graduationDate")
            tableMapping.ColumnMappings.Add("guardian", "guardian")
            tableMapping.ColumnMappings.Add("guardianRelationship", "guardianRelationship")
            tableMapping.ColumnMappings.Add("guardianContact", "guardianContact")
            tableMapping.ColumnMappings.Add("guardianAddress", "guardianAddress")
            tableMapping.ColumnMappings.Add("spouse", "spouse")
            tableMapping.ColumnMappings.Add("spouseRelationship", "spouseRelationship")
            tableMapping.ColumnMappings.Add("spouseContact", "spouseContact")
            tableMapping.ColumnMappings.Add("children", "children")
            tableMapping.ColumnMappings.Add("spouseIncome", "spouseIncome")
            tableMapping.ColumnMappings.Add("imagePath", "imagePath")
            tableMapping.ColumnMappings.Add("course", "course")
            tableMapping.ColumnMappings.Add("yearLevel", "yearLevel")
            tableMapping.ColumnMappings.Add("father", "father")
            tableMapping.ColumnMappings.Add("fOccupation", "fOccupation")
            tableMapping.ColumnMappings.Add("fatherAddress", "fatherAddress")
            tableMapping.ColumnMappings.Add("mother", "mother")
            tableMapping.ColumnMappings.Add("mOccupation", "mOccupation")
            tableMapping.ColumnMappings.Add("motherAddress", "motherAddress")
            tableMapping.ColumnMappings.Add("siblings", "siblings")
            tableMapping.ColumnMappings.Add("birthOrder", "birthOrder")
            tableMapping.ColumnMappings.Add("age", "age")
            tableMapping.ColumnMappings.Add("title", "title")
            tableMapping.ColumnMappings.Add("pronoun", "pronoun")
            tableMapping.ColumnMappings.Add("pronoun2", "pronoun2")
            tableMapping.ColumnMappings.Add("pronoun3", "pronoun3")
            tableMapping.ColumnMappings.Add("scholarship", "scholarship")
            tableMapping.ColumnMappings.Add("ethnicity", "ethnicity")
            tableMapping.ColumnMappings.Add("fourPs", "fourPs")
            tableMapping.ColumnMappings.Add("seniorCitizen", "seniorCitizen")
            tableMapping.ColumnMappings.Add("als", "als")
            tableMapping.ColumnMappings.Add("disability", "disability")
            tableMapping.ColumnMappings.Add("parentsMonthly", "parentsMonthly")
            tableMapping.ColumnMappings.Add("province", "province")
            tableMapping.ColumnMappings.Add("city", "city")
            tableMapping.ColumnMappings.Add("brgy", "brgy")
            tableMapping.ColumnMappings.Add("sitio", "sitio")
            tableMapping.ColumnMappings.Add("provincePresent", "provincePresent")
            tableMapping.ColumnMappings.Add("cityPresent", "cityPresent")
            tableMapping.ColumnMappings.Add("brgyPresent", "brgyPresent")
            tableMapping.ColumnMappings.Add("sitioPresent", "sitioPresent")
            tableMapping.ColumnMappings.Add("elementary", "elementary")
            tableMapping.ColumnMappings.Add("elementaryAddress", "elementaryAddress")
            tableMapping.ColumnMappings.Add("elemGraduated", "elemGraduated")
            tableMapping.ColumnMappings.Add("elemMerits", "elemMerits")
            tableMapping.ColumnMappings.Add("secondary", "secondary")
            tableMapping.ColumnMappings.Add("secondaryAddress", "secondaryAddress")
            tableMapping.ColumnMappings.Add("secondaryGraduated", "secondaryGraduated")
            tableMapping.ColumnMappings.Add("secondaryMerits", "secondaryMerits")
            tableMapping.ColumnMappings.Add("vocational", "vocational")
            tableMapping.ColumnMappings.Add("vocationaladdress", "vocationaladdress")
            tableMapping.ColumnMappings.Add("vocationalGraduated", "vocationalGraduated")
            tableMapping.ColumnMappings.Add("vocationalCourse", "vocationalCourse")
            tableMapping.ColumnMappings.Add("ncLevel", "ncLevel")
            tableMapping.ColumnMappings.Add("transfereeSchool", "transfereeSchool")
            tableMapping.ColumnMappings.Add("transfereeAddress", "transfereeAddress")
            tableMapping.ColumnMappings.Add("transfereeCourse", "transfereeCourse")
            tableMapping.ColumnMappings.Add("transfereeGraduated", "transfereeGraduated")
            tableMapping.ColumnMappings.Add("skills", "skills")
            tableMapping.ColumnMappings.Add("settingsID", "settingsID")
            tableMapping.ColumnMappings.Add("applicationNo", "applicationNo")
            tableMapping.ColumnMappings.Add("testCenter", "testCenter")
            tableMapping.ColumnMappings.Add("testDate", "testDate")
            tableMapping.ColumnMappings.Add("encoder", "encoder")
            tableMapping.ColumnMappings.Add("semstudentid", "semstudentid")
            tableMapping.ColumnMappings.Add("StudentNumber1", "StudentNumber1")
            tableMapping.ColumnMappings.Add("FName", "FName")
            tableMapping.ColumnMappings.Add("MName", "MName")
            tableMapping.ColumnMappings.Add("LName", "LName")
            tableMapping.ColumnMappings.Add("Course1", "Course1")
            tableMapping.ColumnMappings.Add("YearLevel1", "YearLevel1")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("Term", "Term")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("StudeStatus", "StudeStatus")
            tableMapping.ColumnMappings.Add("Scholarship1", "Scholarship1")
            tableMapping.ColumnMappings.Add("DurationFrom", "DurationFrom")
            tableMapping.ColumnMappings.Add("DurationTo", "DurationTo")
            tableMapping.ColumnMappings.Add("AssessmentDate", "AssessmentDate")
            tableMapping.ColumnMappings.Add("AssessmentResult", "AssessmentResult")
            tableMapping.ColumnMappings.Add("PayingStatus", "PayingStatus")
            tableMapping.ColumnMappings.Add("GrantAmount", "GrantAmount")
            tableMapping.ColumnMappings.Add("YearLevelStat", "YearLevelStat")
            tableMapping.ColumnMappings.Add("Major", "Major")
            tableMapping.ColumnMappings.Add("settingsID1", "settingsID1")
            tableMapping.ColumnMappings.Add("enroledDate", "enroledDate")
            tableMapping.ColumnMappings.Add("crossEnrollee", "crossEnrollee")
            tableMapping.ColumnMappings.Add("classSession", "classSession")
            tableMapping.ColumnMappings.Add("prevGPA", "prevGPA")
            tableMapping.ColumnMappings.Add("settingsID2", "settingsID2")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("Registrar", "Registrar")
            tableMapping.ColumnMappings.Add("registrarPosition", "registrarPosition")
            tableMapping.ColumnMappings.Add("clerk", "clerk")
            tableMapping.ColumnMappings.Add("clerkPosition", "clerkPosition")
            tableMapping.ColumnMappings.Add("administrative", "administrative")
            tableMapping.ColumnMappings.Add("administrativePosition", "administrativePosition")
            tableMapping.ColumnMappings.Add("cashier", "cashier")
            tableMapping.ColumnMappings.Add("cashierPosition", "cashierPosition")
            tableMapping.ColumnMappings.Add("admissionOfficer", "admissionOfficer")
            tableMapping.ColumnMappings.Add("studentNoCode", "studentNoCode")
            tableMapping.ColumnMappings.Add("admissionSem", "admissionSem")
            tableMapping.ColumnMappings.Add("admissionSY", "admissionSY")
            tableMapping.ColumnMappings.Add("admissionBasis", "admissionBasis")
            tableMapping.ColumnMappings.Add("lastAttended", "lastAttended")
            tableMapping.ColumnMappings.Add("lastSchool", "lastSchool")
            tableMapping.ColumnMappings.Add("lastSchoolDate", "lastSchoolDate")
            tableMapping.ColumnMappings.Add("scholarshipCoordinator", "scholarshipCoordinator")
            tableMapping.ColumnMappings.Add("accountant", "accountant")
            tableMapping.ColumnMappings.Add("schoolLogo", "schoolLogo")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM studeprofile s join semesterstude ss on s.StudentNumber=ss.StudentN"& _ 
                "umber join srms_settings st on ss.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Report3.profile_semesterstudeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Report3.profile_semesterstudeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Report3.profile_semesterstudeDataTable = New Report3.profile_semesterstudeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class billingStatementTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "billingStatement"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("MI", "MI")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("contactNo", "contactNo")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("Major", "Major")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Scholarship", "Scholarship")
            tableMapping.ColumnMappings.Add("GrantAmount", "GrantAmount")
            tableMapping.ColumnMappings.Add("AcctTotal", "AcctTotal")
            tableMapping.ColumnMappings.Add("Sem", "Sem")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("scholarshipCoordinator", "scholarshipCoordinator")
            tableMapping.ColumnMappings.Add("accountant", "accountant")
            tableMapping.ColumnMappings.Add("Registrar", "Registrar")
            tableMapping.ColumnMappings.Add("totalUnits", "totalUnits")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select DISTINCT p.StudentNumber, p.FirstName, p.LastName, mid(p.MiddleName, 1,1) "& _ 
                "as MI, mid(p.Sex, 1,1) as Sex, p.email, p.contactNo, s.Course, s.Major, s.YearLe"& _ 
                "vel, s.Scholarship, s.GrantAmount, r.totalUnits, a.AcctTotal, a.Sem, a.SY, st.Sc"& _ 
                "hoolName, st.SchoolAddress, st.SchoolHead, st.sHeadPosition, st.scholarshipCoord"& _ 
                "inator, st.accountant, st.Registrar from studeprofile p join semesterstude s on "& _ 
                "p.StudentNumber=s.StudentNumber join registration r on p.StudentNumber=r.Student"& _ 
                "Number join studeaccount a on p.StudentNumber=a.StudentNumber join srms_settings"& _ 
                " st on a.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Report3.billingStatementDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Report3.billingStatementDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Report3.billingStatementDataTable = New Report3.billingStatementDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class statisticalReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "statisticalReport"
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("Major", "Major")
            tableMapping.ColumnMappings.Add("StatusCount", "StatusCount")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("EnrolledCount", "EnrolledCount")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("Registrar", "Registrar")
            tableMapping.ColumnMappings.Add("registrarPosition", "registrarPosition")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT mid(p.Sex,1,1) as Sex, s.Course, s.Major, count(s.Status) as StatusCount, "& _ 
                "s.Status, s.YearLevel, count(s.Course) as EnrolledCount, s.Semester, s.SY, st.Sc"& _ 
                "hoolName, st.SchoolAddress, st.SchoolHead, st.sHeadPosition, st.Registrar, st.re"& _ 
                "gistrarPosition, st.letterHead  FROM studeprofile p join semesterstude s on p.St"& _ 
                "udentNumber=s.StudentNumber join srms_settings st on s.settingsID=st.settingsID "& _ 
                "group by s.Course, s.YearLevel, s.Status order by s.Course"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Report3.statisticalReportDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Report3.statisticalReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Report3.statisticalReportDataTable = New Report3.statisticalReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class paymentsaccountsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "paymentsaccounts"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("PDate", "PDate")
            tableMapping.ColumnMappings.Add("ORNumber", "ORNumber")
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("PaymentType", "PaymentType")
            tableMapping.ColumnMappings.Add("CheckNumber", "CheckNumber")
            tableMapping.ColumnMappings.Add("Sem", "Sem")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("CollectionSource", "CollectionSource")
            tableMapping.ColumnMappings.Add("Bank", "Bank")
            tableMapping.ColumnMappings.Add("ORStatus", "ORStatus")
            tableMapping.ColumnMappings.Add("Cashier", "Cashier")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `srmscollege_demo`.`paymentsaccounts` WHERE ((`ID` = @Original_ID) AN"& _ 
                "D (`StudentNumber` = @Original_StudentNumber) AND (`FirstName` = @Original_First"& _ 
                "Name) AND (`MiddleName` = @Original_MiddleName) AND (`LastName` = @Original_Last"& _ 
                "Name) AND ((@IsNull_Course = 1 AND `Course` IS NULL) OR (`Course` = @Original_Co"& _ 
                "urse)) AND (`PDate` = @Original_PDate) AND (`ORNumber` = @Original_ORNumber) AND"& _ 
                " (`Amount` = @Original_Amount) AND ((@IsNull_description = 1 AND `description` I"& _ 
                "S NULL) OR (`description` = @Original_description)) AND (`PaymentType` = @Origin"& _ 
                "al_PaymentType) AND (`CheckNumber` = @Original_CheckNumber) AND (`Sem` = @Origin"& _ 
                "al_Sem) AND (`SY` = @Original_SY) AND (`CollectionSource` = @Original_Collection"& _ 
                "Source) AND (`Bank` = @Original_Bank) AND (`ORStatus` = @Original_ORStatus) AND "& _ 
                "(`Cashier` = @Original_Cashier))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_FirstName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FirstName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_MiddleName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MiddleName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_LastName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_Course"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Course"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_PDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ORNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Amount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Amount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_description"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_description"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_PaymentType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PaymentType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_CheckNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CheckNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Sem"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_CollectionSource"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CollectionSource"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Bank"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Bank"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ORStatus"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORStatus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Cashier"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Cashier"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `srmscollege_demo`.`paymentsaccounts` (`StudentNumber`, `FirstName`, "& _ 
                "`MiddleName`, `LastName`, `Course`, `PDate`, `ORNumber`, `Amount`, `description`"& _ 
                ", `PaymentType`, `CheckNumber`, `Sem`, `SY`, `CollectionSource`, `Bank`, `ORStat"& _ 
                "us`, `Cashier`) VALUES (@StudentNumber, @FirstName, @MiddleName, @LastName, @Cou"& _ 
                "rse, @PDate, @ORNumber, @Amount, @description, @PaymentType, @CheckNumber, @Sem,"& _ 
                " @SY, @CollectionSource, @Bank, @ORStatus, @Cashier)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@FirstName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FirstName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@MiddleName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MiddleName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@LastName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@PDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@ORNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORNumber"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Amount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Amount"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@description"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "description"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@PaymentType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PaymentType"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@CheckNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CheckNumber"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Sem"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@CollectionSource"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CollectionSource"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Bank"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Bank"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@ORStatus"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORStatus"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Cashier"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Cashier"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `srmscollege_demo`.`paymentsaccounts` SET `StudentNumber` = @StudentNumber"& _ 
                ", `FirstName` = @FirstName, `MiddleName` = @MiddleName, `LastName` = @LastName, "& _ 
                "`Course` = @Course, `PDate` = @PDate, `ORNumber` = @ORNumber, `Amount` = @Amount"& _ 
                ", `description` = @description, `PaymentType` = @PaymentType, `CheckNumber` = @C"& _ 
                "heckNumber, `Sem` = @Sem, `SY` = @SY, `CollectionSource` = @CollectionSource, `B"& _ 
                "ank` = @Bank, `ORStatus` = @ORStatus, `Cashier` = @Cashier WHERE ((`ID` = @Origi"& _ 
                "nal_ID) AND (`StudentNumber` = @Original_StudentNumber) AND (`FirstName` = @Orig"& _ 
                "inal_FirstName) AND (`MiddleName` = @Original_MiddleName) AND (`LastName` = @Ori"& _ 
                "ginal_LastName) AND ((@IsNull_Course = 1 AND `Course` IS NULL) OR (`Course` = @O"& _ 
                "riginal_Course)) AND (`PDate` = @Original_PDate) AND (`ORNumber` = @Original_ORN"& _ 
                "umber) AND (`Amount` = @Original_Amount) AND ((@IsNull_description = 1 AND `desc"& _ 
                "ription` IS NULL) OR (`description` = @Original_description)) AND (`PaymentType`"& _ 
                " = @Original_PaymentType) AND (`CheckNumber` = @Original_CheckNumber) AND (`Sem`"& _ 
                " = @Original_Sem) AND (`SY` = @Original_SY) AND (`CollectionSource` = @Original_"& _ 
                "CollectionSource) AND (`Bank` = @Original_Bank) AND (`ORStatus` = @Original_ORSt"& _ 
                "atus) AND (`Cashier` = @Original_Cashier))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@FirstName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FirstName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@MiddleName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MiddleName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@LastName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@PDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@ORNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Amount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Amount"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@description"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "description"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@PaymentType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PaymentType"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@CheckNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CheckNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Sem"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@CollectionSource"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CollectionSource"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Bank"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Bank"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@ORStatus"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORStatus"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Cashier"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Cashier"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_FirstName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FirstName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_MiddleName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MiddleName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_LastName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_Course"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Course"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_PDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ORNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Amount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Amount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_description"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_description"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_PaymentType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PaymentType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_CheckNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CheckNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Sem"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_CollectionSource"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CollectionSource"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Bank"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Bank"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ORStatus"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORStatus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Cashier"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Cashier"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM paymentsaccounts"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Report3.paymentsaccountsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Report3.paymentsaccountsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Report3.paymentsaccountsDataTable = New Report3.paymentsaccountsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Report3.paymentsaccountsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Report3) As Integer
            Return Me.Adapter.Update(dataSet, "paymentsaccounts")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID As UInteger,  _
                    ByVal Original_StudentNumber As String,  _
                    ByVal Original_FirstName As String,  _
                    ByVal Original_MiddleName As String,  _
                    ByVal Original_LastName As String,  _
                    ByVal Original_Course As String,  _
                    ByVal Original_PDate As Date,  _
                    ByVal Original_ORNumber As String,  _
                    ByVal Original_Amount As Double,  _
                    ByVal Original_description As String,  _
                    ByVal Original_PaymentType As String,  _
                    ByVal Original_CheckNumber As String,  _
                    ByVal Original_Sem As String,  _
                    ByVal Original_SY As String,  _
                    ByVal Original_CollectionSource As String,  _
                    ByVal Original_Bank As String,  _
                    ByVal Original_ORStatus As String,  _
                    ByVal Original_Cashier As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,UInteger)
            If (Original_StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentNumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_StudentNumber,String)
            End If
            If (Original_FirstName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FirstName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FirstName,String)
            End If
            If (Original_MiddleName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MiddleName")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MiddleName,String)
            End If
            If (Original_LastName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LastName")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_LastName,String)
            End If
            If (Original_Course Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Course,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PDate,Date)
            If (Original_ORNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ORNumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ORNumber,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Amount,Double)
            If (Original_description Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_description,String)
            End If
            If (Original_PaymentType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PaymentType")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_PaymentType,String)
            End If
            If (Original_CheckNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CheckNumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_CheckNumber,String)
            End If
            If (Original_Sem Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Sem")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Sem,String)
            End If
            If (Original_SY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SY")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_SY,String)
            End If
            If (Original_CollectionSource Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CollectionSource")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_CollectionSource,String)
            End If
            If (Original_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Bank")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_Bank,String)
            End If
            If (Original_ORStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ORStatus")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ORStatus,String)
            End If
            If (Original_Cashier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cashier")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_Cashier,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal StudentNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Course As String,  _
                    ByVal PDate As Date,  _
                    ByVal ORNumber As String,  _
                    ByVal Amount As Double,  _
                    ByVal description As String,  _
                    ByVal PaymentType As String,  _
                    ByVal CheckNumber As String,  _
                    ByVal Sem As String,  _
                    ByVal SY As String,  _
                    ByVal CollectionSource As String,  _
                    ByVal Bank As String,  _
                    ByVal ORStatus As String,  _
                    ByVal Cashier As String) As Integer
            If (StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentNumber")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(StudentNumber,String)
            End If
            If (FirstName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FirstName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FirstName,String)
            End If
            If (MiddleName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MiddleName")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MiddleName,String)
            End If
            If (LastName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LastName")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LastName,String)
            End If
            If (Course Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Course,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(PDate,Date)
            If (ORNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ORNumber")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ORNumber,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Amount,Double)
            If (description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(description,String)
            End If
            If (PaymentType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PaymentType")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PaymentType,String)
            End If
            If (CheckNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CheckNumber")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(CheckNumber,String)
            End If
            If (Sem Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Sem")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Sem,String)
            End If
            If (SY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SY")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(SY,String)
            End If
            If (CollectionSource Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CollectionSource")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(CollectionSource,String)
            End If
            If (Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Bank")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Bank,String)
            End If
            If (ORStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ORStatus")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(ORStatus,String)
            End If
            If (Cashier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cashier")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Cashier,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal StudentNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Course As String,  _
                    ByVal PDate As Date,  _
                    ByVal ORNumber As String,  _
                    ByVal Amount As Double,  _
                    ByVal description As String,  _
                    ByVal PaymentType As String,  _
                    ByVal CheckNumber As String,  _
                    ByVal Sem As String,  _
                    ByVal SY As String,  _
                    ByVal CollectionSource As String,  _
                    ByVal Bank As String,  _
                    ByVal ORStatus As String,  _
                    ByVal Cashier As String,  _
                    ByVal Original_ID As UInteger,  _
                    ByVal Original_StudentNumber As String,  _
                    ByVal Original_FirstName As String,  _
                    ByVal Original_MiddleName As String,  _
                    ByVal Original_LastName As String,  _
                    ByVal Original_Course As String,  _
                    ByVal Original_PDate As Date,  _
                    ByVal Original_ORNumber As String,  _
                    ByVal Original_Amount As Double,  _
                    ByVal Original_description As String,  _
                    ByVal Original_PaymentType As String,  _
                    ByVal Original_CheckNumber As String,  _
                    ByVal Original_Sem As String,  _
                    ByVal Original_SY As String,  _
                    ByVal Original_CollectionSource As String,  _
                    ByVal Original_Bank As String,  _
                    ByVal Original_ORStatus As String,  _
                    ByVal Original_Cashier As String) As Integer
            If (StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(StudentNumber,String)
            End If
            If (FirstName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FirstName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FirstName,String)
            End If
            If (MiddleName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MiddleName")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MiddleName,String)
            End If
            If (LastName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LastName")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LastName,String)
            End If
            If (Course Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Course,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PDate,Date)
            If (ORNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ORNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ORNumber,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Amount,Double)
            If (description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(description,String)
            End If
            If (PaymentType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PaymentType")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PaymentType,String)
            End If
            If (CheckNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CheckNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(CheckNumber,String)
            End If
            If (Sem Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Sem")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Sem,String)
            End If
            If (SY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SY")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(SY,String)
            End If
            If (CollectionSource Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CollectionSource")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(CollectionSource,String)
            End If
            If (Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Bank,String)
            End If
            If (ORStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ORStatus")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(ORStatus,String)
            End If
            If (Cashier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cashier")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Cashier,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ID,UInteger)
            If (Original_StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_StudentNumber,String)
            End If
            If (Original_FirstName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FirstName")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_FirstName,String)
            End If
            If (Original_MiddleName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MiddleName")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_MiddleName,String)
            End If
            If (Original_LastName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LastName")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_LastName,String)
            End If
            If (Original_Course Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Course,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_PDate,Date)
            If (Original_ORNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ORNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_ORNumber,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Amount,Double)
            If (Original_description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_description,String)
            End If
            If (Original_PaymentType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PaymentType")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_PaymentType,String)
            End If
            If (Original_CheckNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CheckNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_CheckNumber,String)
            End If
            If (Original_Sem Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Sem")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_Sem,String)
            End If
            If (Original_SY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SY")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_SY,String)
            End If
            If (Original_CollectionSource Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CollectionSource")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_CollectionSource,String)
            End If
            If (Original_Bank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Bank")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Bank,String)
            End If
            If (Original_ORStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ORStatus")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_ORStatus,String)
            End If
            If (Original_Cashier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cashier")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_Cashier,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class accountSummaryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "accountSummary"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("TotalLec", "TotalLec")
            tableMapping.ColumnMappings.Add("FeesDesc", "FeesDesc")
            tableMapping.ColumnMappings.Add("FeesAmount", "FeesAmount")
            tableMapping.ColumnMappings.Add("feesType", "feesType")
            tableMapping.ColumnMappings.Add("Sem", "Sem")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("cashier", "cashier")
            tableMapping.ColumnMappings.Add("cashierPosition", "cashierPosition")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("AcctTotal", "AcctTotal")
            tableMapping.ColumnMappings.Add("tuitionDay", "tuitionDay")
            tableMapping.ColumnMappings.Add("specialTuition", "specialTuition")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber,concat( p.LastName,', ', p.FirstName) as StudentName, p.Se"& _ 
                "x, a.Course, a.YearLevel, a.TotalLec, a.FeesDesc, a.FeesAmount, a.feesType, a.Ac"& _ 
                "ctTotal, a.tuitionDay, a.Sem, a.SY, a.specialTuition, st.SchoolName, st.SchoolAd"& _ 
                "dress, st.cashier, st.cashierPosition, st.letterHead from studeprofile p join st"& _ 
                "udeaccount a on p.StudentNumber=a.StudentNumber join srms_settings st on a.setti"& _ 
                "ngsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Report3.accountSummaryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Report3.accountSummaryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Report3.accountSummaryDataTable = New Report3.accountSummaryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrolmentReportV2TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrolmentReportV2"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("Units", "Units")
            tableMapping.ColumnMappings.Add("Sem", "Sem")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("registrar", "registrar")
            tableMapping.ColumnMappings.Add("registrarPosition", "registrarPosition")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, concat(p.LastName,', ',p.FirstName) as StudentName, p.Sex"& _ 
                ", r.SubjectCode, sum(r.LecUnit+r.LabUnit) as Units, r.Sem, r.SY, st.SchoolName, "& _ 
                "st.SchoolAddress, st.registrar, st.registrarPosition from studeprofile p join re"& _ 
                "gistration r on p.StudentNumber=r.StudentNumber join srms_settings st on r.setti"& _ 
                "ngsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Report3.EnrolmentReportV2DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Report3.EnrolmentReportV2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Report3.EnrolmentReportV2DataTable = New Report3.EnrolmentReportV2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TORNewTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TORNew"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("civilStatus", "civilStatus")
            tableMapping.ColumnMappings.Add("birthDate", "birthDate")
            tableMapping.ColumnMappings.Add("BirthPlace", "BirthPlace")
            tableMapping.ColumnMappings.Add("father", "father")
            tableMapping.ColumnMappings.Add("mother", "mother")
            tableMapping.ColumnMappings.Add("address", "address")
            tableMapping.ColumnMappings.Add("lastSchool", "lastSchool")
            tableMapping.ColumnMappings.Add("lastSchoolDate", "lastSchoolDate")
            tableMapping.ColumnMappings.Add("admissionDate", "admissionDate")
            tableMapping.ColumnMappings.Add("admissionSem", "admissionSem")
            tableMapping.ColumnMappings.Add("admissionSY", "admissionSY")
            tableMapping.ColumnMappings.Add("admissionBasis", "admissionBasis")
            tableMapping.ColumnMappings.Add("lastAttended", "lastAttended")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("Major", "Major")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("Final", "Final")
            tableMapping.ColumnMappings.Add("Complied", "Complied")
            tableMapping.ColumnMappings.Add("Credits", "Credits")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("registrar", "registrar")
            tableMapping.ColumnMappings.Add("registrarPosition", "registrarPosition")
            tableMapping.ColumnMappings.Add("profImage", "profImage")
            tableMapping.ColumnMappings.Add("honors", "honors")
            tableMapping.ColumnMappings.Add("rotcSerial", "rotcSerial")
            tableMapping.ColumnMappings.Add("cwtsSerial", "cwtsSerial")
            tableMapping.ColumnMappings.Add("graduationDate", "graduationDate")
            tableMapping.ColumnMappings.Add("transfereeSchool", "transfereeSchool")
            tableMapping.ColumnMappings.Add("transfereeAddress", "transfereeAddress")
            tableMapping.ColumnMappings.Add("website", "website")
            tableMapping.ColumnMappings.Add("emailad", "emailad")
            tableMapping.ColumnMappings.Add("telNo", "telNo")
            tableMapping.ColumnMappings.Add("website1", "website1")
            tableMapping.ColumnMappings.Add("registrarEmail", "registrarEmail")
            tableMapping.ColumnMappings.Add("schoolLogo", "schoolLogo")
            tableMapping.ColumnMappings.Add("ltsSerialNo", "ltsSerialNo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, p.LastName, p.FirstName, p.MiddleName, p.Sex, p.civilStat"& _ 
                "us, p.birthDate, p.BirthPlace, p.father, p.mother, concat(p.sitio,', ',p.brgy,',"& _ 
                " ',p.city,', ',p.province) as address, p.lastSchool, p.lastSchoolDate, p.admissi"& _ 
                "onDate, p.admissionSem, p.admissionSY, p.admissionBasis, p.lastAttended, p.honor"& _ 
                "s, p.rotcSerial, cwtsSerial, p.graduationDate, p.transfereeSchool, p.transfereeA"& _ 
                "ddress, p.ltsSerialNo, ss.Course, ss.Major, g.SubjectCode, g.Description, g.Fina"& _ 
                "l, g.Complied, sum(g.LecUnit+g.LabUnit) as Credits, concat(g.Semester,', ', g.SY"& _ 
                ",' - ',g.Course,' - ',g.Major,' - ',st.branchCode) as Semester, st.SchoolName, s"& _ 
                "t.SchoolAddress, st.website, st.emailad, st.telNo, st.registrar, st.registrarPos"& _ 
                "ition, pi.profImage, st.website, st.registrarEmail, st.schoolLogo from studeprof"& _ 
                "ile p join profimage pi on p.StudentNumber=pi.StudentNumber join semesterstude s"& _ 
                "s on p.StudentNumber=ss.StudentNumber join grades g on p.StudentNumber=g.Student"& _ 
                "Number join srms_settings st on p.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Report3.TORNewDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Report3.TORNewDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Report3.TORNewDataTable = New Report3.TORNewDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DTRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DTR"
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("logDate", "logDate")
            tableMapping.ColumnMappings.Add("logTime", "logTime")
            tableMapping.ColumnMappings.Add("MonthName", "MonthName")
            tableMapping.ColumnMappings.Add("YearName", "YearName")
            tableMapping.ColumnMappings.Add("schoolHead", "schoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select s.FirstName, mid(s.MiddleName,1,1) as MiddleName, s.LastName, a.logDate, a"& _ 
                ".logTime, monthname(a.logDate) as MonthName, Year(a.logDate) as YearName, st.sch"& _ 
                "oolHead, st.sHeadPosition from staff s join hris_attendance a on s.IDNumber=a.ID"& _ 
                "Number join srms_settings st on s.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Report3.DTRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Report3.DTRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Report3.DTRDataTable = New Report3.DTRDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class COR2TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "COR2"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("Birthdate", "Birthdate")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("Sem", "Sem")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("Major", "Major")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("LecUnit", "LecUnit")
            tableMapping.ColumnMappings.Add("LabUnit", "LabUnit")
            tableMapping.ColumnMappings.Add("Units", "Units")
            tableMapping.ColumnMappings.Add("LabTime", "LabTime")
            tableMapping.ColumnMappings.Add("SchedTime", "SchedTime")
            tableMapping.ColumnMappings.Add("Room", "Room")
            tableMapping.ColumnMappings.Add("Instructor", "Instructor")
            tableMapping.ColumnMappings.Add("schedType", "schedType")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("Registrar", "Registrar")
            tableMapping.ColumnMappings.Add("registrarPosition", "registrarPosition")
            tableMapping.ColumnMappings.Add("cashier", "cashier")
            tableMapping.ColumnMappings.Add("cashierPosition", "cashierPosition")
            tableMapping.ColumnMappings.Add("scholarshipCoordinator", "scholarshipCoordinator")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("PresSign", "PresSign")
            tableMapping.ColumnMappings.Add("footer", "footer")
            tableMapping.ColumnMappings.Add("Term", "Term")
            tableMapping.ColumnMappings.Add("regSign", "regSign")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, concat(p.LastName,', ',p.FirstName,' ',p.nameExtn,' ',p.M"& _ 
                "iddleName) as StudentName, p.Birthdate, p.Sex, r.Sem, r.SY, r.Course, r.Major, r"& _ 
                ".YearLevel, r.SubjectCode, r.Description, r.Section, r.LecUnit, r.LabUnit, (r.Le"& _ 
                "cUnit+r.LabUnit) as Units, r.LabTime, r.SchedTime, r.Room, r.Instructor, r.sched"& _ 
                "Type, r.Term, st.SchoolName, st.SchoolAddress, st.Registrar, st.registrarPositio"& _ 
                "n, st.cashier, st.cashierPosition, st.scholarshipCoordinator, st.letterHead, st."& _ 
                "SchoolHead, st.sHeadPosition, st.PresSign, st.footer, st.regSign from studeprofi"& _ 
                "le p join registration r on p.StudentNumber=r.StudentNumber join semsubjects ss "& _ 
                "on ss.Instructor=r.Instructor join srms_settings st on r.settingsID=st.settingsI"& _ 
                "D"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Report3.COR2DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Report3.COR2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Report3.COR2DataTable = New Report3.COR2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class scholarsListingv2TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "scholarsListingv2"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("lrn", "lrn")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MI", "MI")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("BirthDate", "BirthDate")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("Scholarship", "Scholarship")
            tableMapping.ColumnMappings.Add("prevGPA", "prevGPA")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, p.lrn, p.LastName, p.FirstName, MID(p.MiddleName,1,1) as "& _ 
                "MI, p.Sex, p.BirthDate, s.YearLevel, s.Course, s.Scholarship, s.prevGPA, s.Semes"& _ 
                "ter, s.SY, st.SchoolName, st.SchoolAddress, st.letterHead from studeprofile p jo"& _ 
                "in semesterstude s on p.StudentNumber=s.StudentNumber join srms_settings st on s"& _ 
                ".settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Report3.scholarsListingv2DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Report3.scholarsListingv2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Report3.scholarsListingv2DataTable = New Report3.scholarsListingv2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class StudentVerificationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "StudentVerification"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("svNo", "svNo")
            tableMapping.ColumnMappings.Add("seriesNo", "seriesNo")
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("studentName", "studentName")
            tableMapping.ColumnMappings.Add("degree", "degree")
            tableMapping.ColumnMappings.Add("dateAttended", "dateAttended")
            tableMapping.ColumnMappings.Add("yearLevel", "yearLevel")
            tableMapping.ColumnMappings.Add("gradDate", "gradDate")
            tableMapping.ColumnMappings.Add("dateRequested", "dateRequested")
            tableMapping.ColumnMappings.Add("dateReleased", "dateReleased")
            tableMapping.ColumnMappings.Add("settingsID", "settingsID")
            tableMapping.ColumnMappings.Add("settingsID1", "settingsID1")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("Registrar", "Registrar")
            tableMapping.ColumnMappings.Add("registrarPosition", "registrarPosition")
            tableMapping.ColumnMappings.Add("clerk", "clerk")
            tableMapping.ColumnMappings.Add("clerkPosition", "clerkPosition")
            tableMapping.ColumnMappings.Add("administrative", "administrative")
            tableMapping.ColumnMappings.Add("administrativePosition", "administrativePosition")
            tableMapping.ColumnMappings.Add("cashier", "cashier")
            tableMapping.ColumnMappings.Add("cashierPosition", "cashierPosition")
            tableMapping.ColumnMappings.Add("admissionOfficer", "admissionOfficer")
            tableMapping.ColumnMappings.Add("studentNoCode", "studentNoCode")
            tableMapping.ColumnMappings.Add("scholarshipCoordinator", "scholarshipCoordinator")
            tableMapping.ColumnMappings.Add("accountant", "accountant")
            tableMapping.ColumnMappings.Add("mainRegistrar", "mainRegistrar")
            tableMapping.ColumnMappings.Add("website", "website")
            tableMapping.ColumnMappings.Add("telNo", "telNo")
            tableMapping.ColumnMappings.Add("mobileNo", "mobileNo")
            tableMapping.ColumnMappings.Add("branchCode", "branchCode")
            tableMapping.ColumnMappings.Add("emailad", "emailad")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            tableMapping.ColumnMappings.Add("loginFormImage", "loginFormImage")
            tableMapping.ColumnMappings.Add("registrarEmail", "registrarEmail")
            tableMapping.ColumnMappings.Add("schoolEmail", "schoolEmail")
            tableMapping.ColumnMappings.Add("schoolLogo", "schoolLogo")
            tableMapping.ColumnMappings.Add("VPAA", "VPAA")
            tableMapping.ColumnMappings.Add("PropertyCustodian", "PropertyCustodian")
            tableMapping.ColumnMappings.Add("UnitsEarned", "UnitsEarned")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM stude_verification s join srms_settings st on s.settingsID=st.setti"& _ 
                "ngsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Report3.StudentVerificationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Report3.StudentVerificationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Report3.StudentVerificationDataTable = New Report3.StudentVerificationDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CAVDataSetTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CAVDataSet"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("svNo", "svNo")
            tableMapping.ColumnMappings.Add("seriesNo", "seriesNo")
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("studentName", "studentName")
            tableMapping.ColumnMappings.Add("degree", "degree")
            tableMapping.ColumnMappings.Add("dateAttended", "dateAttended")
            tableMapping.ColumnMappings.Add("yearLevel", "yearLevel")
            tableMapping.ColumnMappings.Add("gradDate", "gradDate")
            tableMapping.ColumnMappings.Add("dateReleased", "dateReleased")
            tableMapping.ColumnMappings.Add("settingsID", "settingsID")
            tableMapping.ColumnMappings.Add("settingsID1", "settingsID1")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("Registrar", "Registrar")
            tableMapping.ColumnMappings.Add("registrarPosition", "registrarPosition")
            tableMapping.ColumnMappings.Add("clerk", "clerk")
            tableMapping.ColumnMappings.Add("clerkPosition", "clerkPosition")
            tableMapping.ColumnMappings.Add("administrative", "administrative")
            tableMapping.ColumnMappings.Add("administrativePosition", "administrativePosition")
            tableMapping.ColumnMappings.Add("cashier", "cashier")
            tableMapping.ColumnMappings.Add("cashierPosition", "cashierPosition")
            tableMapping.ColumnMappings.Add("admissionOfficer", "admissionOfficer")
            tableMapping.ColumnMappings.Add("studentNoCode", "studentNoCode")
            tableMapping.ColumnMappings.Add("scholarshipCoordinator", "scholarshipCoordinator")
            tableMapping.ColumnMappings.Add("accountant", "accountant")
            tableMapping.ColumnMappings.Add("mainRegistrar", "mainRegistrar")
            tableMapping.ColumnMappings.Add("website", "website")
            tableMapping.ColumnMappings.Add("telNo", "telNo")
            tableMapping.ColumnMappings.Add("mobileNo", "mobileNo")
            tableMapping.ColumnMappings.Add("branchCode", "branchCode")
            tableMapping.ColumnMappings.Add("emailad", "emailad")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            tableMapping.ColumnMappings.Add("loginFormImage", "loginFormImage")
            tableMapping.ColumnMappings.Add("registrarEmail", "registrarEmail")
            tableMapping.ColumnMappings.Add("schoolEmail", "schoolEmail")
            tableMapping.ColumnMappings.Add("schoolLogo", "schoolLogo")
            tableMapping.ColumnMappings.Add("VPAA", "VPAA")
            tableMapping.ColumnMappings.Add("PropertyCustodian", "PropertyCustodian")
            tableMapping.ColumnMappings.Add("UnitsEarned", "UnitsEarned")
            tableMapping.ColumnMappings.Add("reviewedBy", "reviewedBy")
            tableMapping.ColumnMappings.Add("orNo", "orNo")
            tableMapping.ColumnMappings.Add("amountPaid", "amountPaid")
            tableMapping.ColumnMappings.Add("datePaid", "datePaid")
            tableMapping.ColumnMappings.Add("processedBy", "processedBy")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM stude_cav s join srms_settings st on s.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Report3.CAVDataSetDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Report3.CAVDataSetDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Report3.CAVDataSetDataTable = New Report3.CAVDataSetDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _paymentsaccountsTableAdapter As paymentsaccountsTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property paymentsaccountsTableAdapter() As paymentsaccountsTableAdapter
            Get
                Return Me._paymentsaccountsTableAdapter
            End Get
            Set
                Me._paymentsaccountsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._paymentsaccountsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._paymentsaccountsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._paymentsaccountsTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._paymentsaccountsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As Report3, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._paymentsaccountsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.paymentsaccounts.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._paymentsaccountsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As Report3, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._paymentsaccountsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.paymentsaccounts.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._paymentsaccountsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As Report3, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._paymentsaccountsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.paymentsaccounts.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._paymentsaccountsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As Report3) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._paymentsaccountsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._paymentsaccountsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._paymentsaccountsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._paymentsaccountsTableAdapter, Me._paymentsaccountsTableAdapter.Connection)
                    Me._paymentsaccountsTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._paymentsaccountsTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._paymentsaccountsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._paymentsaccountsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._paymentsaccountsTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._paymentsaccountsTableAdapter) Is Nothing) Then
                    Me._paymentsaccountsTableAdapter.Connection = CType(revertConnections(Me._paymentsaccountsTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._paymentsaccountsTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
