'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.9151
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Reports"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Reports
    Inherits Global.System.Data.DataSet
    
    Private tableEnrollmentHistory As EnrollmentHistoryDataTable
    
    Private tablepaymentsaccounts As paymentsaccountsDataTable
    
    Private tableaccountSummary As accountSummaryDataTable
    
    Private tableCollectionsSummary As CollectionsSummaryDataTable
    
    Private tableScholars As ScholarsDataTable
    
    Private tableexpenses As expensesDataTable
    
    Private tablesemesterstude As semesterstudeDataTable
    
    Private tablestudeprofile As studeprofileDataTable
    
    Private tableincomestatement As incomestatementDataTable
    
    Private tablepromissoryNotes As promissoryNotesDataTable
    
    Private tablecompany As companyDataTable
    
    Private tableSchedules As SchedulesDataTable
    
    Private tableClearance As ClearanceDataTable
    
    Private tablescholarshipListing As scholarshipListingDataTable
    
    Private tablecivilStat As civilStatDataTable
    
    Private tableMR As MRDataTable
    
    Private tablels_items As ls_itemsDataTable
    
    Private tablebyauthor As byauthorDataTable
    
    Private relationfk_paymentsaccounts_1 As Global.System.Data.DataRelation
    
    Private relationfk_paymentsaccounts_11 As Global.System.Data.DataRelation
    
    Private relationfk_promissory_1 As Global.System.Data.DataRelation
    
    Private relationfk_registration_1 As Global.System.Data.DataRelation
    
    Private relationFK_semesterstude_1 As Global.System.Data.DataRelation
    
    Private _relationFK_promissory_1 As Global.System.Data.DataRelation
    
    Private relationFK_semesterstude_11 As Global.System.Data.DataRelation
    
    Private relationFK_semesterstude_12 As Global.System.Data.DataRelation
    
    Private relationFK_promissory_11 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("EnrollmentHistory")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollmentHistoryDataTable(ds.Tables("EnrollmentHistory")))
            End If
            If (Not (ds.Tables("paymentsaccounts")) Is Nothing) Then
                MyBase.Tables.Add(New paymentsaccountsDataTable(ds.Tables("paymentsaccounts")))
            End If
            If (Not (ds.Tables("accountSummary")) Is Nothing) Then
                MyBase.Tables.Add(New accountSummaryDataTable(ds.Tables("accountSummary")))
            End If
            If (Not (ds.Tables("CollectionsSummary")) Is Nothing) Then
                MyBase.Tables.Add(New CollectionsSummaryDataTable(ds.Tables("CollectionsSummary")))
            End If
            If (Not (ds.Tables("Scholars")) Is Nothing) Then
                MyBase.Tables.Add(New ScholarsDataTable(ds.Tables("Scholars")))
            End If
            If (Not (ds.Tables("expenses")) Is Nothing) Then
                MyBase.Tables.Add(New expensesDataTable(ds.Tables("expenses")))
            End If
            If (Not (ds.Tables("semesterstude")) Is Nothing) Then
                MyBase.Tables.Add(New semesterstudeDataTable(ds.Tables("semesterstude")))
            End If
            If (Not (ds.Tables("studeprofile")) Is Nothing) Then
                MyBase.Tables.Add(New studeprofileDataTable(ds.Tables("studeprofile")))
            End If
            If (Not (ds.Tables("incomestatement")) Is Nothing) Then
                MyBase.Tables.Add(New incomestatementDataTable(ds.Tables("incomestatement")))
            End If
            If (Not (ds.Tables("promissoryNotes")) Is Nothing) Then
                MyBase.Tables.Add(New promissoryNotesDataTable(ds.Tables("promissoryNotes")))
            End If
            If (Not (ds.Tables("company")) Is Nothing) Then
                MyBase.Tables.Add(New companyDataTable(ds.Tables("company")))
            End If
            If (Not (ds.Tables("Schedules")) Is Nothing) Then
                MyBase.Tables.Add(New SchedulesDataTable(ds.Tables("Schedules")))
            End If
            If (Not (ds.Tables("Clearance")) Is Nothing) Then
                MyBase.Tables.Add(New ClearanceDataTable(ds.Tables("Clearance")))
            End If
            If (Not (ds.Tables("scholarshipListing")) Is Nothing) Then
                MyBase.Tables.Add(New scholarshipListingDataTable(ds.Tables("scholarshipListing")))
            End If
            If (Not (ds.Tables("civilStat")) Is Nothing) Then
                MyBase.Tables.Add(New civilStatDataTable(ds.Tables("civilStat")))
            End If
            If (Not (ds.Tables("MR")) Is Nothing) Then
                MyBase.Tables.Add(New MRDataTable(ds.Tables("MR")))
            End If
            If (Not (ds.Tables("ls_items")) Is Nothing) Then
                MyBase.Tables.Add(New ls_itemsDataTable(ds.Tables("ls_items")))
            End If
            If (Not (ds.Tables("byauthor")) Is Nothing) Then
                MyBase.Tables.Add(New byauthorDataTable(ds.Tables("byauthor")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollmentHistory() As EnrollmentHistoryDataTable
        Get
            Return Me.tableEnrollmentHistory
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property paymentsaccounts() As paymentsaccountsDataTable
        Get
            Return Me.tablepaymentsaccounts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property accountSummary() As accountSummaryDataTable
        Get
            Return Me.tableaccountSummary
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CollectionsSummary() As CollectionsSummaryDataTable
        Get
            Return Me.tableCollectionsSummary
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Scholars() As ScholarsDataTable
        Get
            Return Me.tableScholars
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property expenses() As expensesDataTable
        Get
            Return Me.tableexpenses
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property semesterstude() As semesterstudeDataTable
        Get
            Return Me.tablesemesterstude
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property studeprofile() As studeprofileDataTable
        Get
            Return Me.tablestudeprofile
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property incomestatement() As incomestatementDataTable
        Get
            Return Me.tableincomestatement
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property promissoryNotes() As promissoryNotesDataTable
        Get
            Return Me.tablepromissoryNotes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property company() As companyDataTable
        Get
            Return Me.tablecompany
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Schedules() As SchedulesDataTable
        Get
            Return Me.tableSchedules
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Clearance() As ClearanceDataTable
        Get
            Return Me.tableClearance
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property scholarshipListing() As scholarshipListingDataTable
        Get
            Return Me.tablescholarshipListing
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property civilStat() As civilStatDataTable
        Get
            Return Me.tablecivilStat
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MR() As MRDataTable
        Get
            Return Me.tableMR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ls_items() As ls_itemsDataTable
        Get
            Return Me.tablels_items
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property byauthor() As byauthorDataTable
        Get
            Return Me.tablebyauthor
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Reports = CType(MyBase.Clone,Reports)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("EnrollmentHistory")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollmentHistoryDataTable(ds.Tables("EnrollmentHistory")))
            End If
            If (Not (ds.Tables("paymentsaccounts")) Is Nothing) Then
                MyBase.Tables.Add(New paymentsaccountsDataTable(ds.Tables("paymentsaccounts")))
            End If
            If (Not (ds.Tables("accountSummary")) Is Nothing) Then
                MyBase.Tables.Add(New accountSummaryDataTable(ds.Tables("accountSummary")))
            End If
            If (Not (ds.Tables("CollectionsSummary")) Is Nothing) Then
                MyBase.Tables.Add(New CollectionsSummaryDataTable(ds.Tables("CollectionsSummary")))
            End If
            If (Not (ds.Tables("Scholars")) Is Nothing) Then
                MyBase.Tables.Add(New ScholarsDataTable(ds.Tables("Scholars")))
            End If
            If (Not (ds.Tables("expenses")) Is Nothing) Then
                MyBase.Tables.Add(New expensesDataTable(ds.Tables("expenses")))
            End If
            If (Not (ds.Tables("semesterstude")) Is Nothing) Then
                MyBase.Tables.Add(New semesterstudeDataTable(ds.Tables("semesterstude")))
            End If
            If (Not (ds.Tables("studeprofile")) Is Nothing) Then
                MyBase.Tables.Add(New studeprofileDataTable(ds.Tables("studeprofile")))
            End If
            If (Not (ds.Tables("incomestatement")) Is Nothing) Then
                MyBase.Tables.Add(New incomestatementDataTable(ds.Tables("incomestatement")))
            End If
            If (Not (ds.Tables("promissoryNotes")) Is Nothing) Then
                MyBase.Tables.Add(New promissoryNotesDataTable(ds.Tables("promissoryNotes")))
            End If
            If (Not (ds.Tables("company")) Is Nothing) Then
                MyBase.Tables.Add(New companyDataTable(ds.Tables("company")))
            End If
            If (Not (ds.Tables("Schedules")) Is Nothing) Then
                MyBase.Tables.Add(New SchedulesDataTable(ds.Tables("Schedules")))
            End If
            If (Not (ds.Tables("Clearance")) Is Nothing) Then
                MyBase.Tables.Add(New ClearanceDataTable(ds.Tables("Clearance")))
            End If
            If (Not (ds.Tables("scholarshipListing")) Is Nothing) Then
                MyBase.Tables.Add(New scholarshipListingDataTable(ds.Tables("scholarshipListing")))
            End If
            If (Not (ds.Tables("civilStat")) Is Nothing) Then
                MyBase.Tables.Add(New civilStatDataTable(ds.Tables("civilStat")))
            End If
            If (Not (ds.Tables("MR")) Is Nothing) Then
                MyBase.Tables.Add(New MRDataTable(ds.Tables("MR")))
            End If
            If (Not (ds.Tables("ls_items")) Is Nothing) Then
                MyBase.Tables.Add(New ls_itemsDataTable(ds.Tables("ls_items")))
            End If
            If (Not (ds.Tables("byauthor")) Is Nothing) Then
                MyBase.Tables.Add(New byauthorDataTable(ds.Tables("byauthor")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableEnrollmentHistory = CType(MyBase.Tables("EnrollmentHistory"),EnrollmentHistoryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollmentHistory) Is Nothing) Then
                Me.tableEnrollmentHistory.InitVars
            End If
        End If
        Me.tablepaymentsaccounts = CType(MyBase.Tables("paymentsaccounts"),paymentsaccountsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepaymentsaccounts) Is Nothing) Then
                Me.tablepaymentsaccounts.InitVars
            End If
        End If
        Me.tableaccountSummary = CType(MyBase.Tables("accountSummary"),accountSummaryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableaccountSummary) Is Nothing) Then
                Me.tableaccountSummary.InitVars
            End If
        End If
        Me.tableCollectionsSummary = CType(MyBase.Tables("CollectionsSummary"),CollectionsSummaryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCollectionsSummary) Is Nothing) Then
                Me.tableCollectionsSummary.InitVars
            End If
        End If
        Me.tableScholars = CType(MyBase.Tables("Scholars"),ScholarsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableScholars) Is Nothing) Then
                Me.tableScholars.InitVars
            End If
        End If
        Me.tableexpenses = CType(MyBase.Tables("expenses"),expensesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableexpenses) Is Nothing) Then
                Me.tableexpenses.InitVars
            End If
        End If
        Me.tablesemesterstude = CType(MyBase.Tables("semesterstude"),semesterstudeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesemesterstude) Is Nothing) Then
                Me.tablesemesterstude.InitVars
            End If
        End If
        Me.tablestudeprofile = CType(MyBase.Tables("studeprofile"),studeprofileDataTable)
        If (initTable = true) Then
            If (Not (Me.tablestudeprofile) Is Nothing) Then
                Me.tablestudeprofile.InitVars
            End If
        End If
        Me.tableincomestatement = CType(MyBase.Tables("incomestatement"),incomestatementDataTable)
        If (initTable = true) Then
            If (Not (Me.tableincomestatement) Is Nothing) Then
                Me.tableincomestatement.InitVars
            End If
        End If
        Me.tablepromissoryNotes = CType(MyBase.Tables("promissoryNotes"),promissoryNotesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepromissoryNotes) Is Nothing) Then
                Me.tablepromissoryNotes.InitVars
            End If
        End If
        Me.tablecompany = CType(MyBase.Tables("company"),companyDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecompany) Is Nothing) Then
                Me.tablecompany.InitVars
            End If
        End If
        Me.tableSchedules = CType(MyBase.Tables("Schedules"),SchedulesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSchedules) Is Nothing) Then
                Me.tableSchedules.InitVars
            End If
        End If
        Me.tableClearance = CType(MyBase.Tables("Clearance"),ClearanceDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClearance) Is Nothing) Then
                Me.tableClearance.InitVars
            End If
        End If
        Me.tablescholarshipListing = CType(MyBase.Tables("scholarshipListing"),scholarshipListingDataTable)
        If (initTable = true) Then
            If (Not (Me.tablescholarshipListing) Is Nothing) Then
                Me.tablescholarshipListing.InitVars
            End If
        End If
        Me.tablecivilStat = CType(MyBase.Tables("civilStat"),civilStatDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecivilStat) Is Nothing) Then
                Me.tablecivilStat.InitVars
            End If
        End If
        Me.tableMR = CType(MyBase.Tables("MR"),MRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMR) Is Nothing) Then
                Me.tableMR.InitVars
            End If
        End If
        Me.tablels_items = CType(MyBase.Tables("ls_items"),ls_itemsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablels_items) Is Nothing) Then
                Me.tablels_items.InitVars
            End If
        End If
        Me.tablebyauthor = CType(MyBase.Tables("byauthor"),byauthorDataTable)
        If (initTable = true) Then
            If (Not (Me.tablebyauthor) Is Nothing) Then
                Me.tablebyauthor.InitVars
            End If
        End If
        Me.relationfk_paymentsaccounts_1 = Me.Relations("fk_paymentsaccounts_1")
        Me.relationfk_paymentsaccounts_11 = Me.Relations("fk_paymentsaccounts_11")
        Me.relationfk_promissory_1 = Me.Relations("fk_promissory_1")
        Me.relationfk_registration_1 = Me.Relations("fk_registration_1")
        Me.relationFK_semesterstude_1 = Me.Relations("FK_semesterstude_1")
        Me._relationFK_promissory_1 = Me.Relations("FK_promissory_1")
        Me.relationFK_semesterstude_11 = Me.Relations("FK_semesterstude_11")
        Me.relationFK_semesterstude_12 = Me.Relations("FK_semesterstude_12")
        Me.relationFK_promissory_11 = Me.Relations("FK_promissory_11")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Reports"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Reports.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableEnrollmentHistory = New EnrollmentHistoryDataTable
        MyBase.Tables.Add(Me.tableEnrollmentHistory)
        Me.tablepaymentsaccounts = New paymentsaccountsDataTable
        MyBase.Tables.Add(Me.tablepaymentsaccounts)
        Me.tableaccountSummary = New accountSummaryDataTable
        MyBase.Tables.Add(Me.tableaccountSummary)
        Me.tableCollectionsSummary = New CollectionsSummaryDataTable
        MyBase.Tables.Add(Me.tableCollectionsSummary)
        Me.tableScholars = New ScholarsDataTable
        MyBase.Tables.Add(Me.tableScholars)
        Me.tableexpenses = New expensesDataTable
        MyBase.Tables.Add(Me.tableexpenses)
        Me.tablesemesterstude = New semesterstudeDataTable
        MyBase.Tables.Add(Me.tablesemesterstude)
        Me.tablestudeprofile = New studeprofileDataTable
        MyBase.Tables.Add(Me.tablestudeprofile)
        Me.tableincomestatement = New incomestatementDataTable
        MyBase.Tables.Add(Me.tableincomestatement)
        Me.tablepromissoryNotes = New promissoryNotesDataTable
        MyBase.Tables.Add(Me.tablepromissoryNotes)
        Me.tablecompany = New companyDataTable
        MyBase.Tables.Add(Me.tablecompany)
        Me.tableSchedules = New SchedulesDataTable
        MyBase.Tables.Add(Me.tableSchedules)
        Me.tableClearance = New ClearanceDataTable
        MyBase.Tables.Add(Me.tableClearance)
        Me.tablescholarshipListing = New scholarshipListingDataTable
        MyBase.Tables.Add(Me.tablescholarshipListing)
        Me.tablecivilStat = New civilStatDataTable
        MyBase.Tables.Add(Me.tablecivilStat)
        Me.tableMR = New MRDataTable
        MyBase.Tables.Add(Me.tableMR)
        Me.tablels_items = New ls_itemsDataTable
        MyBase.Tables.Add(Me.tablels_items)
        Me.tablebyauthor = New byauthorDataTable
        MyBase.Tables.Add(Me.tablebyauthor)
        Me.relationfk_paymentsaccounts_1 = New Global.System.Data.DataRelation("fk_paymentsaccounts_1", New Global.System.Data.DataColumn() {Me.tableScholars.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tablepaymentsaccounts.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationfk_paymentsaccounts_1)
        Me.relationfk_paymentsaccounts_11 = New Global.System.Data.DataRelation("fk_paymentsaccounts_11", New Global.System.Data.DataColumn() {Me.tablestudeprofile.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tablepaymentsaccounts.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationfk_paymentsaccounts_11)
        Me.relationfk_promissory_1 = New Global.System.Data.DataRelation("fk_promissory_1", New Global.System.Data.DataColumn() {Me.tablestudeprofile.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tablepromissoryNotes.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationfk_promissory_1)
        Me.relationfk_registration_1 = New Global.System.Data.DataRelation("fk_registration_1", New Global.System.Data.DataColumn() {Me.tablestudeprofile.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tableClearance.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationfk_registration_1)
        Me.relationFK_semesterstude_1 = New Global.System.Data.DataRelation("FK_semesterstude_1", New Global.System.Data.DataColumn() {Me.tablestudeprofile.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tableScholars.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationFK_semesterstude_1)
        Me._relationFK_promissory_1 = New Global.System.Data.DataRelation("FK_promissory_1", New Global.System.Data.DataColumn() {Me.tableScholars.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tablepromissoryNotes.StudentNumberColumn}, false)
        Me.Relations.Add(Me._relationFK_promissory_1)
        Me.relationFK_semesterstude_11 = New Global.System.Data.DataRelation("FK_semesterstude_11", New Global.System.Data.DataColumn() {Me.tablestudeprofile.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tablescholarshipListing.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationFK_semesterstude_11)
        Me.relationFK_semesterstude_12 = New Global.System.Data.DataRelation("FK_semesterstude_12", New Global.System.Data.DataColumn() {Me.tablestudeprofile.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tablecivilStat.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationFK_semesterstude_12)
        Me.relationFK_promissory_11 = New Global.System.Data.DataRelation("FK_promissory_11", New Global.System.Data.DataColumn() {Me.tableEnrollmentHistory.StudentNumberColumn}, New Global.System.Data.DataColumn() {Me.tablepromissoryNotes.StudentNumberColumn}, false)
        Me.Relations.Add(Me.relationFK_promissory_11)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollmentHistory() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepaymentsaccounts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeaccountSummary() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCollectionsSummary() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeScholars() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeexpenses() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesemesterstude() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializestudeprofile() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeincomestatement() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepromissoryNotes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecompany() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSchedules() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeClearance() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializescholarshipListing() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecivilStat() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializels_items() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializebyauthor() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Reports = New Reports
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub EnrollmentHistoryRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollmentHistoryRowChangeEvent)
    
    Public Delegate Sub paymentsaccountsRowChangeEventHandler(ByVal sender As Object, ByVal e As paymentsaccountsRowChangeEvent)
    
    Public Delegate Sub accountSummaryRowChangeEventHandler(ByVal sender As Object, ByVal e As accountSummaryRowChangeEvent)
    
    Public Delegate Sub CollectionsSummaryRowChangeEventHandler(ByVal sender As Object, ByVal e As CollectionsSummaryRowChangeEvent)
    
    Public Delegate Sub ScholarsRowChangeEventHandler(ByVal sender As Object, ByVal e As ScholarsRowChangeEvent)
    
    Public Delegate Sub expensesRowChangeEventHandler(ByVal sender As Object, ByVal e As expensesRowChangeEvent)
    
    Public Delegate Sub semesterstudeRowChangeEventHandler(ByVal sender As Object, ByVal e As semesterstudeRowChangeEvent)
    
    Public Delegate Sub studeprofileRowChangeEventHandler(ByVal sender As Object, ByVal e As studeprofileRowChangeEvent)
    
    Public Delegate Sub incomestatementRowChangeEventHandler(ByVal sender As Object, ByVal e As incomestatementRowChangeEvent)
    
    Public Delegate Sub promissoryNotesRowChangeEventHandler(ByVal sender As Object, ByVal e As promissoryNotesRowChangeEvent)
    
    Public Delegate Sub companyRowChangeEventHandler(ByVal sender As Object, ByVal e As companyRowChangeEvent)
    
    Public Delegate Sub SchedulesRowChangeEventHandler(ByVal sender As Object, ByVal e As SchedulesRowChangeEvent)
    
    Public Delegate Sub ClearanceRowChangeEventHandler(ByVal sender As Object, ByVal e As ClearanceRowChangeEvent)
    
    Public Delegate Sub scholarshipListingRowChangeEventHandler(ByVal sender As Object, ByVal e As scholarshipListingRowChangeEvent)
    
    Public Delegate Sub civilStatRowChangeEventHandler(ByVal sender As Object, ByVal e As civilStatRowChangeEvent)
    
    Public Delegate Sub MRRowChangeEventHandler(ByVal sender As Object, ByVal e As MRRowChangeEvent)
    
    Public Delegate Sub ls_itemsRowChangeEventHandler(ByVal sender As Object, ByVal e As ls_itemsRowChangeEvent)
    
    Public Delegate Sub byauthorRowChangeEventHandler(ByVal sender As Object, ByVal e As byauthorRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollmentHistoryDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollmentHistoryRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollmentHistory"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollmentHistoryRow
            Get
                Return CType(Me.Rows(index),EnrollmentHistoryRow)
            End Get
        End Property
        
        Public Event EnrollmentHistoryRowChanging As EnrollmentHistoryRowChangeEventHandler
        
        Public Event EnrollmentHistoryRowChanged As EnrollmentHistoryRowChangeEventHandler
        
        Public Event EnrollmentHistoryRowDeleting As EnrollmentHistoryRowChangeEventHandler
        
        Public Event EnrollmentHistoryRowDeleted As EnrollmentHistoryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollmentHistoryRow(ByVal row As EnrollmentHistoryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollmentHistoryRow(ByVal StudentNumber As String, ByVal StudentName As String, ByVal Course As String, ByVal YearLevel As String, ByVal SY As String, ByVal Semester As String, ByVal letterHead() As Byte) As EnrollmentHistoryRow
            Dim rowEnrollmentHistoryRow As EnrollmentHistoryRow = CType(Me.NewRow,EnrollmentHistoryRow)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, StudentName, Course, YearLevel, SY, Semester, letterHead}
            rowEnrollmentHistoryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollmentHistoryRow)
            Return rowEnrollmentHistoryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As EnrollmentHistoryRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),EnrollmentHistoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollmentHistoryDataTable = CType(MyBase.Clone,EnrollmentHistoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollmentHistoryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnletterHead = MyBase.Columns("letterHead")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnStudentName.MaxLength = 182
            Me.columnCourse.MaxLength = 250
            Me.columnYearLevel.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnSemester.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollmentHistoryRow() As EnrollmentHistoryRow
            Return CType(Me.NewRow,EnrollmentHistoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollmentHistoryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollmentHistoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollmentHistoryRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollmentHistoryRowChanged(Me, New EnrollmentHistoryRowChangeEvent(CType(e.Row,EnrollmentHistoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollmentHistoryRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollmentHistoryRowChanging(Me, New EnrollmentHistoryRowChangeEvent(CType(e.Row,EnrollmentHistoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollmentHistoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollmentHistoryRowDeleted(Me, New EnrollmentHistoryRowChangeEvent(CType(e.Row,EnrollmentHistoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollmentHistoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollmentHistoryRowDeleting(Me, New EnrollmentHistoryRowChangeEvent(CType(e.Row,EnrollmentHistoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollmentHistoryRow(ByVal row As EnrollmentHistoryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollmentHistoryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class paymentsaccountsDataTable
        Inherits Global.System.Data.TypedTableBase(Of paymentsaccountsRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnPDate As Global.System.Data.DataColumn
        
        Private columnORNumber As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnPaymentType As Global.System.Data.DataColumn
        
        Private columnCheckNumber As Global.System.Data.DataColumn
        
        Private columnSem As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnTerm As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "paymentsaccounts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TermColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTerm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As paymentsaccountsRow
            Get
                Return CType(Me.Rows(index),paymentsaccountsRow)
            End Get
        End Property
        
        Public Event paymentsaccountsRowChanging As paymentsaccountsRowChangeEventHandler
        
        Public Event paymentsaccountsRowChanged As paymentsaccountsRowChangeEventHandler
        
        Public Event paymentsaccountsRowDeleting As paymentsaccountsRowChangeEventHandler
        
        Public Event paymentsaccountsRowDeleted As paymentsaccountsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddpaymentsaccountsRow(ByVal row As paymentsaccountsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddpaymentsaccountsRow(ByVal ID As UInteger, ByVal parentScholarsRowByfk_paymentsaccounts_1 As ScholarsRow, ByVal FirstName As String, ByVal MiddleName As String, ByVal LastName As String, ByVal PDate As Date, ByVal ORNumber As String, ByVal Amount As Double, ByVal PaymentType As String, ByVal CheckNumber As String, ByVal Sem As String, ByVal SY As String, ByVal Address As String, ByVal Term As String) As paymentsaccountsRow
            Dim rowpaymentsaccountsRow As paymentsaccountsRow = CType(Me.NewRow,paymentsaccountsRow)
            Dim columnValuesArray() As Object = New Object() {ID, Nothing, FirstName, MiddleName, LastName, PDate, ORNumber, Amount, PaymentType, CheckNumber, Sem, SY, Address, Term}
            If (Not (parentScholarsRowByfk_paymentsaccounts_1) Is Nothing) Then
                columnValuesArray(1) = parentScholarsRowByfk_paymentsaccounts_1(0)
            End If
            rowpaymentsaccountsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpaymentsaccountsRow)
            Return rowpaymentsaccountsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As UInteger) As paymentsaccountsRow
            Return CType(Me.Rows.Find(New Object() {ID}),paymentsaccountsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As paymentsaccountsDataTable = CType(MyBase.Clone,paymentsaccountsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New paymentsaccountsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnPDate = MyBase.Columns("PDate")
            Me.columnORNumber = MyBase.Columns("ORNumber")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnPaymentType = MyBase.Columns("PaymentType")
            Me.columnCheckNumber = MyBase.Columns("CheckNumber")
            Me.columnSem = MyBase.Columns("Sem")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnTerm = MyBase.Columns("Term")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnPDate = New Global.System.Data.DataColumn("PDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPDate)
            Me.columnORNumber = New Global.System.Data.DataColumn("ORNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORNumber)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnPaymentType = New Global.System.Data.DataColumn("PaymentType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentType)
            Me.columnCheckNumber = New Global.System.Data.DataColumn("CheckNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckNumber)
            Me.columnSem = New Global.System.Data.DataColumn("Sem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSem)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnTerm = New Global.System.Data.DataColumn("Term", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTerm)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.MaxLength = 45
            Me.columnFirstName.AllowDBNull = false
            Me.columnFirstName.MaxLength = 45
            Me.columnMiddleName.AllowDBNull = false
            Me.columnMiddleName.MaxLength = 45
            Me.columnLastName.AllowDBNull = false
            Me.columnLastName.MaxLength = 45
            Me.columnPDate.AllowDBNull = false
            Me.columnORNumber.AllowDBNull = false
            Me.columnORNumber.MaxLength = 45
            Me.columnAmount.AllowDBNull = false
            Me.columnPaymentType.AllowDBNull = false
            Me.columnPaymentType.MaxLength = 45
            Me.columnCheckNumber.AllowDBNull = false
            Me.columnCheckNumber.MaxLength = 45
            Me.columnSem.AllowDBNull = false
            Me.columnSem.MaxLength = 45
            Me.columnSY.AllowDBNull = false
            Me.columnSY.MaxLength = 45
            Me.columnAddress.AllowDBNull = false
            Me.columnAddress.MaxLength = 200
            Me.columnTerm.AllowDBNull = false
            Me.columnTerm.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewpaymentsaccountsRow() As paymentsaccountsRow
            Return CType(Me.NewRow,paymentsaccountsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New paymentsaccountsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(paymentsaccountsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.paymentsaccountsRowChangedEvent) Is Nothing) Then
                RaiseEvent paymentsaccountsRowChanged(Me, New paymentsaccountsRowChangeEvent(CType(e.Row,paymentsaccountsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.paymentsaccountsRowChangingEvent) Is Nothing) Then
                RaiseEvent paymentsaccountsRowChanging(Me, New paymentsaccountsRowChangeEvent(CType(e.Row,paymentsaccountsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.paymentsaccountsRowDeletedEvent) Is Nothing) Then
                RaiseEvent paymentsaccountsRowDeleted(Me, New paymentsaccountsRowChangeEvent(CType(e.Row,paymentsaccountsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.paymentsaccountsRowDeletingEvent) Is Nothing) Then
                RaiseEvent paymentsaccountsRowDeleting(Me, New paymentsaccountsRowChangeEvent(CType(e.Row,paymentsaccountsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovepaymentsaccountsRow(ByVal row As paymentsaccountsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "paymentsaccountsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class accountSummaryDataTable
        Inherits Global.System.Data.TypedTableBase(Of accountSummaryRow)
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private _columnsum_AcctTotal_ As Global.System.Data.DataColumn
        
        Private _columnsum_TotalPayments_ As Global.System.Data.DataColumn
        
        Private _columnsum_CurrentBalance_ As Global.System.Data.DataColumn
        
        Private columnSem As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "accountSummary"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _sum_AcctTotal_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnsum_AcctTotal_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _sum_TotalPayments_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnsum_TotalPayments_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _sum_CurrentBalance_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnsum_CurrentBalance_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As accountSummaryRow
            Get
                Return CType(Me.Rows(index),accountSummaryRow)
            End Get
        End Property
        
        Public Event accountSummaryRowChanging As accountSummaryRowChangeEventHandler
        
        Public Event accountSummaryRowChanged As accountSummaryRowChangeEventHandler
        
        Public Event accountSummaryRowDeleting As accountSummaryRowChangeEventHandler
        
        Public Event accountSummaryRowDeleted As accountSummaryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddaccountSummaryRow(ByVal row As accountSummaryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddaccountSummaryRow(ByVal Course As String, ByVal _sum_AcctTotal_ As Double, ByVal _sum_TotalPayments_ As Double, ByVal _sum_CurrentBalance_ As Double, ByVal Sem As String, ByVal SY As String) As accountSummaryRow
            Dim rowaccountSummaryRow As accountSummaryRow = CType(Me.NewRow,accountSummaryRow)
            Dim columnValuesArray() As Object = New Object() {Course, _sum_AcctTotal_, _sum_TotalPayments_, _sum_CurrentBalance_, Sem, SY}
            rowaccountSummaryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowaccountSummaryRow)
            Return rowaccountSummaryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As accountSummaryDataTable = CType(MyBase.Clone,accountSummaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New accountSummaryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCourse = MyBase.Columns("Course")
            Me._columnsum_AcctTotal_ = MyBase.Columns("sum(AcctTotal)")
            Me._columnsum_TotalPayments_ = MyBase.Columns("sum(TotalPayments)")
            Me._columnsum_CurrentBalance_ = MyBase.Columns("sum(CurrentBalance)")
            Me.columnSem = MyBase.Columns("Sem")
            Me.columnSY = MyBase.Columns("SY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me._columnsum_AcctTotal_ = New Global.System.Data.DataColumn("sum(AcctTotal)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnsum_AcctTotal_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnsum_AcctTotal_")
            Me._columnsum_AcctTotal_.ExtendedProperties.Add("Generator_UserColumnName", "sum(AcctTotal)")
            MyBase.Columns.Add(Me._columnsum_AcctTotal_)
            Me._columnsum_TotalPayments_ = New Global.System.Data.DataColumn("sum(TotalPayments)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnsum_TotalPayments_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnsum_TotalPayments_")
            Me._columnsum_TotalPayments_.ExtendedProperties.Add("Generator_UserColumnName", "sum(TotalPayments)")
            MyBase.Columns.Add(Me._columnsum_TotalPayments_)
            Me._columnsum_CurrentBalance_ = New Global.System.Data.DataColumn("sum(CurrentBalance)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnsum_CurrentBalance_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnsum_CurrentBalance_")
            Me._columnsum_CurrentBalance_.ExtendedProperties.Add("Generator_UserColumnName", "sum(CurrentBalance)")
            MyBase.Columns.Add(Me._columnsum_CurrentBalance_)
            Me.columnSem = New Global.System.Data.DataColumn("Sem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSem)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnCourse.AllowDBNull = false
            Me.columnCourse.MaxLength = 150
            Me.columnSem.AllowDBNull = false
            Me.columnSem.MaxLength = 45
            Me.columnSY.AllowDBNull = false
            Me.columnSY.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewaccountSummaryRow() As accountSummaryRow
            Return CType(Me.NewRow,accountSummaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New accountSummaryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(accountSummaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.accountSummaryRowChangedEvent) Is Nothing) Then
                RaiseEvent accountSummaryRowChanged(Me, New accountSummaryRowChangeEvent(CType(e.Row,accountSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.accountSummaryRowChangingEvent) Is Nothing) Then
                RaiseEvent accountSummaryRowChanging(Me, New accountSummaryRowChangeEvent(CType(e.Row,accountSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.accountSummaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent accountSummaryRowDeleted(Me, New accountSummaryRowChangeEvent(CType(e.Row,accountSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.accountSummaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent accountSummaryRowDeleting(Me, New accountSummaryRowChangeEvent(CType(e.Row,accountSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveaccountSummaryRow(ByVal row As accountSummaryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "accountSummaryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CollectionsSummaryDataTable
        Inherits Global.System.Data.TypedTableBase(Of CollectionsSummaryRow)
        
        Private columnPDate As Global.System.Data.DataColumn
        
        Private columnORNumber As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnPayor As Global.System.Data.DataColumn
        
        Private columnCashier As Global.System.Data.DataColumn
        
        Private columnORStatus As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CollectionsSummary"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CollectionsSummaryRow
            Get
                Return CType(Me.Rows(index),CollectionsSummaryRow)
            End Get
        End Property
        
        Public Event CollectionsSummaryRowChanging As CollectionsSummaryRowChangeEventHandler
        
        Public Event CollectionsSummaryRowChanged As CollectionsSummaryRowChangeEventHandler
        
        Public Event CollectionsSummaryRowDeleting As CollectionsSummaryRowChangeEventHandler
        
        Public Event CollectionsSummaryRowDeleted As CollectionsSummaryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCollectionsSummaryRow(ByVal row As CollectionsSummaryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCollectionsSummaryRow(ByVal PDate As Date, ByVal ORNumber As String, ByVal Amount As Double, ByVal ID As UInteger, ByVal StudentNumber As String, ByVal Payor As String, ByVal Cashier As String, ByVal ORStatus As String) As CollectionsSummaryRow
            Dim rowCollectionsSummaryRow As CollectionsSummaryRow = CType(Me.NewRow,CollectionsSummaryRow)
            Dim columnValuesArray() As Object = New Object() {PDate, ORNumber, Amount, ID, StudentNumber, Payor, Cashier, ORStatus}
            rowCollectionsSummaryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCollectionsSummaryRow)
            Return rowCollectionsSummaryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As UInteger) As CollectionsSummaryRow
            Return CType(Me.Rows.Find(New Object() {ID}),CollectionsSummaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CollectionsSummaryDataTable = CType(MyBase.Clone,CollectionsSummaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CollectionsSummaryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPDate = MyBase.Columns("PDate")
            Me.columnORNumber = MyBase.Columns("ORNumber")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnID = MyBase.Columns("ID")
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnPayor = MyBase.Columns("Payor")
            Me.columnCashier = MyBase.Columns("Cashier")
            Me.columnORStatus = MyBase.Columns("ORStatus")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPDate = New Global.System.Data.DataColumn("PDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPDate)
            Me.columnORNumber = New Global.System.Data.DataColumn("ORNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORNumber)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnPayor = New Global.System.Data.DataColumn("Payor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayor)
            Me.columnCashier = New Global.System.Data.DataColumn("Cashier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashier)
            Me.columnORStatus = New Global.System.Data.DataColumn("ORStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORStatus)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnPDate.AllowDBNull = false
            Me.columnORNumber.AllowDBNull = false
            Me.columnORNumber.MaxLength = 45
            Me.columnAmount.AllowDBNull = false
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.MaxLength = 45
            Me.columnPayor.AllowDBNull = false
            Me.columnPayor.MaxLength = 138
            Me.columnCashier.AllowDBNull = false
            Me.columnCashier.MaxLength = 45
            Me.columnORStatus.AllowDBNull = false
            Me.columnORStatus.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCollectionsSummaryRow() As CollectionsSummaryRow
            Return CType(Me.NewRow,CollectionsSummaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CollectionsSummaryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CollectionsSummaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CollectionsSummaryRowChangedEvent) Is Nothing) Then
                RaiseEvent CollectionsSummaryRowChanged(Me, New CollectionsSummaryRowChangeEvent(CType(e.Row,CollectionsSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CollectionsSummaryRowChangingEvent) Is Nothing) Then
                RaiseEvent CollectionsSummaryRowChanging(Me, New CollectionsSummaryRowChangeEvent(CType(e.Row,CollectionsSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CollectionsSummaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent CollectionsSummaryRowDeleted(Me, New CollectionsSummaryRowChangeEvent(CType(e.Row,CollectionsSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CollectionsSummaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent CollectionsSummaryRowDeleting(Me, New CollectionsSummaryRowChangeEvent(CType(e.Row,CollectionsSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCollectionsSummaryRow(ByVal row As CollectionsSummaryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CollectionsSummaryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ScholarsDataTable
        Inherits Global.System.Data.TypedTableBase(Of ScholarsRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnScholarship As Global.System.Data.DataColumn
        
        Private columnprevGPA As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMI As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        Private columnCourse1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Scholars"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScholarshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScholarship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prevGPAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprevGPA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Course1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ScholarsRow
            Get
                Return CType(Me.Rows(index),ScholarsRow)
            End Get
        End Property
        
        Public Event ScholarsRowChanging As ScholarsRowChangeEventHandler
        
        Public Event ScholarsRowChanged As ScholarsRowChangeEventHandler
        
        Public Event ScholarsRowDeleting As ScholarsRowChangeEventHandler
        
        Public Event ScholarsRowDeleted As ScholarsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddScholarsRow(ByVal row As ScholarsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddScholarsRow(ByVal parentstudeprofileRowByFK_semesterstude_1 As studeprofileRow, ByVal Course As String, ByVal YearLevel As String, ByVal Semester As String, ByVal SY As String, ByVal Scholarship As String, ByVal prevGPA As String, ByVal SchoolName As String, ByVal SchoolAddress As String, ByVal LastName As String, ByVal FirstName As String, ByVal MI As String, ByVal letterHead() As Byte, ByVal Course1 As String) As ScholarsRow
            Dim rowScholarsRow As ScholarsRow = CType(Me.NewRow,ScholarsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Course, YearLevel, Semester, SY, Scholarship, prevGPA, SchoolName, SchoolAddress, LastName, FirstName, MI, letterHead, Course1}
            If (Not (parentstudeprofileRowByFK_semesterstude_1) Is Nothing) Then
                columnValuesArray(0) = parentstudeprofileRowByFK_semesterstude_1(0)
            End If
            rowScholarsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowScholarsRow)
            Return rowScholarsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As ScholarsRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),ScholarsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ScholarsDataTable = CType(MyBase.Clone,ScholarsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ScholarsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnScholarship = MyBase.Columns("Scholarship")
            Me.columnprevGPA = MyBase.Columns("prevGPA")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMI = MyBase.Columns("MI")
            Me.columnletterHead = MyBase.Columns("letterHead")
            Me.columnCourse1 = MyBase.Columns("Course1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnScholarship = New Global.System.Data.DataColumn("Scholarship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScholarship)
            Me.columnprevGPA = New Global.System.Data.DataColumn("prevGPA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprevGPA)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMI = New Global.System.Data.DataColumn("MI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMI)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columnCourse1 = New Global.System.Data.DataColumn("Course1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse1)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnCourse.MaxLength = 250
            Me.columnYearLevel.MaxLength = 45
            Me.columnSemester.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnScholarship.AllowDBNull = false
            Me.columnScholarship.MaxLength = 250
            Me.columnprevGPA.AllowDBNull = false
            Me.columnprevGPA.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnLastName.MaxLength = 60
            Me.columnFirstName.MaxLength = 60
            Me.columnMI.MaxLength = 1
            Me.columnCourse1.MaxLength = 298
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewScholarsRow() As ScholarsRow
            Return CType(Me.NewRow,ScholarsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ScholarsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ScholarsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ScholarsRowChangedEvent) Is Nothing) Then
                RaiseEvent ScholarsRowChanged(Me, New ScholarsRowChangeEvent(CType(e.Row,ScholarsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ScholarsRowChangingEvent) Is Nothing) Then
                RaiseEvent ScholarsRowChanging(Me, New ScholarsRowChangeEvent(CType(e.Row,ScholarsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ScholarsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ScholarsRowDeleted(Me, New ScholarsRowChangeEvent(CType(e.Row,ScholarsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ScholarsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ScholarsRowDeleting(Me, New ScholarsRowChangeEvent(CType(e.Row,ScholarsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveScholarsRow(ByVal row As ScholarsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ScholarsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class expensesDataTable
        Inherits Global.System.Data.TypedTableBase(Of expensesRow)
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnResponsible As Global.System.Data.DataColumn
        
        Private columnCategory As Global.System.Data.DataColumn
        
        Private columnExpenseDate As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "expenses"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResponsibleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResponsible
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExpenseDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpenseDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As expensesRow
            Get
                Return CType(Me.Rows(index),expensesRow)
            End Get
        End Property
        
        Public Event expensesRowChanging As expensesRowChangeEventHandler
        
        Public Event expensesRowChanged As expensesRowChangeEventHandler
        
        Public Event expensesRowDeleting As expensesRowChangeEventHandler
        
        Public Event expensesRowDeleted As expensesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddexpensesRow(ByVal row As expensesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddexpensesRow(ByVal Description As String, ByVal Responsible As String, ByVal Category As String, ByVal ExpenseDate As Date, ByVal Amount As Double) As expensesRow
            Dim rowexpensesRow As expensesRow = CType(Me.NewRow,expensesRow)
            Dim columnValuesArray() As Object = New Object() {Description, Responsible, Category, ExpenseDate, Amount}
            rowexpensesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowexpensesRow)
            Return rowexpensesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As expensesDataTable = CType(MyBase.Clone,expensesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New expensesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnResponsible = MyBase.Columns("Responsible")
            Me.columnCategory = MyBase.Columns("Category")
            Me.columnExpenseDate = MyBase.Columns("ExpenseDate")
            Me.columnAmount = MyBase.Columns("Amount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnResponsible = New Global.System.Data.DataColumn("Responsible", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResponsible)
            Me.columnCategory = New Global.System.Data.DataColumn("Category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategory)
            Me.columnExpenseDate = New Global.System.Data.DataColumn("ExpenseDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpenseDate)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnDescription.MaxLength = 250
            Me.columnResponsible.MaxLength = 150
            Me.columnCategory.AllowDBNull = false
            Me.columnCategory.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewexpensesRow() As expensesRow
            Return CType(Me.NewRow,expensesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New expensesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(expensesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.expensesRowChangedEvent) Is Nothing) Then
                RaiseEvent expensesRowChanged(Me, New expensesRowChangeEvent(CType(e.Row,expensesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.expensesRowChangingEvent) Is Nothing) Then
                RaiseEvent expensesRowChanging(Me, New expensesRowChangeEvent(CType(e.Row,expensesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.expensesRowDeletedEvent) Is Nothing) Then
                RaiseEvent expensesRowDeleted(Me, New expensesRowChangeEvent(CType(e.Row,expensesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.expensesRowDeletingEvent) Is Nothing) Then
                RaiseEvent expensesRowDeleting(Me, New expensesRowChangeEvent(CType(e.Row,expensesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveexpensesRow(ByVal row As expensesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "expensesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class semesterstudeDataTable
        Inherits Global.System.Data.TypedTableBase(Of semesterstudeRow)
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnEnrolledCount As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnStatusCount As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnRegistrar As Global.System.Data.DataColumn
        
        Private columnregistrarPosition As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "semesterstude"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnrolledCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnrolledCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registrarPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistrarPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As semesterstudeRow
            Get
                Return CType(Me.Rows(index),semesterstudeRow)
            End Get
        End Property
        
        Public Event semesterstudeRowChanging As semesterstudeRowChangeEventHandler
        
        Public Event semesterstudeRowChanged As semesterstudeRowChangeEventHandler
        
        Public Event semesterstudeRowDeleting As semesterstudeRowChangeEventHandler
        
        Public Event semesterstudeRowDeleted As semesterstudeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddsemesterstudeRow(ByVal row As semesterstudeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddsemesterstudeRow(ByVal Course As String, ByVal Status As String, ByVal YearLevel As String, ByVal EnrolledCount As Long, ByVal Semester As String, ByVal SY As String, ByVal StatusCount As Long, ByVal SchoolName As String, ByVal SchoolAddress As String, ByVal SchoolHead As String, ByVal sHeadPosition As String, ByVal Registrar As String, ByVal registrarPosition As String, ByVal Sex As String) As semesterstudeRow
            Dim rowsemesterstudeRow As semesterstudeRow = CType(Me.NewRow,semesterstudeRow)
            Dim columnValuesArray() As Object = New Object() {Course, Status, YearLevel, EnrolledCount, Semester, SY, StatusCount, SchoolName, SchoolAddress, SchoolHead, sHeadPosition, Registrar, registrarPosition, Sex}
            rowsemesterstudeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsemesterstudeRow)
            Return rowsemesterstudeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As semesterstudeDataTable = CType(MyBase.Clone,semesterstudeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New semesterstudeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnEnrolledCount = MyBase.Columns("EnrolledCount")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnStatusCount = MyBase.Columns("StatusCount")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnRegistrar = MyBase.Columns("Registrar")
            Me.columnregistrarPosition = MyBase.Columns("registrarPosition")
            Me.columnSex = MyBase.Columns("Sex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnEnrolledCount = New Global.System.Data.DataColumn("EnrolledCount", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnrolledCount)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnStatusCount = New Global.System.Data.DataColumn("StatusCount", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusCount)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnRegistrar = New Global.System.Data.DataColumn("Registrar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrar)
            Me.columnregistrarPosition = New Global.System.Data.DataColumn("registrarPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistrarPosition)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnCourse.MaxLength = 250
            Me.columnStatus.MaxLength = 45
            Me.columnYearLevel.MaxLength = 45
            Me.columnEnrolledCount.AllowDBNull = false
            Me.columnSemester.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnStatusCount.AllowDBNull = false
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnRegistrar.AllowDBNull = false
            Me.columnRegistrar.MaxLength = 65
            Me.columnregistrarPosition.AllowDBNull = false
            Me.columnregistrarPosition.MaxLength = 45
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewsemesterstudeRow() As semesterstudeRow
            Return CType(Me.NewRow,semesterstudeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New semesterstudeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(semesterstudeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.semesterstudeRowChangedEvent) Is Nothing) Then
                RaiseEvent semesterstudeRowChanged(Me, New semesterstudeRowChangeEvent(CType(e.Row,semesterstudeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.semesterstudeRowChangingEvent) Is Nothing) Then
                RaiseEvent semesterstudeRowChanging(Me, New semesterstudeRowChangeEvent(CType(e.Row,semesterstudeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.semesterstudeRowDeletedEvent) Is Nothing) Then
                RaiseEvent semesterstudeRowDeleted(Me, New semesterstudeRowChangeEvent(CType(e.Row,semesterstudeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.semesterstudeRowDeletingEvent) Is Nothing) Then
                RaiseEvent semesterstudeRowDeleting(Me, New semesterstudeRowChangeEvent(CType(e.Row,semesterstudeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovesemesterstudeRow(ByVal row As semesterstudeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "semesterstudeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class studeprofileDataTable
        Inherits Global.System.Data.TypedTableBase(Of studeprofileRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnCivilStatus As Global.System.Data.DataColumn
        
        Private columnBirthPlace As Global.System.Data.DataColumn
        
        Private columnCitizenship As Global.System.Data.DataColumn
        
        Private columnReligion As Global.System.Data.DataColumn
        
        Private columnBloodType As Global.System.Data.DataColumn
        
        Private columnTelNumber As Global.System.Data.DataColumn
        
        Private columnMobileNumber As Global.System.Data.DataColumn
        
        Private columnHighSchool As Global.System.Data.DataColumn
        
        Private columnHSAddress As Global.System.Data.DataColumn
        
        Private columnCollege As Global.System.Data.DataColumn
        
        Private columnCAddress As Global.System.Data.DataColumn
        
        Private columnRequirements As Global.System.Data.DataColumn
        
        Private columnEncoder As Global.System.Data.DataColumn
        
        Private columnBirthDate As Global.System.Data.DataColumn
        
        Private columnAdmissionDate As Global.System.Data.DataColumn
        
        Private columnGraduationDate As Global.System.Data.DataColumn
        
        Private columnGuardian As Global.System.Data.DataColumn
        
        Private columnGuardianContact As Global.System.Data.DataColumn
        
        Private columnGuardianAddress As Global.System.Data.DataColumn
        
        Private columnImagePath As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnElementary As Global.System.Data.DataColumn
        
        Private columnElemAddress As Global.System.Data.DataColumn
        
        Private columnGuardianRelationship As Global.System.Data.DataColumn
        
        Private columnGuardianTelNo As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnFather As Global.System.Data.DataColumn
        
        Private columnFOccupation As Global.System.Data.DataColumn
        
        Private columnMother As Global.System.Data.DataColumn
        
        Private columnMOccupation As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnTitle As Global.System.Data.DataColumn
        
        Private columnPronoun As Global.System.Data.DataColumn
        
        Private columnPronoun2 As Global.System.Data.DataColumn
        
        Private columnPronoun3 As Global.System.Data.DataColumn
        
        Private columnEthnicity As Global.System.Data.DataColumn
        
        Private columnParentsMonthly As Global.System.Data.DataColumn
        
        Private columnProvince As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnBrgy As Global.System.Data.DataColumn
        
        Private columnSitio As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "studeprofile"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CivilStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCivilStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthPlaceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthPlace
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CitizenshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCitizenship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReligionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReligion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BloodTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBloodType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MobileNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMobileNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HighSchoolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHighSchool
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HSAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHSAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CollegeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCollege
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequirementsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequirements
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EncoderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEncoder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdmissionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdmissionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GraduationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGraduationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardianContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardianAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImagePathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImagePath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ElementaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnElementary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ElemAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnElemAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianRelationshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardianRelationship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianTelNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardianTelNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FatherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFather
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMother
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PronounColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPronoun
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pronoun2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPronoun2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pronoun3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPronoun3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EthnicityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEthnicity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParentsMonthlyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParentsMonthly
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvince
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BrgyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBrgy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SitioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSitio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As studeprofileRow
            Get
                Return CType(Me.Rows(index),studeprofileRow)
            End Get
        End Property
        
        Public Event studeprofileRowChanging As studeprofileRowChangeEventHandler
        
        Public Event studeprofileRowChanged As studeprofileRowChangeEventHandler
        
        Public Event studeprofileRowDeleting As studeprofileRowChangeEventHandler
        
        Public Event studeprofileRowDeleted As studeprofileRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddstudeprofileRow(ByVal row As studeprofileRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddstudeprofileRow( _
                    ByVal StudentNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Address As String,  _
                    ByVal Sex As String,  _
                    ByVal CivilStatus As String,  _
                    ByVal BirthPlace As String,  _
                    ByVal Citizenship As String,  _
                    ByVal Religion As String,  _
                    ByVal BloodType As String,  _
                    ByVal TelNumber As String,  _
                    ByVal MobileNumber As String,  _
                    ByVal HighSchool As String,  _
                    ByVal HSAddress As String,  _
                    ByVal College As String,  _
                    ByVal CAddress As String,  _
                    ByVal Requirements As String,  _
                    ByVal Encoder As String,  _
                    ByVal BirthDate As Date,  _
                    ByVal AdmissionDate As Date,  _
                    ByVal GraduationDate As Date,  _
                    ByVal Guardian As String,  _
                    ByVal GuardianContact As String,  _
                    ByVal GuardianAddress As String,  _
                    ByVal ImagePath As String,  _
                    ByVal Course As String,  _
                    ByVal Elementary As String,  _
                    ByVal ElemAddress As String,  _
                    ByVal GuardianRelationship As String,  _
                    ByVal GuardianTelNo As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Father As String,  _
                    ByVal FOccupation As String,  _
                    ByVal Mother As String,  _
                    ByVal MOccupation As String,  _
                    ByVal Age As String,  _
                    ByVal Title As String,  _
                    ByVal Pronoun As String,  _
                    ByVal Pronoun2 As String,  _
                    ByVal Pronoun3 As String,  _
                    ByVal Ethnicity As String,  _
                    ByVal ParentsMonthly As Double,  _
                    ByVal Province As String,  _
                    ByVal City As String,  _
                    ByVal Brgy As String,  _
                    ByVal Sitio As String) As studeprofileRow
            Dim rowstudeprofileRow As studeprofileRow = CType(Me.NewRow,studeprofileRow)
            Dim columnValuesArray() As Object = New Object() {StudentNumber, FirstName, MiddleName, LastName, Address, Sex, CivilStatus, BirthPlace, Citizenship, Religion, BloodType, TelNumber, MobileNumber, HighSchool, HSAddress, College, CAddress, Requirements, Encoder, BirthDate, AdmissionDate, GraduationDate, Guardian, GuardianContact, GuardianAddress, ImagePath, Course, Elementary, ElemAddress, GuardianRelationship, GuardianTelNo, EmailAddress, Father, FOccupation, Mother, MOccupation, Age, Title, Pronoun, Pronoun2, Pronoun3, Ethnicity, ParentsMonthly, Province, City, Brgy, Sitio}
            rowstudeprofileRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowstudeprofileRow)
            Return rowstudeprofileRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As studeprofileRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),studeprofileRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As studeprofileDataTable = CType(MyBase.Clone,studeprofileDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New studeprofileDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnCivilStatus = MyBase.Columns("CivilStatus")
            Me.columnBirthPlace = MyBase.Columns("BirthPlace")
            Me.columnCitizenship = MyBase.Columns("Citizenship")
            Me.columnReligion = MyBase.Columns("Religion")
            Me.columnBloodType = MyBase.Columns("BloodType")
            Me.columnTelNumber = MyBase.Columns("TelNumber")
            Me.columnMobileNumber = MyBase.Columns("MobileNumber")
            Me.columnHighSchool = MyBase.Columns("HighSchool")
            Me.columnHSAddress = MyBase.Columns("HSAddress")
            Me.columnCollege = MyBase.Columns("College")
            Me.columnCAddress = MyBase.Columns("CAddress")
            Me.columnRequirements = MyBase.Columns("Requirements")
            Me.columnEncoder = MyBase.Columns("Encoder")
            Me.columnBirthDate = MyBase.Columns("BirthDate")
            Me.columnAdmissionDate = MyBase.Columns("AdmissionDate")
            Me.columnGraduationDate = MyBase.Columns("GraduationDate")
            Me.columnGuardian = MyBase.Columns("Guardian")
            Me.columnGuardianContact = MyBase.Columns("GuardianContact")
            Me.columnGuardianAddress = MyBase.Columns("GuardianAddress")
            Me.columnImagePath = MyBase.Columns("ImagePath")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnElementary = MyBase.Columns("Elementary")
            Me.columnElemAddress = MyBase.Columns("ElemAddress")
            Me.columnGuardianRelationship = MyBase.Columns("GuardianRelationship")
            Me.columnGuardianTelNo = MyBase.Columns("GuardianTelNo")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnFather = MyBase.Columns("Father")
            Me.columnFOccupation = MyBase.Columns("FOccupation")
            Me.columnMother = MyBase.Columns("Mother")
            Me.columnMOccupation = MyBase.Columns("MOccupation")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnPronoun = MyBase.Columns("Pronoun")
            Me.columnPronoun2 = MyBase.Columns("Pronoun2")
            Me.columnPronoun3 = MyBase.Columns("Pronoun3")
            Me.columnEthnicity = MyBase.Columns("Ethnicity")
            Me.columnParentsMonthly = MyBase.Columns("ParentsMonthly")
            Me.columnProvince = MyBase.Columns("Province")
            Me.columnCity = MyBase.Columns("City")
            Me.columnBrgy = MyBase.Columns("Brgy")
            Me.columnSitio = MyBase.Columns("Sitio")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnCivilStatus = New Global.System.Data.DataColumn("CivilStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCivilStatus)
            Me.columnBirthPlace = New Global.System.Data.DataColumn("BirthPlace", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthPlace)
            Me.columnCitizenship = New Global.System.Data.DataColumn("Citizenship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCitizenship)
            Me.columnReligion = New Global.System.Data.DataColumn("Religion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReligion)
            Me.columnBloodType = New Global.System.Data.DataColumn("BloodType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBloodType)
            Me.columnTelNumber = New Global.System.Data.DataColumn("TelNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelNumber)
            Me.columnMobileNumber = New Global.System.Data.DataColumn("MobileNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMobileNumber)
            Me.columnHighSchool = New Global.System.Data.DataColumn("HighSchool", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHighSchool)
            Me.columnHSAddress = New Global.System.Data.DataColumn("HSAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHSAddress)
            Me.columnCollege = New Global.System.Data.DataColumn("College", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCollege)
            Me.columnCAddress = New Global.System.Data.DataColumn("CAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAddress)
            Me.columnRequirements = New Global.System.Data.DataColumn("Requirements", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequirements)
            Me.columnEncoder = New Global.System.Data.DataColumn("Encoder", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEncoder)
            Me.columnBirthDate = New Global.System.Data.DataColumn("BirthDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDate)
            Me.columnAdmissionDate = New Global.System.Data.DataColumn("AdmissionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdmissionDate)
            Me.columnGraduationDate = New Global.System.Data.DataColumn("GraduationDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGraduationDate)
            Me.columnGuardian = New Global.System.Data.DataColumn("Guardian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardian)
            Me.columnGuardianContact = New Global.System.Data.DataColumn("GuardianContact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardianContact)
            Me.columnGuardianAddress = New Global.System.Data.DataColumn("GuardianAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardianAddress)
            Me.columnImagePath = New Global.System.Data.DataColumn("ImagePath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImagePath)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnElementary = New Global.System.Data.DataColumn("Elementary", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnElementary)
            Me.columnElemAddress = New Global.System.Data.DataColumn("ElemAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnElemAddress)
            Me.columnGuardianRelationship = New Global.System.Data.DataColumn("GuardianRelationship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardianRelationship)
            Me.columnGuardianTelNo = New Global.System.Data.DataColumn("GuardianTelNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardianTelNo)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnFather = New Global.System.Data.DataColumn("Father", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFather)
            Me.columnFOccupation = New Global.System.Data.DataColumn("FOccupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOccupation)
            Me.columnMother = New Global.System.Data.DataColumn("Mother", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMother)
            Me.columnMOccupation = New Global.System.Data.DataColumn("MOccupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOccupation)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnPronoun = New Global.System.Data.DataColumn("Pronoun", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPronoun)
            Me.columnPronoun2 = New Global.System.Data.DataColumn("Pronoun2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPronoun2)
            Me.columnPronoun3 = New Global.System.Data.DataColumn("Pronoun3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPronoun3)
            Me.columnEthnicity = New Global.System.Data.DataColumn("Ethnicity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEthnicity)
            Me.columnParentsMonthly = New Global.System.Data.DataColumn("ParentsMonthly", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParentsMonthly)
            Me.columnProvince = New Global.System.Data.DataColumn("Province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvince)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnBrgy = New Global.System.Data.DataColumn("Brgy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBrgy)
            Me.columnSitio = New Global.System.Data.DataColumn("Sitio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSitio)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnFirstName.MaxLength = 60
            Me.columnMiddleName.MaxLength = 60
            Me.columnLastName.MaxLength = 60
            Me.columnAddress.MaxLength = 250
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 45
            Me.columnCivilStatus.AllowDBNull = false
            Me.columnCivilStatus.MaxLength = 45
            Me.columnBirthPlace.AllowDBNull = false
            Me.columnBirthPlace.MaxLength = 250
            Me.columnCitizenship.AllowDBNull = false
            Me.columnCitizenship.MaxLength = 45
            Me.columnReligion.AllowDBNull = false
            Me.columnReligion.MaxLength = 100
            Me.columnBloodType.AllowDBNull = false
            Me.columnBloodType.MaxLength = 45
            Me.columnTelNumber.AllowDBNull = false
            Me.columnTelNumber.MaxLength = 45
            Me.columnMobileNumber.AllowDBNull = false
            Me.columnMobileNumber.MaxLength = 45
            Me.columnHighSchool.AllowDBNull = false
            Me.columnHighSchool.MaxLength = 150
            Me.columnHSAddress.AllowDBNull = false
            Me.columnHSAddress.MaxLength = 150
            Me.columnCollege.AllowDBNull = false
            Me.columnCollege.MaxLength = 150
            Me.columnCAddress.AllowDBNull = false
            Me.columnCAddress.MaxLength = 150
            Me.columnRequirements.AllowDBNull = false
            Me.columnRequirements.MaxLength = 65535
            Me.columnEncoder.AllowDBNull = false
            Me.columnEncoder.MaxLength = 100
            Me.columnBirthDate.AllowDBNull = false
            Me.columnAdmissionDate.AllowDBNull = false
            Me.columnGraduationDate.AllowDBNull = false
            Me.columnGuardian.AllowDBNull = false
            Me.columnGuardian.MaxLength = 150
            Me.columnGuardianContact.AllowDBNull = false
            Me.columnGuardianContact.MaxLength = 45
            Me.columnGuardianAddress.AllowDBNull = false
            Me.columnGuardianAddress.MaxLength = 250
            Me.columnImagePath.AllowDBNull = false
            Me.columnImagePath.MaxLength = 200
            Me.columnCourse.AllowDBNull = false
            Me.columnCourse.MaxLength = 250
            Me.columnElementary.AllowDBNull = false
            Me.columnElementary.MaxLength = 150
            Me.columnElemAddress.AllowDBNull = false
            Me.columnElemAddress.MaxLength = 150
            Me.columnGuardianRelationship.AllowDBNull = false
            Me.columnGuardianRelationship.MaxLength = 65
            Me.columnGuardianTelNo.AllowDBNull = false
            Me.columnGuardianTelNo.MaxLength = 45
            Me.columnEmailAddress.AllowDBNull = false
            Me.columnEmailAddress.MaxLength = 65
            Me.columnFather.AllowDBNull = false
            Me.columnFather.MaxLength = 65
            Me.columnFOccupation.AllowDBNull = false
            Me.columnFOccupation.MaxLength = 65
            Me.columnMother.AllowDBNull = false
            Me.columnMother.MaxLength = 65
            Me.columnMOccupation.AllowDBNull = false
            Me.columnMOccupation.MaxLength = 65
            Me.columnAge.AllowDBNull = false
            Me.columnAge.MaxLength = 2
            Me.columnTitle.AllowDBNull = false
            Me.columnTitle.MaxLength = 45
            Me.columnPronoun.AllowDBNull = false
            Me.columnPronoun.MaxLength = 45
            Me.columnPronoun2.AllowDBNull = false
            Me.columnPronoun2.MaxLength = 45
            Me.columnPronoun3.AllowDBNull = false
            Me.columnPronoun3.MaxLength = 45
            Me.columnEthnicity.AllowDBNull = false
            Me.columnEthnicity.MaxLength = 100
            Me.columnParentsMonthly.AllowDBNull = false
            Me.columnProvince.AllowDBNull = false
            Me.columnProvince.MaxLength = 65
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 65
            Me.columnBrgy.AllowDBNull = false
            Me.columnBrgy.MaxLength = 65
            Me.columnSitio.AllowDBNull = false
            Me.columnSitio.MaxLength = 65
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewstudeprofileRow() As studeprofileRow
            Return CType(Me.NewRow,studeprofileRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New studeprofileRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(studeprofileRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.studeprofileRowChangedEvent) Is Nothing) Then
                RaiseEvent studeprofileRowChanged(Me, New studeprofileRowChangeEvent(CType(e.Row,studeprofileRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.studeprofileRowChangingEvent) Is Nothing) Then
                RaiseEvent studeprofileRowChanging(Me, New studeprofileRowChangeEvent(CType(e.Row,studeprofileRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.studeprofileRowDeletedEvent) Is Nothing) Then
                RaiseEvent studeprofileRowDeleted(Me, New studeprofileRowChangeEvent(CType(e.Row,studeprofileRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.studeprofileRowDeletingEvent) Is Nothing) Then
                RaiseEvent studeprofileRowDeleting(Me, New studeprofileRowChangeEvent(CType(e.Row,studeprofileRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovestudeprofileRow(ByVal row As studeprofileRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "studeprofileDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class incomestatementDataTable
        Inherits Global.System.Data.TypedTableBase(Of incomestatementRow)
        
        Private columnisID As Global.System.Data.DataColumn
        
        Private columnDateFrom As Global.System.Data.DataColumn
        
        Private columnDateTo As Global.System.Data.DataColumn
        
        Private columnStudeAccts As Global.System.Data.DataColumn
        
        Private columnServices As Global.System.Data.DataColumn
        
        Private columnExpenses As Global.System.Data.DataColumn
        
        Private columnNetIncome As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "incomestatement"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudeAcctsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudeAccts
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ServicesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnServices
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExpensesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpenses
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NetIncomeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNetIncome
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As incomestatementRow
            Get
                Return CType(Me.Rows(index),incomestatementRow)
            End Get
        End Property
        
        Public Event incomestatementRowChanging As incomestatementRowChangeEventHandler
        
        Public Event incomestatementRowChanged As incomestatementRowChangeEventHandler
        
        Public Event incomestatementRowDeleting As incomestatementRowChangeEventHandler
        
        Public Event incomestatementRowDeleted As incomestatementRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddincomestatementRow(ByVal row As incomestatementRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddincomestatementRow(ByVal isID As UInteger, ByVal DateFrom As Date, ByVal DateTo As Date, ByVal StudeAccts As Double, ByVal Services As Double, ByVal Expenses As Double, ByVal NetIncome As Double) As incomestatementRow
            Dim rowincomestatementRow As incomestatementRow = CType(Me.NewRow,incomestatementRow)
            Dim columnValuesArray() As Object = New Object() {isID, DateFrom, DateTo, StudeAccts, Services, Expenses, NetIncome}
            rowincomestatementRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowincomestatementRow)
            Return rowincomestatementRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByisID(ByVal isID As UInteger) As incomestatementRow
            Return CType(Me.Rows.Find(New Object() {isID}),incomestatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As incomestatementDataTable = CType(MyBase.Clone,incomestatementDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New incomestatementDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnisID = MyBase.Columns("isID")
            Me.columnDateFrom = MyBase.Columns("DateFrom")
            Me.columnDateTo = MyBase.Columns("DateTo")
            Me.columnStudeAccts = MyBase.Columns("StudeAccts")
            Me.columnServices = MyBase.Columns("Services")
            Me.columnExpenses = MyBase.Columns("Expenses")
            Me.columnNetIncome = MyBase.Columns("NetIncome")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnisID = New Global.System.Data.DataColumn("isID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisID)
            Me.columnDateFrom = New Global.System.Data.DataColumn("DateFrom", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFrom)
            Me.columnDateTo = New Global.System.Data.DataColumn("DateTo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateTo)
            Me.columnStudeAccts = New Global.System.Data.DataColumn("StudeAccts", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudeAccts)
            Me.columnServices = New Global.System.Data.DataColumn("Services", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnServices)
            Me.columnExpenses = New Global.System.Data.DataColumn("Expenses", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpenses)
            Me.columnNetIncome = New Global.System.Data.DataColumn("NetIncome", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNetIncome)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnisID}, true))
            Me.columnisID.AllowDBNull = false
            Me.columnisID.Unique = true
            Me.columnDateFrom.AllowDBNull = false
            Me.columnDateTo.AllowDBNull = false
            Me.columnStudeAccts.AllowDBNull = false
            Me.columnServices.AllowDBNull = false
            Me.columnExpenses.AllowDBNull = false
            Me.columnNetIncome.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewincomestatementRow() As incomestatementRow
            Return CType(Me.NewRow,incomestatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New incomestatementRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(incomestatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.incomestatementRowChangedEvent) Is Nothing) Then
                RaiseEvent incomestatementRowChanged(Me, New incomestatementRowChangeEvent(CType(e.Row,incomestatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.incomestatementRowChangingEvent) Is Nothing) Then
                RaiseEvent incomestatementRowChanging(Me, New incomestatementRowChangeEvent(CType(e.Row,incomestatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.incomestatementRowDeletedEvent) Is Nothing) Then
                RaiseEvent incomestatementRowDeleted(Me, New incomestatementRowChangeEvent(CType(e.Row,incomestatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.incomestatementRowDeletingEvent) Is Nothing) Then
                RaiseEvent incomestatementRowDeleting(Me, New incomestatementRowChangeEvent(CType(e.Row,incomestatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveincomestatementRow(ByVal row As incomestatementRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "incomestatementDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class promissoryNotesDataTable
        Inherits Global.System.Data.TypedTableBase(Of promissoryNotesRow)
        
        Private columnpromissoryID As Global.System.Data.DataColumn
        
        Private columnDateApplied As Global.System.Data.DataColumn
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnGuardian As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnPromisedDate As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnSem As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "promissoryNotes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property promissoryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpromissoryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateAppliedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateApplied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PromisedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPromisedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As promissoryNotesRow
            Get
                Return CType(Me.Rows(index),promissoryNotesRow)
            End Get
        End Property
        
        Public Event promissoryNotesRowChanging As promissoryNotesRowChangeEventHandler
        
        Public Event promissoryNotesRowChanged As promissoryNotesRowChangeEventHandler
        
        Public Event promissoryNotesRowDeleting As promissoryNotesRowChangeEventHandler
        
        Public Event promissoryNotesRowDeleted As promissoryNotesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddpromissoryNotesRow(ByVal row As promissoryNotesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddpromissoryNotesRow(ByVal promissoryID As UInteger, ByVal DateApplied As Date, ByVal parentstudeprofileRowByfk_promissory_1 As studeprofileRow, ByVal Name As String, ByVal Guardian As String, ByVal Amount As Double, ByVal PromisedDate As Date, ByVal Status As String, ByVal Sem As String, ByVal SY As String) As promissoryNotesRow
            Dim rowpromissoryNotesRow As promissoryNotesRow = CType(Me.NewRow,promissoryNotesRow)
            Dim columnValuesArray() As Object = New Object() {promissoryID, DateApplied, Nothing, Name, Guardian, Amount, PromisedDate, Status, Sem, SY}
            If (Not (parentstudeprofileRowByfk_promissory_1) Is Nothing) Then
                columnValuesArray(2) = parentstudeprofileRowByfk_promissory_1(0)
            End If
            rowpromissoryNotesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpromissoryNotesRow)
            Return rowpromissoryNotesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypromissoryID(ByVal promissoryID As UInteger) As promissoryNotesRow
            Return CType(Me.Rows.Find(New Object() {promissoryID}),promissoryNotesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As promissoryNotesDataTable = CType(MyBase.Clone,promissoryNotesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New promissoryNotesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpromissoryID = MyBase.Columns("promissoryID")
            Me.columnDateApplied = MyBase.Columns("DateApplied")
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnName = MyBase.Columns("Name")
            Me.columnGuardian = MyBase.Columns("Guardian")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnPromisedDate = MyBase.Columns("PromisedDate")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnSem = MyBase.Columns("Sem")
            Me.columnSY = MyBase.Columns("SY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpromissoryID = New Global.System.Data.DataColumn("promissoryID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpromissoryID)
            Me.columnDateApplied = New Global.System.Data.DataColumn("DateApplied", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateApplied)
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnGuardian = New Global.System.Data.DataColumn("Guardian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardian)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnPromisedDate = New Global.System.Data.DataColumn("PromisedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPromisedDate)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnSem = New Global.System.Data.DataColumn("Sem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSem)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpromissoryID}, true))
            Me.columnpromissoryID.AllowDBNull = false
            Me.columnpromissoryID.Unique = true
            Me.columnDateApplied.AllowDBNull = false
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.MaxLength = 45
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 92
            Me.columnGuardian.AllowDBNull = false
            Me.columnGuardian.MaxLength = 150
            Me.columnAmount.AllowDBNull = false
            Me.columnPromisedDate.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.MaxLength = 45
            Me.columnSem.AllowDBNull = false
            Me.columnSem.MaxLength = 45
            Me.columnSY.AllowDBNull = false
            Me.columnSY.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewpromissoryNotesRow() As promissoryNotesRow
            Return CType(Me.NewRow,promissoryNotesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New promissoryNotesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(promissoryNotesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.promissoryNotesRowChangedEvent) Is Nothing) Then
                RaiseEvent promissoryNotesRowChanged(Me, New promissoryNotesRowChangeEvent(CType(e.Row,promissoryNotesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.promissoryNotesRowChangingEvent) Is Nothing) Then
                RaiseEvent promissoryNotesRowChanging(Me, New promissoryNotesRowChangeEvent(CType(e.Row,promissoryNotesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.promissoryNotesRowDeletedEvent) Is Nothing) Then
                RaiseEvent promissoryNotesRowDeleted(Me, New promissoryNotesRowChangeEvent(CType(e.Row,promissoryNotesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.promissoryNotesRowDeletingEvent) Is Nothing) Then
                RaiseEvent promissoryNotesRowDeleting(Me, New promissoryNotesRowChangeEvent(CType(e.Row,promissoryNotesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovepromissoryNotesRow(ByVal row As promissoryNotesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "promissoryNotesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class companyDataTable
        Inherits Global.System.Data.TypedTableBase(Of companyRow)
        
        Private columncompID As Global.System.Data.DataColumn
        
        Private columnCompany As Global.System.Data.DataColumn
        
        Private columnAddress1 As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnTelNo As Global.System.Data.DataColumn
        
        Private columnWebsite As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "company"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property compIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncompID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WebsiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWebsite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As companyRow
            Get
                Return CType(Me.Rows(index),companyRow)
            End Get
        End Property
        
        Public Event companyRowChanging As companyRowChangeEventHandler
        
        Public Event companyRowChanged As companyRowChangeEventHandler
        
        Public Event companyRowDeleting As companyRowChangeEventHandler
        
        Public Event companyRowDeleted As companyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddcompanyRow(ByVal row As companyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddcompanyRow(ByVal compID As UInteger, ByVal Company As String, ByVal Address1 As String, ByVal Address2 As String, ByVal TelNo As String, ByVal Website As String, ByVal Email As String) As companyRow
            Dim rowcompanyRow As companyRow = CType(Me.NewRow,companyRow)
            Dim columnValuesArray() As Object = New Object() {compID, Company, Address1, Address2, TelNo, Website, Email}
            rowcompanyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcompanyRow)
            Return rowcompanyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycompID(ByVal compID As UInteger) As companyRow
            Return CType(Me.Rows.Find(New Object() {compID}),companyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As companyDataTable = CType(MyBase.Clone,companyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New companyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncompID = MyBase.Columns("compID")
            Me.columnCompany = MyBase.Columns("Company")
            Me.columnAddress1 = MyBase.Columns("Address1")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnTelNo = MyBase.Columns("TelNo")
            Me.columnWebsite = MyBase.Columns("Website")
            Me.columnEmail = MyBase.Columns("Email")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncompID = New Global.System.Data.DataColumn("compID", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncompID)
            Me.columnCompany = New Global.System.Data.DataColumn("Company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompany)
            Me.columnAddress1 = New Global.System.Data.DataColumn("Address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnTelNo = New Global.System.Data.DataColumn("TelNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelNo)
            Me.columnWebsite = New Global.System.Data.DataColumn("Website", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWebsite)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncompID}, true))
            Me.columncompID.AllowDBNull = false
            Me.columncompID.Unique = true
            Me.columnCompany.AllowDBNull = false
            Me.columnCompany.MaxLength = 200
            Me.columnAddress1.AllowDBNull = false
            Me.columnAddress1.MaxLength = 60
            Me.columnAddress2.AllowDBNull = false
            Me.columnAddress2.MaxLength = 60
            Me.columnTelNo.AllowDBNull = false
            Me.columnTelNo.MaxLength = 45
            Me.columnWebsite.AllowDBNull = false
            Me.columnWebsite.MaxLength = 45
            Me.columnEmail.AllowDBNull = false
            Me.columnEmail.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewcompanyRow() As companyRow
            Return CType(Me.NewRow,companyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New companyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(companyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.companyRowChangedEvent) Is Nothing) Then
                RaiseEvent companyRowChanged(Me, New companyRowChangeEvent(CType(e.Row,companyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.companyRowChangingEvent) Is Nothing) Then
                RaiseEvent companyRowChanging(Me, New companyRowChangeEvent(CType(e.Row,companyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.companyRowDeletedEvent) Is Nothing) Then
                RaiseEvent companyRowDeleted(Me, New companyRowChangeEvent(CType(e.Row,companyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.companyRowDeletingEvent) Is Nothing) Then
                RaiseEvent companyRowDeleting(Me, New companyRowChangeEvent(CType(e.Row,companyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovecompanyRow(ByVal row As companyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "companyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SchedulesDataTable
        Inherits Global.System.Data.TypedTableBase(Of SchedulesRow)
        
        Private columnsubjectid As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnLecUnit As Global.System.Data.DataColumn
        
        Private columnLabUnit As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnLabTime As Global.System.Data.DataColumn
        
        Private columnSchedTime As Global.System.Data.DataColumn
        
        Private columnRoom As Global.System.Data.DataColumn
        
        Private columnSlot As Global.System.Data.DataColumn
        
        Private columnIDNumber As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnInstructor As Global.System.Data.DataColumn
        
        Private columnTime1 As Global.System.Data.DataColumn
        
        Private columnAM1 As Global.System.Data.DataColumn
        
        Private columnTime2 As Global.System.Data.DataColumn
        
        Private columnAM2 As Global.System.Data.DataColumn
        
        Private columnTime3 As Global.System.Data.DataColumn
        
        Private columnAM3 As Global.System.Data.DataColumn
        
        Private columnTime4 As Global.System.Data.DataColumn
        
        Private columnAM4 As Global.System.Data.DataColumn
        
        Private columnDays1 As Global.System.Data.DataColumn
        
        Private columnDays2 As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnSubjectStatus As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Schedules"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LecUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLecUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchedTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchedTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RoomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRoom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SlotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSlot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InstructorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInstructor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Time1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTime1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AM1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAM1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Time2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTime2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AM2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAM2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Time3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTime3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AM3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAM3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Time4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTime4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AM4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAM4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Days1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDays1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Days2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDays2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SchedulesRow
            Get
                Return CType(Me.Rows(index),SchedulesRow)
            End Get
        End Property
        
        Public Event SchedulesRowChanging As SchedulesRowChangeEventHandler
        
        Public Event SchedulesRowChanged As SchedulesRowChangeEventHandler
        
        Public Event SchedulesRowDeleting As SchedulesRowChangeEventHandler
        
        Public Event SchedulesRowDeleted As SchedulesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSchedulesRow(ByVal row As SchedulesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSchedulesRow( _
                    ByVal subjectid As UInteger,  _
                    ByVal SubjectCode As String,  _
                    ByVal Description As String,  _
                    ByVal LecUnit As String,  _
                    ByVal LabUnit As String,  _
                    ByVal Section As String,  _
                    ByVal LabTime As String,  _
                    ByVal SchedTime As String,  _
                    ByVal Room As String,  _
                    ByVal Slot As String,  _
                    ByVal IDNumber As String,  _
                    ByVal SY As String,  _
                    ByVal Semester As String,  _
                    ByVal Instructor As String,  _
                    ByVal Time1 As String,  _
                    ByVal AM1 As String,  _
                    ByVal Time2 As String,  _
                    ByVal AM2 As String,  _
                    ByVal Time3 As String,  _
                    ByVal AM3 As String,  _
                    ByVal Time4 As String,  _
                    ByVal AM4 As String,  _
                    ByVal Days1 As String,  _
                    ByVal Days2 As String,  _
                    ByVal Course As String,  _
                    ByVal YearLevel As String,  _
                    ByVal SubjectStatus As String) As SchedulesRow
            Dim rowSchedulesRow As SchedulesRow = CType(Me.NewRow,SchedulesRow)
            Dim columnValuesArray() As Object = New Object() {subjectid, SubjectCode, Description, LecUnit, LabUnit, Section, LabTime, SchedTime, Room, Slot, IDNumber, SY, Semester, Instructor, Time1, AM1, Time2, AM2, Time3, AM3, Time4, AM4, Days1, Days2, Course, YearLevel, SubjectStatus}
            rowSchedulesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSchedulesRow)
            Return rowSchedulesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysubjectid(ByVal subjectid As UInteger) As SchedulesRow
            Return CType(Me.Rows.Find(New Object() {subjectid}),SchedulesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SchedulesDataTable = CType(MyBase.Clone,SchedulesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SchedulesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsubjectid = MyBase.Columns("subjectid")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnLecUnit = MyBase.Columns("LecUnit")
            Me.columnLabUnit = MyBase.Columns("LabUnit")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnLabTime = MyBase.Columns("LabTime")
            Me.columnSchedTime = MyBase.Columns("SchedTime")
            Me.columnRoom = MyBase.Columns("Room")
            Me.columnSlot = MyBase.Columns("Slot")
            Me.columnIDNumber = MyBase.Columns("IDNumber")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnInstructor = MyBase.Columns("Instructor")
            Me.columnTime1 = MyBase.Columns("Time1")
            Me.columnAM1 = MyBase.Columns("AM1")
            Me.columnTime2 = MyBase.Columns("Time2")
            Me.columnAM2 = MyBase.Columns("AM2")
            Me.columnTime3 = MyBase.Columns("Time3")
            Me.columnAM3 = MyBase.Columns("AM3")
            Me.columnTime4 = MyBase.Columns("Time4")
            Me.columnAM4 = MyBase.Columns("AM4")
            Me.columnDays1 = MyBase.Columns("Days1")
            Me.columnDays2 = MyBase.Columns("Days2")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnSubjectStatus = MyBase.Columns("SubjectStatus")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsubjectid = New Global.System.Data.DataColumn("subjectid", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectid)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnLecUnit = New Global.System.Data.DataColumn("LecUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLecUnit)
            Me.columnLabUnit = New Global.System.Data.DataColumn("LabUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabUnit)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnLabTime = New Global.System.Data.DataColumn("LabTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabTime)
            Me.columnSchedTime = New Global.System.Data.DataColumn("SchedTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchedTime)
            Me.columnRoom = New Global.System.Data.DataColumn("Room", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRoom)
            Me.columnSlot = New Global.System.Data.DataColumn("Slot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSlot)
            Me.columnIDNumber = New Global.System.Data.DataColumn("IDNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDNumber)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnInstructor = New Global.System.Data.DataColumn("Instructor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstructor)
            Me.columnTime1 = New Global.System.Data.DataColumn("Time1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTime1)
            Me.columnAM1 = New Global.System.Data.DataColumn("AM1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAM1)
            Me.columnTime2 = New Global.System.Data.DataColumn("Time2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTime2)
            Me.columnAM2 = New Global.System.Data.DataColumn("AM2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAM2)
            Me.columnTime3 = New Global.System.Data.DataColumn("Time3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTime3)
            Me.columnAM3 = New Global.System.Data.DataColumn("AM3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAM3)
            Me.columnTime4 = New Global.System.Data.DataColumn("Time4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTime4)
            Me.columnAM4 = New Global.System.Data.DataColumn("AM4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAM4)
            Me.columnDays1 = New Global.System.Data.DataColumn("Days1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDays1)
            Me.columnDays2 = New Global.System.Data.DataColumn("Days2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDays2)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnSubjectStatus = New Global.System.Data.DataColumn("SubjectStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectStatus)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsubjectid}, true))
            Me.columnsubjectid.AllowDBNull = false
            Me.columnsubjectid.Unique = true
            Me.columnSubjectCode.AllowDBNull = false
            Me.columnSubjectCode.MaxLength = 45
            Me.columnDescription.MaxLength = 250
            Me.columnLecUnit.MaxLength = 45
            Me.columnLabUnit.MaxLength = 45
            Me.columnSection.MaxLength = 45
            Me.columnLabTime.MaxLength = 45
            Me.columnSchedTime.MaxLength = 45
            Me.columnRoom.MaxLength = 45
            Me.columnSlot.MaxLength = 45
            Me.columnIDNumber.AllowDBNull = false
            Me.columnIDNumber.MaxLength = 25
            Me.columnSY.MaxLength = 45
            Me.columnSemester.MaxLength = 45
            Me.columnInstructor.MaxLength = 150
            Me.columnTime1.AllowDBNull = false
            Me.columnTime1.MaxLength = 45
            Me.columnAM1.AllowDBNull = false
            Me.columnAM1.MaxLength = 45
            Me.columnTime2.AllowDBNull = false
            Me.columnTime2.MaxLength = 45
            Me.columnAM2.AllowDBNull = false
            Me.columnAM2.MaxLength = 45
            Me.columnTime3.AllowDBNull = false
            Me.columnTime3.MaxLength = 45
            Me.columnAM3.AllowDBNull = false
            Me.columnAM3.MaxLength = 45
            Me.columnTime4.AllowDBNull = false
            Me.columnTime4.MaxLength = 45
            Me.columnAM4.AllowDBNull = false
            Me.columnAM4.MaxLength = 45
            Me.columnDays1.AllowDBNull = false
            Me.columnDays1.MaxLength = 45
            Me.columnDays2.AllowDBNull = false
            Me.columnDays2.MaxLength = 45
            Me.columnCourse.AllowDBNull = false
            Me.columnCourse.MaxLength = 65
            Me.columnYearLevel.AllowDBNull = false
            Me.columnYearLevel.MaxLength = 45
            Me.columnSubjectStatus.AllowDBNull = false
            Me.columnSubjectStatus.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSchedulesRow() As SchedulesRow
            Return CType(Me.NewRow,SchedulesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SchedulesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SchedulesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SchedulesRowChangedEvent) Is Nothing) Then
                RaiseEvent SchedulesRowChanged(Me, New SchedulesRowChangeEvent(CType(e.Row,SchedulesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SchedulesRowChangingEvent) Is Nothing) Then
                RaiseEvent SchedulesRowChanging(Me, New SchedulesRowChangeEvent(CType(e.Row,SchedulesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SchedulesRowDeletedEvent) Is Nothing) Then
                RaiseEvent SchedulesRowDeleted(Me, New SchedulesRowChangeEvent(CType(e.Row,SchedulesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SchedulesRowDeletingEvent) Is Nothing) Then
                RaiseEvent SchedulesRowDeleting(Me, New SchedulesRowChangeEvent(CType(e.Row,SchedulesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSchedulesRow(ByVal row As SchedulesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SchedulesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClearanceDataTable
        Inherits Global.System.Data.TypedTableBase(Of ClearanceRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnFullname As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnLecUnit As Global.System.Data.DataColumn
        
        Private columnLabUnit As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnSchedTime As Global.System.Data.DataColumn
        
        Private columnLabTime As Global.System.Data.DataColumn
        
        Private columnRoom As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSemester1 As Global.System.Data.DataColumn
        
        Private columnSY1 As Global.System.Data.DataColumn
        
        Private columnInstructor As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Clearance"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FullnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFullname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LecUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLecUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchedTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchedTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RoomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRoom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Semester1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SY1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InstructorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInstructor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClearanceRow
            Get
                Return CType(Me.Rows(index),ClearanceRow)
            End Get
        End Property
        
        Public Event ClearanceRowChanging As ClearanceRowChangeEventHandler
        
        Public Event ClearanceRowChanged As ClearanceRowChangeEventHandler
        
        Public Event ClearanceRowDeleting As ClearanceRowChangeEventHandler
        
        Public Event ClearanceRowDeleted As ClearanceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddClearanceRow(ByVal row As ClearanceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddClearanceRow( _
                    ByVal parentstudeprofileRowByfk_registration_1 As studeprofileRow,  _
                    ByVal Fullname As String,  _
                    ByVal Course As String,  _
                    ByVal YearLevel As String,  _
                    ByVal SubjectCode As String,  _
                    ByVal Description As String,  _
                    ByVal LecUnit As String,  _
                    ByVal LabUnit As String,  _
                    ByVal Section As String,  _
                    ByVal SchedTime As String,  _
                    ByVal LabTime As String,  _
                    ByVal Room As String,  _
                    ByVal Semester As String,  _
                    ByVal SY As String,  _
                    ByVal Semester1 As String,  _
                    ByVal SY1 As String,  _
                    ByVal Instructor As String) As ClearanceRow
            Dim rowClearanceRow As ClearanceRow = CType(Me.NewRow,ClearanceRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Fullname, Course, YearLevel, SubjectCode, Description, LecUnit, LabUnit, Section, SchedTime, LabTime, Room, Semester, SY, Semester1, SY1, Instructor}
            If (Not (parentstudeprofileRowByfk_registration_1) Is Nothing) Then
                columnValuesArray(0) = parentstudeprofileRowByfk_registration_1(0)
            End If
            rowClearanceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowClearanceRow)
            Return rowClearanceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ClearanceDataTable = CType(MyBase.Clone,ClearanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ClearanceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnFullname = MyBase.Columns("Fullname")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnLecUnit = MyBase.Columns("LecUnit")
            Me.columnLabUnit = MyBase.Columns("LabUnit")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnSchedTime = MyBase.Columns("SchedTime")
            Me.columnLabTime = MyBase.Columns("LabTime")
            Me.columnRoom = MyBase.Columns("Room")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSemester1 = MyBase.Columns("Semester1")
            Me.columnSY1 = MyBase.Columns("SY1")
            Me.columnInstructor = MyBase.Columns("Instructor")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnFullname = New Global.System.Data.DataColumn("Fullname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFullname)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnLecUnit = New Global.System.Data.DataColumn("LecUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLecUnit)
            Me.columnLabUnit = New Global.System.Data.DataColumn("LabUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabUnit)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnSchedTime = New Global.System.Data.DataColumn("SchedTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchedTime)
            Me.columnLabTime = New Global.System.Data.DataColumn("LabTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabTime)
            Me.columnRoom = New Global.System.Data.DataColumn("Room", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRoom)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSemester1 = New Global.System.Data.DataColumn("Semester1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester1)
            Me.columnSY1 = New Global.System.Data.DataColumn("SY1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY1)
            Me.columnInstructor = New Global.System.Data.DataColumn("Instructor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstructor)
            Me.columnStudentNumber.MaxLength = 45
            Me.columnFullname.MaxLength = 182
            Me.columnCourse.MaxLength = 250
            Me.columnYearLevel.MaxLength = 45
            Me.columnSubjectCode.MaxLength = 45
            Me.columnDescription.MaxLength = 250
            Me.columnLecUnit.MaxLength = 45
            Me.columnLabUnit.MaxLength = 45
            Me.columnSection.MaxLength = 45
            Me.columnSchedTime.MaxLength = 45
            Me.columnLabTime.MaxLength = 45
            Me.columnRoom.MaxLength = 45
            Me.columnSemester.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnSemester1.MaxLength = 45
            Me.columnSY1.MaxLength = 45
            Me.columnInstructor.MaxLength = 111
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewClearanceRow() As ClearanceRow
            Return CType(Me.NewRow,ClearanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ClearanceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ClearanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClearanceRowChangedEvent) Is Nothing) Then
                RaiseEvent ClearanceRowChanged(Me, New ClearanceRowChangeEvent(CType(e.Row,ClearanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClearanceRowChangingEvent) Is Nothing) Then
                RaiseEvent ClearanceRowChanging(Me, New ClearanceRowChangeEvent(CType(e.Row,ClearanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClearanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClearanceRowDeleted(Me, New ClearanceRowChangeEvent(CType(e.Row,ClearanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClearanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClearanceRowDeleting(Me, New ClearanceRowChangeEvent(CType(e.Row,ClearanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveClearanceRow(ByVal row As ClearanceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClearanceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class scholarshipListingDataTable
        Inherits Global.System.Data.TypedTableBase(Of scholarshipListingRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMI As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnYearLevel1 As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnScholarship As Global.System.Data.DataColumn
        
        Private columnprevGPA As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "scholarshipListing"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevel1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScholarshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScholarship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prevGPAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprevGPA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As scholarshipListingRow
            Get
                Return CType(Me.Rows(index),scholarshipListingRow)
            End Get
        End Property
        
        Public Event scholarshipListingRowChanging As scholarshipListingRowChangeEventHandler
        
        Public Event scholarshipListingRowChanged As scholarshipListingRowChangeEventHandler
        
        Public Event scholarshipListingRowDeleting As scholarshipListingRowChangeEventHandler
        
        Public Event scholarshipListingRowDeleted As scholarshipListingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddscholarshipListingRow(ByVal row As scholarshipListingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddscholarshipListingRow(ByVal parentstudeprofileRowByFK_semesterstude_11 As studeprofileRow, ByVal LastName As String, ByVal FirstName As String, ByVal MI As String, ByVal YearLevel As String, ByVal YearLevel1 As String, ByVal Course As String, ByVal Scholarship As String, ByVal prevGPA As String, ByVal Semester As String, ByVal SY As String, ByVal SchoolName As String, ByVal SchoolAddress As String) As scholarshipListingRow
            Dim rowscholarshipListingRow As scholarshipListingRow = CType(Me.NewRow,scholarshipListingRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, LastName, FirstName, MI, YearLevel, YearLevel1, Course, Scholarship, prevGPA, Semester, SY, SchoolName, SchoolAddress}
            If (Not (parentstudeprofileRowByFK_semesterstude_11) Is Nothing) Then
                columnValuesArray(0) = parentstudeprofileRowByFK_semesterstude_11(0)
            End If
            rowscholarshipListingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowscholarshipListingRow)
            Return rowscholarshipListingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As scholarshipListingRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),scholarshipListingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As scholarshipListingDataTable = CType(MyBase.Clone,scholarshipListingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New scholarshipListingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMI = MyBase.Columns("MI")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnYearLevel1 = MyBase.Columns("YearLevel1")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnScholarship = MyBase.Columns("Scholarship")
            Me.columnprevGPA = MyBase.Columns("prevGPA")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMI = New Global.System.Data.DataColumn("MI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMI)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnYearLevel1 = New Global.System.Data.DataColumn("YearLevel1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel1)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnScholarship = New Global.System.Data.DataColumn("Scholarship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScholarship)
            Me.columnprevGPA = New Global.System.Data.DataColumn("prevGPA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprevGPA)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnLastName.MaxLength = 60
            Me.columnFirstName.MaxLength = 60
            Me.columnMI.MaxLength = 1
            Me.columnYearLevel.MaxLength = 45
            Me.columnYearLevel1.MaxLength = 45
            Me.columnCourse.MaxLength = 250
            Me.columnScholarship.AllowDBNull = false
            Me.columnScholarship.MaxLength = 150
            Me.columnprevGPA.AllowDBNull = false
            Me.columnprevGPA.MaxLength = 45
            Me.columnSemester.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewscholarshipListingRow() As scholarshipListingRow
            Return CType(Me.NewRow,scholarshipListingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New scholarshipListingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(scholarshipListingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.scholarshipListingRowChangedEvent) Is Nothing) Then
                RaiseEvent scholarshipListingRowChanged(Me, New scholarshipListingRowChangeEvent(CType(e.Row,scholarshipListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.scholarshipListingRowChangingEvent) Is Nothing) Then
                RaiseEvent scholarshipListingRowChanging(Me, New scholarshipListingRowChangeEvent(CType(e.Row,scholarshipListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.scholarshipListingRowDeletedEvent) Is Nothing) Then
                RaiseEvent scholarshipListingRowDeleted(Me, New scholarshipListingRowChangeEvent(CType(e.Row,scholarshipListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.scholarshipListingRowDeletingEvent) Is Nothing) Then
                RaiseEvent scholarshipListingRowDeleting(Me, New scholarshipListingRowChangeEvent(CType(e.Row,scholarshipListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovescholarshipListingRow(ByVal row As scholarshipListingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "scholarshipListingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class civilStatDataTable
        Inherits Global.System.Data.TypedTableBase(Of civilStatRow)
        
        Private columnStudentNumber As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnCivilStatus As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnYearLevel1 As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnScholarship As Global.System.Data.DataColumn
        
        Private columnprevGPA As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "civilStat"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CivilStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCivilStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevel1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScholarshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScholarship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prevGPAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprevGPA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As civilStatRow
            Get
                Return CType(Me.Rows(index),civilStatRow)
            End Get
        End Property
        
        Public Event civilStatRowChanging As civilStatRowChangeEventHandler
        
        Public Event civilStatRowChanged As civilStatRowChangeEventHandler
        
        Public Event civilStatRowDeleting As civilStatRowChangeEventHandler
        
        Public Event civilStatRowDeleted As civilStatRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddcivilStatRow(ByVal row As civilStatRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddcivilStatRow(ByVal parentstudeprofileRowByFK_semesterstude_12 As studeprofileRow, ByVal LastName As String, ByVal FirstName As String, ByVal MiddleName As String, ByVal CivilStatus As String, ByVal YearLevel As String, ByVal YearLevel1 As String, ByVal Course As String, ByVal Scholarship As String, ByVal prevGPA As String, ByVal Semester As String, ByVal SY As String, ByVal SchoolName As String, ByVal SchoolAddress As String) As civilStatRow
            Dim rowcivilStatRow As civilStatRow = CType(Me.NewRow,civilStatRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, LastName, FirstName, MiddleName, CivilStatus, YearLevel, YearLevel1, Course, Scholarship, prevGPA, Semester, SY, SchoolName, SchoolAddress}
            If (Not (parentstudeprofileRowByFK_semesterstude_12) Is Nothing) Then
                columnValuesArray(0) = parentstudeprofileRowByFK_semesterstude_12(0)
            End If
            rowcivilStatRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcivilStatRow)
            Return rowcivilStatRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentNumber(ByVal StudentNumber As String) As civilStatRow
            Return CType(Me.Rows.Find(New Object() {StudentNumber}),civilStatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As civilStatDataTable = CType(MyBase.Clone,civilStatDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New civilStatDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnCivilStatus = MyBase.Columns("CivilStatus")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnYearLevel1 = MyBase.Columns("YearLevel1")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnScholarship = MyBase.Columns("Scholarship")
            Me.columnprevGPA = MyBase.Columns("prevGPA")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentNumber = New Global.System.Data.DataColumn("StudentNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnCivilStatus = New Global.System.Data.DataColumn("CivilStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCivilStatus)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnYearLevel1 = New Global.System.Data.DataColumn("YearLevel1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel1)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnScholarship = New Global.System.Data.DataColumn("Scholarship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScholarship)
            Me.columnprevGPA = New Global.System.Data.DataColumn("prevGPA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprevGPA)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentNumber}, true))
            Me.columnStudentNumber.AllowDBNull = false
            Me.columnStudentNumber.Unique = true
            Me.columnStudentNumber.MaxLength = 45
            Me.columnLastName.MaxLength = 60
            Me.columnFirstName.MaxLength = 60
            Me.columnMiddleName.MaxLength = 60
            Me.columnCivilStatus.AllowDBNull = false
            Me.columnCivilStatus.MaxLength = 45
            Me.columnYearLevel.MaxLength = 45
            Me.columnYearLevel1.MaxLength = 45
            Me.columnCourse.MaxLength = 250
            Me.columnScholarship.AllowDBNull = false
            Me.columnScholarship.MaxLength = 150
            Me.columnprevGPA.AllowDBNull = false
            Me.columnprevGPA.MaxLength = 45
            Me.columnSemester.MaxLength = 45
            Me.columnSY.MaxLength = 45
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewcivilStatRow() As civilStatRow
            Return CType(Me.NewRow,civilStatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New civilStatRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(civilStatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.civilStatRowChangedEvent) Is Nothing) Then
                RaiseEvent civilStatRowChanged(Me, New civilStatRowChangeEvent(CType(e.Row,civilStatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.civilStatRowChangingEvent) Is Nothing) Then
                RaiseEvent civilStatRowChanging(Me, New civilStatRowChangeEvent(CType(e.Row,civilStatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.civilStatRowDeletedEvent) Is Nothing) Then
                RaiseEvent civilStatRowDeleted(Me, New civilStatRowChangeEvent(CType(e.Row,civilStatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.civilStatRowDeletingEvent) Is Nothing) Then
                RaiseEvent civilStatRowDeleting(Me, New civilStatRowChangeEvent(CType(e.Row,civilStatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovecivilStatRow(ByVal row As civilStatRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "civilStatDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MRDataTable
        Inherits Global.System.Data.TypedTableBase(Of MRRow)
        
        Private columnctrlNo As Global.System.Data.DataColumn
        
        Private columnitemName As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnitemCondition As Global.System.Data.DataColumn
        
        Private columnserialNo As Global.System.Data.DataColumn
        
        Private columnmodel As Global.System.Data.DataColumn
        
        Private columnnotes As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnunit As Global.System.Data.DataColumn
        
        Private columnacquiredDate As Global.System.Data.DataColumn
        
        Private columnAccountable As Global.System.Data.DataColumn
        
        Private columnempPosition As Global.System.Data.DataColumn
        
        Private columnDepartment As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnPropertyCustodian As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ctrlNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnctrlNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemConditionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemCondition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property serialNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserialNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property modelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmodel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property notesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property acquiredDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnacquiredDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AccountableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccountable
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property empPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnempPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropertyCustodianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropertyCustodian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MRRow
            Get
                Return CType(Me.Rows(index),MRRow)
            End Get
        End Property
        
        Public Event MRRowChanging As MRRowChangeEventHandler
        
        Public Event MRRowChanged As MRRowChangeEventHandler
        
        Public Event MRRowDeleting As MRRowChangeEventHandler
        
        Public Event MRRowDeleted As MRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMRRow(ByVal row As MRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMRRow( _
                    ByVal ctrlNo As String,  _
                    ByVal itemName As String,  _
                    ByVal description As String,  _
                    ByVal itemCondition As String,  _
                    ByVal serialNo As String,  _
                    ByVal model As String,  _
                    ByVal notes As String,  _
                    ByVal qty As Integer,  _
                    ByVal unit As String,  _
                    ByVal acquiredDate As Date,  _
                    ByVal Accountable As String,  _
                    ByVal empPosition As String,  _
                    ByVal Department As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal Division As String,  _
                    ByVal PropertyCustodian As String,  _
                    ByVal letterHead() As Byte) As MRRow
            Dim rowMRRow As MRRow = CType(Me.NewRow,MRRow)
            Dim columnValuesArray() As Object = New Object() {ctrlNo, itemName, description, itemCondition, serialNo, model, notes, qty, unit, acquiredDate, Accountable, empPosition, Department, SchoolName, SchoolAddress, Division, PropertyCustodian, letterHead}
            rowMRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMRRow)
            Return rowMRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MRDataTable = CType(MyBase.Clone,MRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MRDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnctrlNo = MyBase.Columns("ctrlNo")
            Me.columnitemName = MyBase.Columns("itemName")
            Me.columndescription = MyBase.Columns("description")
            Me.columnitemCondition = MyBase.Columns("itemCondition")
            Me.columnserialNo = MyBase.Columns("serialNo")
            Me.columnmodel = MyBase.Columns("model")
            Me.columnnotes = MyBase.Columns("notes")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnunit = MyBase.Columns("unit")
            Me.columnacquiredDate = MyBase.Columns("acquiredDate")
            Me.columnAccountable = MyBase.Columns("Accountable")
            Me.columnempPosition = MyBase.Columns("empPosition")
            Me.columnDepartment = MyBase.Columns("Department")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnPropertyCustodian = MyBase.Columns("PropertyCustodian")
            Me.columnletterHead = MyBase.Columns("letterHead")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnctrlNo = New Global.System.Data.DataColumn("ctrlNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnctrlNo)
            Me.columnitemName = New Global.System.Data.DataColumn("itemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemName)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnitemCondition = New Global.System.Data.DataColumn("itemCondition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemCondition)
            Me.columnserialNo = New Global.System.Data.DataColumn("serialNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserialNo)
            Me.columnmodel = New Global.System.Data.DataColumn("model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmodel)
            Me.columnnotes = New Global.System.Data.DataColumn("notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnotes)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnunit = New Global.System.Data.DataColumn("unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunit)
            Me.columnacquiredDate = New Global.System.Data.DataColumn("acquiredDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnacquiredDate)
            Me.columnAccountable = New Global.System.Data.DataColumn("Accountable", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccountable)
            Me.columnempPosition = New Global.System.Data.DataColumn("empPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnempPosition)
            Me.columnDepartment = New Global.System.Data.DataColumn("Department", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartment)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnPropertyCustodian = New Global.System.Data.DataColumn("PropertyCustodian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropertyCustodian)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columnctrlNo.AllowDBNull = false
            Me.columnctrlNo.MaxLength = 45
            Me.columnitemName.AllowDBNull = false
            Me.columnitemName.MaxLength = 100
            Me.columndescription.AllowDBNull = false
            Me.columndescription.MaxLength = 150
            Me.columnitemCondition.AllowDBNull = false
            Me.columnitemCondition.MaxLength = 45
            Me.columnserialNo.AllowDBNull = false
            Me.columnserialNo.MaxLength = 45
            Me.columnmodel.AllowDBNull = false
            Me.columnmodel.MaxLength = 65
            Me.columnnotes.AllowDBNull = false
            Me.columnnotes.MaxLength = 150
            Me.columnunit.MaxLength = 45
            Me.columnacquiredDate.AllowDBNull = false
            Me.columnAccountable.MaxLength = 177
            Me.columnempPosition.AllowDBNull = false
            Me.columnempPosition.MaxLength = 45
            Me.columnDepartment.AllowDBNull = false
            Me.columnDepartment.MaxLength = 150
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnDivision.AllowDBNull = false
            Me.columnDivision.MaxLength = 100
            Me.columnPropertyCustodian.AllowDBNull = false
            Me.columnPropertyCustodian.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMRRow() As MRRow
            Return CType(Me.NewRow,MRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MRRowChangedEvent) Is Nothing) Then
                RaiseEvent MRRowChanged(Me, New MRRowChangeEvent(CType(e.Row,MRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MRRowChangingEvent) Is Nothing) Then
                RaiseEvent MRRowChanging(Me, New MRRowChangeEvent(CType(e.Row,MRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MRRowDeletedEvent) Is Nothing) Then
                RaiseEvent MRRowDeleted(Me, New MRRowChangeEvent(CType(e.Row,MRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MRRowDeletingEvent) Is Nothing) Then
                RaiseEvent MRRowDeleting(Me, New MRRowChangeEvent(CType(e.Row,MRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMRRow(ByVal row As MRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ls_itemsDataTable
        Inherits Global.System.Data.TypedTableBase(Of ls_itemsRow)
        
        Private columnctrlNo As Global.System.Data.DataColumn
        
        Private columnitemName As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnitemCondition As Global.System.Data.DataColumn
        
        Private columnserialNo As Global.System.Data.DataColumn
        
        Private columnmodel As Global.System.Data.DataColumn
        
        Private columnaccountable As Global.System.Data.DataColumn
        
        Private columnacquiredDate As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSchoolAddress As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        Private columnSchoolHead As Global.System.Data.DataColumn
        
        Private columnsHeadPosition As Global.System.Data.DataColumn
        
        Private columnPropertyCustodian As Global.System.Data.DataColumn
        
        Private columnempPosition As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ls_items"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ctrlNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnctrlNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemConditionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemCondition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property serialNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserialNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property modelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmodel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property accountableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccountable
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property acquiredDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnacquiredDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sHeadPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsHeadPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropertyCustodianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropertyCustodian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property empPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnempPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ls_itemsRow
            Get
                Return CType(Me.Rows(index),ls_itemsRow)
            End Get
        End Property
        
        Public Event ls_itemsRowChanging As ls_itemsRowChangeEventHandler
        
        Public Event ls_itemsRowChanged As ls_itemsRowChangeEventHandler
        
        Public Event ls_itemsRowDeleting As ls_itemsRowChangeEventHandler
        
        Public Event ls_itemsRowDeleted As ls_itemsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addls_itemsRow(ByVal row As ls_itemsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addls_itemsRow( _
                    ByVal ctrlNo As String,  _
                    ByVal itemName As String,  _
                    ByVal description As String,  _
                    ByVal itemCondition As String,  _
                    ByVal serialNo As String,  _
                    ByVal model As String,  _
                    ByVal accountable As String,  _
                    ByVal acquiredDate As Date,  _
                    ByVal Division As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SchoolAddress As String,  _
                    ByVal letterHead() As Byte,  _
                    ByVal SchoolHead As String,  _
                    ByVal sHeadPosition As String,  _
                    ByVal PropertyCustodian As String,  _
                    ByVal empPosition As String) As ls_itemsRow
            Dim rowls_itemsRow As ls_itemsRow = CType(Me.NewRow,ls_itemsRow)
            Dim columnValuesArray() As Object = New Object() {ctrlNo, itemName, description, itemCondition, serialNo, model, accountable, acquiredDate, Division, SchoolName, SchoolAddress, letterHead, SchoolHead, sHeadPosition, PropertyCustodian, empPosition}
            rowls_itemsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowls_itemsRow)
            Return rowls_itemsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ls_itemsDataTable = CType(MyBase.Clone,ls_itemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ls_itemsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnctrlNo = MyBase.Columns("ctrlNo")
            Me.columnitemName = MyBase.Columns("itemName")
            Me.columndescription = MyBase.Columns("description")
            Me.columnitemCondition = MyBase.Columns("itemCondition")
            Me.columnserialNo = MyBase.Columns("serialNo")
            Me.columnmodel = MyBase.Columns("model")
            Me.columnaccountable = MyBase.Columns("accountable")
            Me.columnacquiredDate = MyBase.Columns("acquiredDate")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSchoolAddress = MyBase.Columns("SchoolAddress")
            Me.columnletterHead = MyBase.Columns("letterHead")
            Me.columnSchoolHead = MyBase.Columns("SchoolHead")
            Me.columnsHeadPosition = MyBase.Columns("sHeadPosition")
            Me.columnPropertyCustodian = MyBase.Columns("PropertyCustodian")
            Me.columnempPosition = MyBase.Columns("empPosition")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnctrlNo = New Global.System.Data.DataColumn("ctrlNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnctrlNo)
            Me.columnitemName = New Global.System.Data.DataColumn("itemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemName)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnitemCondition = New Global.System.Data.DataColumn("itemCondition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemCondition)
            Me.columnserialNo = New Global.System.Data.DataColumn("serialNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserialNo)
            Me.columnmodel = New Global.System.Data.DataColumn("model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmodel)
            Me.columnaccountable = New Global.System.Data.DataColumn("accountable", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccountable)
            Me.columnacquiredDate = New Global.System.Data.DataColumn("acquiredDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnacquiredDate)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSchoolAddress = New Global.System.Data.DataColumn("SchoolAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolAddress)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columnSchoolHead = New Global.System.Data.DataColumn("SchoolHead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolHead)
            Me.columnsHeadPosition = New Global.System.Data.DataColumn("sHeadPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsHeadPosition)
            Me.columnPropertyCustodian = New Global.System.Data.DataColumn("PropertyCustodian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropertyCustodian)
            Me.columnempPosition = New Global.System.Data.DataColumn("empPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnempPosition)
            Me.columnctrlNo.AllowDBNull = false
            Me.columnctrlNo.MaxLength = 45
            Me.columnitemName.AllowDBNull = false
            Me.columnitemName.MaxLength = 100
            Me.columndescription.AllowDBNull = false
            Me.columndescription.MaxLength = 150
            Me.columnitemCondition.AllowDBNull = false
            Me.columnitemCondition.MaxLength = 45
            Me.columnserialNo.AllowDBNull = false
            Me.columnserialNo.MaxLength = 45
            Me.columnmodel.AllowDBNull = false
            Me.columnmodel.MaxLength = 65
            Me.columnaccountable.AllowDBNull = false
            Me.columnaccountable.MaxLength = 200
            Me.columnacquiredDate.AllowDBNull = false
            Me.columnDivision.AllowDBNull = false
            Me.columnDivision.MaxLength = 100
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.MaxLength = 150
            Me.columnSchoolAddress.AllowDBNull = false
            Me.columnSchoolAddress.MaxLength = 150
            Me.columnSchoolHead.AllowDBNull = false
            Me.columnSchoolHead.MaxLength = 100
            Me.columnsHeadPosition.AllowDBNull = false
            Me.columnsHeadPosition.MaxLength = 45
            Me.columnPropertyCustodian.AllowDBNull = false
            Me.columnPropertyCustodian.MaxLength = 150
            Me.columnempPosition.AllowDBNull = false
            Me.columnempPosition.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newls_itemsRow() As ls_itemsRow
            Return CType(Me.NewRow,ls_itemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ls_itemsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ls_itemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ls_itemsRowChangedEvent) Is Nothing) Then
                RaiseEvent ls_itemsRowChanged(Me, New ls_itemsRowChangeEvent(CType(e.Row,ls_itemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ls_itemsRowChangingEvent) Is Nothing) Then
                RaiseEvent ls_itemsRowChanging(Me, New ls_itemsRowChangeEvent(CType(e.Row,ls_itemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ls_itemsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ls_itemsRowDeleted(Me, New ls_itemsRowChangeEvent(CType(e.Row,ls_itemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ls_itemsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ls_itemsRowDeleting(Me, New ls_itemsRowChangeEvent(CType(e.Row,ls_itemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removels_itemsRow(ByVal row As ls_itemsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ls_itemsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class byauthorDataTable
        Inherits Global.System.Data.TypedTableBase(Of byauthorRow)
        
        Private columnBookNo As Global.System.Data.DataColumn
        
        Private columnTitle As Global.System.Data.DataColumn
        
        Private columnCategory As Global.System.Data.DataColumn
        
        Private columnAuthor As Global.System.Data.DataColumn
        
        Private columnBookStatus As Global.System.Data.DataColumn
        
        Private columnletterHead As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "byauthor"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BookNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBookNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AuthorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAuthor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BookStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBookStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property letterHeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnletterHead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As byauthorRow
            Get
                Return CType(Me.Rows(index),byauthorRow)
            End Get
        End Property
        
        Public Event byauthorRowChanging As byauthorRowChangeEventHandler
        
        Public Event byauthorRowChanged As byauthorRowChangeEventHandler
        
        Public Event byauthorRowDeleting As byauthorRowChangeEventHandler
        
        Public Event byauthorRowDeleted As byauthorRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddbyauthorRow(ByVal row As byauthorRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddbyauthorRow(ByVal BookNo As String, ByVal Title As String, ByVal Category As String, ByVal Author As String, ByVal BookStatus As String, ByVal letterHead() As Byte) As byauthorRow
            Dim rowbyauthorRow As byauthorRow = CType(Me.NewRow,byauthorRow)
            Dim columnValuesArray() As Object = New Object() {BookNo, Title, Category, Author, BookStatus, letterHead}
            rowbyauthorRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowbyauthorRow)
            Return rowbyauthorRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As byauthorDataTable = CType(MyBase.Clone,byauthorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New byauthorDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBookNo = MyBase.Columns("BookNo")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnCategory = MyBase.Columns("Category")
            Me.columnAuthor = MyBase.Columns("Author")
            Me.columnBookStatus = MyBase.Columns("BookStatus")
            Me.columnletterHead = MyBase.Columns("letterHead")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBookNo = New Global.System.Data.DataColumn("BookNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBookNo)
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnCategory = New Global.System.Data.DataColumn("Category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategory)
            Me.columnAuthor = New Global.System.Data.DataColumn("Author", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAuthor)
            Me.columnBookStatus = New Global.System.Data.DataColumn("BookStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBookStatus)
            Me.columnletterHead = New Global.System.Data.DataColumn("letterHead", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnletterHead)
            Me.columnBookNo.AllowDBNull = false
            Me.columnBookNo.MaxLength = 200
            Me.columnTitle.AllowDBNull = false
            Me.columnTitle.MaxLength = 200
            Me.columnCategory.AllowDBNull = false
            Me.columnCategory.MaxLength = 500
            Me.columnAuthor.AllowDBNull = false
            Me.columnAuthor.MaxLength = 200
            Me.columnBookStatus.AllowDBNull = false
            Me.columnBookStatus.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewbyauthorRow() As byauthorRow
            Return CType(Me.NewRow,byauthorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New byauthorRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(byauthorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.byauthorRowChangedEvent) Is Nothing) Then
                RaiseEvent byauthorRowChanged(Me, New byauthorRowChangeEvent(CType(e.Row,byauthorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.byauthorRowChangingEvent) Is Nothing) Then
                RaiseEvent byauthorRowChanging(Me, New byauthorRowChangeEvent(CType(e.Row,byauthorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.byauthorRowDeletedEvent) Is Nothing) Then
                RaiseEvent byauthorRowDeleted(Me, New byauthorRowChangeEvent(CType(e.Row,byauthorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.byauthorRowDeletingEvent) Is Nothing) Then
                RaiseEvent byauthorRowDeleting(Me, New byauthorRowChangeEvent(CType(e.Row,byauthorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovebyauthorRow(ByVal row As byauthorRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Reports = New Reports
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "byauthorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollmentHistoryRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollmentHistory As EnrollmentHistoryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollmentHistory = CType(Me.Table,EnrollmentHistoryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableEnrollmentHistory.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableEnrollmentHistory.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentHistory.StudentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentName' in table 'EnrollmentHistory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentHistory.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentHistory.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'EnrollmentHistory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentHistory.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentHistory.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'EnrollmentHistory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentHistory.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentHistory.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'EnrollmentHistory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentHistory.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentHistory.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'EnrollmentHistory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentHistory.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentHistory.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'EnrollmentHistory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentHistory.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNameNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentHistory.StudentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNameNull()
            Me(Me.tableEnrollmentHistory.StudentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentHistory.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tableEnrollmentHistory.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentHistory.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tableEnrollmentHistory.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentHistory.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tableEnrollmentHistory.SYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentHistory.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tableEnrollmentHistory.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentHistory.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableEnrollmentHistory.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetpromissoryNotesRows() As promissoryNotesRow()
            If (Me.Table.ChildRelations("FK_promissory_11") Is Nothing) Then
                Return New promissoryNotesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_promissory_11")),promissoryNotesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class paymentsaccountsRow
        Inherits Global.System.Data.DataRow
        
        Private tablepaymentsaccounts As paymentsaccountsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepaymentsaccounts = CType(Me.Table,paymentsaccountsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As UInteger
            Get
                Return CType(Me(Me.tablepaymentsaccounts.IDColumn),UInteger)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.FirstNameColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.MiddleNameColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.LastNameColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PDate() As Date
            Get
                Return CType(Me(Me.tablepaymentsaccounts.PDateColumn),Date)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.PDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORNumber() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.ORNumberColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.ORNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Double
            Get
                Return CType(Me(Me.tablepaymentsaccounts.AmountColumn),Double)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentType() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.PaymentTypeColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.PaymentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckNumber() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.CheckNumberColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.CheckNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sem() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.SemColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.SemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.SYColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.AddressColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Term() As String
            Get
                Return CType(Me(Me.tablepaymentsaccounts.TermColumn),String)
            End Get
            Set
                Me(Me.tablepaymentsaccounts.TermColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScholarsRow() As ScholarsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_paymentsaccounts_1")),ScholarsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_paymentsaccounts_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studeprofileRow() As studeprofileRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_paymentsaccounts_11")),studeprofileRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_paymentsaccounts_11"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class accountSummaryRow
        Inherits Global.System.Data.DataRow
        
        Private tableaccountSummary As accountSummaryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableaccountSummary = CType(Me.Table,accountSummaryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Return CType(Me(Me.tableaccountSummary.CourseColumn),String)
            End Get
            Set
                Me(Me.tableaccountSummary.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _sum_AcctTotal_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableaccountSummary._sum_AcctTotal_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sum(AcctTotal)' in table 'accountSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaccountSummary._sum_AcctTotal_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _sum_TotalPayments_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableaccountSummary._sum_TotalPayments_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sum(TotalPayments)' in table 'accountSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaccountSummary._sum_TotalPayments_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _sum_CurrentBalance_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableaccountSummary._sum_CurrentBalance_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sum(CurrentBalance)' in table 'accountSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaccountSummary._sum_CurrentBalance_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sem() As String
            Get
                Return CType(Me(Me.tableaccountSummary.SemColumn),String)
            End Get
            Set
                Me(Me.tableaccountSummary.SemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Return CType(Me(Me.tableaccountSummary.SYColumn),String)
            End Get
            Set
                Me(Me.tableaccountSummary.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_sum_AcctTotal_Null() As Boolean
            Return Me.IsNull(Me.tableaccountSummary._sum_AcctTotal_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_sum_AcctTotal_Null()
            Me(Me.tableaccountSummary._sum_AcctTotal_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_sum_TotalPayments_Null() As Boolean
            Return Me.IsNull(Me.tableaccountSummary._sum_TotalPayments_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_sum_TotalPayments_Null()
            Me(Me.tableaccountSummary._sum_TotalPayments_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_sum_CurrentBalance_Null() As Boolean
            Return Me.IsNull(Me.tableaccountSummary._sum_CurrentBalance_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_sum_CurrentBalance_Null()
            Me(Me.tableaccountSummary._sum_CurrentBalance_Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CollectionsSummaryRow
        Inherits Global.System.Data.DataRow
        
        Private tableCollectionsSummary As CollectionsSummaryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCollectionsSummary = CType(Me.Table,CollectionsSummaryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PDate() As Date
            Get
                Return CType(Me(Me.tableCollectionsSummary.PDateColumn),Date)
            End Get
            Set
                Me(Me.tableCollectionsSummary.PDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORNumber() As String
            Get
                Return CType(Me(Me.tableCollectionsSummary.ORNumberColumn),String)
            End Get
            Set
                Me(Me.tableCollectionsSummary.ORNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Double
            Get
                Return CType(Me(Me.tableCollectionsSummary.AmountColumn),Double)
            End Get
            Set
                Me(Me.tableCollectionsSummary.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As UInteger
            Get
                Return CType(Me(Me.tableCollectionsSummary.IDColumn),UInteger)
            End Get
            Set
                Me(Me.tableCollectionsSummary.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableCollectionsSummary.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableCollectionsSummary.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Payor() As String
            Get
                Return CType(Me(Me.tableCollectionsSummary.PayorColumn),String)
            End Get
            Set
                Me(Me.tableCollectionsSummary.PayorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cashier() As String
            Get
                Return CType(Me(Me.tableCollectionsSummary.CashierColumn),String)
            End Get
            Set
                Me(Me.tableCollectionsSummary.CashierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORStatus() As String
            Get
                Return CType(Me(Me.tableCollectionsSummary.ORStatusColumn),String)
            End Get
            Set
                Me(Me.tableCollectionsSummary.ORStatusColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ScholarsRow
        Inherits Global.System.Data.DataRow
        
        Private tableScholars As ScholarsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableScholars = CType(Me.Table,ScholarsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tableScholars.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tableScholars.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tableScholars.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'Scholars' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScholars.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tableScholars.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'Scholars' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScholars.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tableScholars.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'Scholars' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScholars.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tableScholars.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'Scholars' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScholars.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Scholarship() As String
            Get
                Return CType(Me(Me.tableScholars.ScholarshipColumn),String)
            End Get
            Set
                Me(Me.tableScholars.ScholarshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prevGPA() As String
            Get
                Return CType(Me(Me.tableScholars.prevGPAColumn),String)
            End Get
            Set
                Me(Me.tableScholars.prevGPAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableScholars.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableScholars.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableScholars.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableScholars.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableScholars.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'Scholars' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScholars.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableScholars.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'Scholars' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScholars.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MI() As String
            Get
                Try 
                    Return CType(Me(Me.tableScholars.MIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MI' in table 'Scholars' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScholars.MIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableScholars.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'Scholars' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScholars.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course1() As String
            Get
                Try 
                    Return CType(Me(Me.tableScholars.Course1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course1' in table 'Scholars' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScholars.Course1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studeprofileRow() As studeprofileRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_semesterstude_1")),studeprofileRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_semesterstude_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tableScholars.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tableScholars.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tableScholars.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tableScholars.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tableScholars.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tableScholars.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tableScholars.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tableScholars.SYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableScholars.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableScholars.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableScholars.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableScholars.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMINull() As Boolean
            Return Me.IsNull(Me.tableScholars.MIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMINull()
            Me(Me.tableScholars.MIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableScholars.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableScholars.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourse1Null() As Boolean
            Return Me.IsNull(Me.tableScholars.Course1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourse1Null()
            Me(Me.tableScholars.Course1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetpaymentsaccountsRows() As paymentsaccountsRow()
            If (Me.Table.ChildRelations("fk_paymentsaccounts_1") Is Nothing) Then
                Return New paymentsaccountsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_paymentsaccounts_1")),paymentsaccountsRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetpromissoryNotesRows() As promissoryNotesRow()
            If (Me.Table.ChildRelations("FK_promissory_1") Is Nothing) Then
                Return New promissoryNotesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_promissory_1")),promissoryNotesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class expensesRow
        Inherits Global.System.Data.DataRow
        
        Private tableexpenses As expensesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableexpenses = CType(Me.Table,expensesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableexpenses.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'expenses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableexpenses.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Responsible() As String
            Get
                Try 
                    Return CType(Me(Me.tableexpenses.ResponsibleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Responsible' in table 'expenses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableexpenses.ResponsibleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Category() As String
            Get
                Return CType(Me(Me.tableexpenses.CategoryColumn),String)
            End Get
            Set
                Me(Me.tableexpenses.CategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExpenseDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableexpenses.ExpenseDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExpenseDate' in table 'expenses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableexpenses.ExpenseDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Double
            Get
                Try 
                    Return CType(Me(Me.tableexpenses.AmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount' in table 'expenses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableexpenses.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableexpenses.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableexpenses.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResponsibleNull() As Boolean
            Return Me.IsNull(Me.tableexpenses.ResponsibleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResponsibleNull()
            Me(Me.tableexpenses.ResponsibleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpenseDateNull() As Boolean
            Return Me.IsNull(Me.tableexpenses.ExpenseDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpenseDateNull()
            Me(Me.tableexpenses.ExpenseDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableexpenses.AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountNull()
            Me(Me.tableexpenses.AmountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class semesterstudeRow
        Inherits Global.System.Data.DataRow
        
        Private tablesemesterstude As semesterstudeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesemesterstude = CType(Me.Table,semesterstudeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tablesemesterstude.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesemesterstude.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tablesemesterstude.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesemesterstude.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tablesemesterstude.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesemesterstude.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnrolledCount() As Long
            Get
                Return CType(Me(Me.tablesemesterstude.EnrolledCountColumn),Long)
            End Get
            Set
                Me(Me.tablesemesterstude.EnrolledCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tablesemesterstude.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesemesterstude.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tablesemesterstude.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'semesterstude' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesemesterstude.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusCount() As Long
            Get
                Return CType(Me(Me.tablesemesterstude.StatusCountColumn),Long)
            End Get
            Set
                Me(Me.tablesemesterstude.StatusCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablesemesterstude.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablesemesterstude.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tablesemesterstude.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tablesemesterstude.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tablesemesterstude.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tablesemesterstude.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tablesemesterstude.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tablesemesterstude.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Registrar() As String
            Get
                Return CType(Me(Me.tablesemesterstude.RegistrarColumn),String)
            End Get
            Set
                Me(Me.tablesemesterstude.RegistrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registrarPosition() As String
            Get
                Return CType(Me(Me.tablesemesterstude.registrarPositionColumn),String)
            End Get
            Set
                Me(Me.tablesemesterstude.registrarPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tablesemesterstude.SexColumn),String)
            End Get
            Set
                Me(Me.tablesemesterstude.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tablesemesterstude.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tablesemesterstude.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tablesemesterstude.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tablesemesterstude.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tablesemesterstude.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tablesemesterstude.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tablesemesterstude.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tablesemesterstude.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tablesemesterstude.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tablesemesterstude.SYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class studeprofileRow
        Inherits Global.System.Data.DataRow
        
        Private tablestudeprofile As studeprofileDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablestudeprofile = CType(Me.Table,studeprofileDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tablestudeprofile.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudeprofile.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'studeprofile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudeprofile.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudeprofile.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'studeprofile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudeprofile.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudeprofile.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'studeprofile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudeprofile.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudeprofile.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'studeprofile' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudeprofile.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tablestudeprofile.SexColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CivilStatus() As String
            Get
                Return CType(Me(Me.tablestudeprofile.CivilStatusColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.CivilStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthPlace() As String
            Get
                Return CType(Me(Me.tablestudeprofile.BirthPlaceColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.BirthPlaceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Citizenship() As String
            Get
                Return CType(Me(Me.tablestudeprofile.CitizenshipColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.CitizenshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Religion() As String
            Get
                Return CType(Me(Me.tablestudeprofile.ReligionColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.ReligionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BloodType() As String
            Get
                Return CType(Me(Me.tablestudeprofile.BloodTypeColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.BloodTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelNumber() As String
            Get
                Return CType(Me(Me.tablestudeprofile.TelNumberColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.TelNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MobileNumber() As String
            Get
                Return CType(Me(Me.tablestudeprofile.MobileNumberColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.MobileNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HighSchool() As String
            Get
                Return CType(Me(Me.tablestudeprofile.HighSchoolColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.HighSchoolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HSAddress() As String
            Get
                Return CType(Me(Me.tablestudeprofile.HSAddressColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.HSAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property College() As String
            Get
                Return CType(Me(Me.tablestudeprofile.CollegeColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.CollegeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAddress() As String
            Get
                Return CType(Me(Me.tablestudeprofile.CAddressColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.CAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Requirements() As String
            Get
                Return CType(Me(Me.tablestudeprofile.RequirementsColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.RequirementsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Encoder() As String
            Get
                Return CType(Me(Me.tablestudeprofile.EncoderColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.EncoderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDate() As Date
            Get
                Return CType(Me(Me.tablestudeprofile.BirthDateColumn),Date)
            End Get
            Set
                Me(Me.tablestudeprofile.BirthDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdmissionDate() As Date
            Get
                Return CType(Me(Me.tablestudeprofile.AdmissionDateColumn),Date)
            End Get
            Set
                Me(Me.tablestudeprofile.AdmissionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GraduationDate() As Date
            Get
                Return CType(Me(Me.tablestudeprofile.GraduationDateColumn),Date)
            End Get
            Set
                Me(Me.tablestudeprofile.GraduationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Guardian() As String
            Get
                Return CType(Me(Me.tablestudeprofile.GuardianColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.GuardianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuardianContact() As String
            Get
                Return CType(Me(Me.tablestudeprofile.GuardianContactColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.GuardianContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuardianAddress() As String
            Get
                Return CType(Me(Me.tablestudeprofile.GuardianAddressColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.GuardianAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImagePath() As String
            Get
                Return CType(Me(Me.tablestudeprofile.ImagePathColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.ImagePathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Return CType(Me(Me.tablestudeprofile.CourseColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Elementary() As String
            Get
                Return CType(Me(Me.tablestudeprofile.ElementaryColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.ElementaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ElemAddress() As String
            Get
                Return CType(Me(Me.tablestudeprofile.ElemAddressColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.ElemAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuardianRelationship() As String
            Get
                Return CType(Me(Me.tablestudeprofile.GuardianRelationshipColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.GuardianRelationshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuardianTelNo() As String
            Get
                Return CType(Me(Me.tablestudeprofile.GuardianTelNoColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.GuardianTelNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                Return CType(Me(Me.tablestudeprofile.EmailAddressColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Father() As String
            Get
                Return CType(Me(Me.tablestudeprofile.FatherColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.FatherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOccupation() As String
            Get
                Return CType(Me(Me.tablestudeprofile.FOccupationColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.FOccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mother() As String
            Get
                Return CType(Me(Me.tablestudeprofile.MotherColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.MotherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOccupation() As String
            Get
                Return CType(Me(Me.tablestudeprofile.MOccupationColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.MOccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As String
            Get
                Return CType(Me(Me.tablestudeprofile.AgeColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Return CType(Me(Me.tablestudeprofile.TitleColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pronoun() As String
            Get
                Return CType(Me(Me.tablestudeprofile.PronounColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.PronounColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pronoun2() As String
            Get
                Return CType(Me(Me.tablestudeprofile.Pronoun2Column),String)
            End Get
            Set
                Me(Me.tablestudeprofile.Pronoun2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pronoun3() As String
            Get
                Return CType(Me(Me.tablestudeprofile.Pronoun3Column),String)
            End Get
            Set
                Me(Me.tablestudeprofile.Pronoun3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ethnicity() As String
            Get
                Return CType(Me(Me.tablestudeprofile.EthnicityColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.EthnicityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParentsMonthly() As Double
            Get
                Return CType(Me(Me.tablestudeprofile.ParentsMonthlyColumn),Double)
            End Get
            Set
                Me(Me.tablestudeprofile.ParentsMonthlyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Province() As String
            Get
                Return CType(Me(Me.tablestudeprofile.ProvinceColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tablestudeprofile.CityColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Brgy() As String
            Get
                Return CType(Me(Me.tablestudeprofile.BrgyColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.BrgyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sitio() As String
            Get
                Return CType(Me(Me.tablestudeprofile.SitioColumn),String)
            End Get
            Set
                Me(Me.tablestudeprofile.SitioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tablestudeprofile.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tablestudeprofile.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tablestudeprofile.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tablestudeprofile.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tablestudeprofile.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tablestudeprofile.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tablestudeprofile.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tablestudeprofile.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetpaymentsaccountsRows() As paymentsaccountsRow()
            If (Me.Table.ChildRelations("fk_paymentsaccounts_11") Is Nothing) Then
                Return New paymentsaccountsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_paymentsaccounts_11")),paymentsaccountsRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetpromissoryNotesRows() As promissoryNotesRow()
            If (Me.Table.ChildRelations("fk_promissory_1") Is Nothing) Then
                Return New promissoryNotesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_promissory_1")),promissoryNotesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetClearanceRows() As ClearanceRow()
            If (Me.Table.ChildRelations("fk_registration_1") Is Nothing) Then
                Return New ClearanceRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("fk_registration_1")),ClearanceRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetScholarsRows() As ScholarsRow()
            If (Me.Table.ChildRelations("FK_semesterstude_1") Is Nothing) Then
                Return New ScholarsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_semesterstude_1")),ScholarsRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetscholarshipListingRows() As scholarshipListingRow()
            If (Me.Table.ChildRelations("FK_semesterstude_11") Is Nothing) Then
                Return New scholarshipListingRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_semesterstude_11")),scholarshipListingRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetcivilStatRows() As civilStatRow()
            If (Me.Table.ChildRelations("FK_semesterstude_12") Is Nothing) Then
                Return New civilStatRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_semesterstude_12")),civilStatRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class incomestatementRow
        Inherits Global.System.Data.DataRow
        
        Private tableincomestatement As incomestatementDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableincomestatement = CType(Me.Table,incomestatementDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isID() As UInteger
            Get
                Return CType(Me(Me.tableincomestatement.isIDColumn),UInteger)
            End Get
            Set
                Me(Me.tableincomestatement.isIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFrom() As Date
            Get
                Return CType(Me(Me.tableincomestatement.DateFromColumn),Date)
            End Get
            Set
                Me(Me.tableincomestatement.DateFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateTo() As Date
            Get
                Return CType(Me(Me.tableincomestatement.DateToColumn),Date)
            End Get
            Set
                Me(Me.tableincomestatement.DateToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudeAccts() As Double
            Get
                Return CType(Me(Me.tableincomestatement.StudeAcctsColumn),Double)
            End Get
            Set
                Me(Me.tableincomestatement.StudeAcctsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Services() As Double
            Get
                Return CType(Me(Me.tableincomestatement.ServicesColumn),Double)
            End Get
            Set
                Me(Me.tableincomestatement.ServicesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expenses() As Double
            Get
                Return CType(Me(Me.tableincomestatement.ExpensesColumn),Double)
            End Get
            Set
                Me(Me.tableincomestatement.ExpensesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NetIncome() As Double
            Get
                Return CType(Me(Me.tableincomestatement.NetIncomeColumn),Double)
            End Get
            Set
                Me(Me.tableincomestatement.NetIncomeColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class promissoryNotesRow
        Inherits Global.System.Data.DataRow
        
        Private tablepromissoryNotes As promissoryNotesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepromissoryNotes = CType(Me.Table,promissoryNotesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property promissoryID() As UInteger
            Get
                Return CType(Me(Me.tablepromissoryNotes.promissoryIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablepromissoryNotes.promissoryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateApplied() As Date
            Get
                Return CType(Me(Me.tablepromissoryNotes.DateAppliedColumn),Date)
            End Get
            Set
                Me(Me.tablepromissoryNotes.DateAppliedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tablepromissoryNotes.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tablepromissoryNotes.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tablepromissoryNotes.NameColumn),String)
            End Get
            Set
                Me(Me.tablepromissoryNotes.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Guardian() As String
            Get
                Return CType(Me(Me.tablepromissoryNotes.GuardianColumn),String)
            End Get
            Set
                Me(Me.tablepromissoryNotes.GuardianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Double
            Get
                Return CType(Me(Me.tablepromissoryNotes.AmountColumn),Double)
            End Get
            Set
                Me(Me.tablepromissoryNotes.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PromisedDate() As Date
            Get
                Return CType(Me(Me.tablepromissoryNotes.PromisedDateColumn),Date)
            End Get
            Set
                Me(Me.tablepromissoryNotes.PromisedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Return CType(Me(Me.tablepromissoryNotes.StatusColumn),String)
            End Get
            Set
                Me(Me.tablepromissoryNotes.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sem() As String
            Get
                Return CType(Me(Me.tablepromissoryNotes.SemColumn),String)
            End Get
            Set
                Me(Me.tablepromissoryNotes.SemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Return CType(Me(Me.tablepromissoryNotes.SYColumn),String)
            End Get
            Set
                Me(Me.tablepromissoryNotes.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studeprofileRow() As studeprofileRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_promissory_1")),studeprofileRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_promissory_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScholarsRow() As ScholarsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_promissory_1")),ScholarsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_promissory_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnrollmentHistoryRow() As EnrollmentHistoryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_promissory_11")),EnrollmentHistoryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_promissory_11"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class companyRow
        Inherits Global.System.Data.DataRow
        
        Private tablecompany As companyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecompany = CType(Me.Table,companyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property compID() As UInteger
            Get
                Return CType(Me(Me.tablecompany.compIDColumn),UInteger)
            End Get
            Set
                Me(Me.tablecompany.compIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Company() As String
            Get
                Return CType(Me(Me.tablecompany.CompanyColumn),String)
            End Get
            Set
                Me(Me.tablecompany.CompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address1() As String
            Get
                Return CType(Me(Me.tablecompany.Address1Column),String)
            End Get
            Set
                Me(Me.tablecompany.Address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address2() As String
            Get
                Return CType(Me(Me.tablecompany.Address2Column),String)
            End Get
            Set
                Me(Me.tablecompany.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelNo() As String
            Get
                Return CType(Me(Me.tablecompany.TelNoColumn),String)
            End Get
            Set
                Me(Me.tablecompany.TelNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Website() As String
            Get
                Return CType(Me(Me.tablecompany.WebsiteColumn),String)
            End Get
            Set
                Me(Me.tablecompany.WebsiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Return CType(Me(Me.tablecompany.EmailColumn),String)
            End Get
            Set
                Me(Me.tablecompany.EmailColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SchedulesRow
        Inherits Global.System.Data.DataRow
        
        Private tableSchedules As SchedulesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSchedules = CType(Me.Table,SchedulesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectid() As UInteger
            Get
                Return CType(Me(Me.tableSchedules.subjectidColumn),UInteger)
            End Get
            Set
                Me(Me.tableSchedules.subjectidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Return CType(Me(Me.tableSchedules.SubjectCodeColumn),String)
            End Get
            Set
                Me(Me.tableSchedules.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableSchedules.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Schedules' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSchedules.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LecUnit() As String
            Get
                Try 
                    Return CType(Me(Me.tableSchedules.LecUnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LecUnit' in table 'Schedules' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSchedules.LecUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabUnit() As String
            Get
                Try 
                    Return CType(Me(Me.tableSchedules.LabUnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabUnit' in table 'Schedules' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSchedules.LabUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tableSchedules.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'Schedules' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSchedules.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabTime() As String
            Get
                Try 
                    Return CType(Me(Me.tableSchedules.LabTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabTime' in table 'Schedules' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSchedules.LabTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchedTime() As String
            Get
                Try 
                    Return CType(Me(Me.tableSchedules.SchedTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SchedTime' in table 'Schedules' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSchedules.SchedTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Room() As String
            Get
                Try 
                    Return CType(Me(Me.tableSchedules.RoomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Room' in table 'Schedules' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSchedules.RoomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Slot() As String
            Get
                Try 
                    Return CType(Me(Me.tableSchedules.SlotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Slot' in table 'Schedules' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSchedules.SlotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDNumber() As String
            Get
                Return CType(Me(Me.tableSchedules.IDNumberColumn),String)
            End Get
            Set
                Me(Me.tableSchedules.IDNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSchedules.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'Schedules' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSchedules.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tableSchedules.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'Schedules' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSchedules.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Instructor() As String
            Get
                Try 
                    Return CType(Me(Me.tableSchedules.InstructorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Instructor' in table 'Schedules' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSchedules.InstructorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Time1() As String
            Get
                Return CType(Me(Me.tableSchedules.Time1Column),String)
            End Get
            Set
                Me(Me.tableSchedules.Time1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AM1() As String
            Get
                Return CType(Me(Me.tableSchedules.AM1Column),String)
            End Get
            Set
                Me(Me.tableSchedules.AM1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Time2() As String
            Get
                Return CType(Me(Me.tableSchedules.Time2Column),String)
            End Get
            Set
                Me(Me.tableSchedules.Time2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AM2() As String
            Get
                Return CType(Me(Me.tableSchedules.AM2Column),String)
            End Get
            Set
                Me(Me.tableSchedules.AM2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Time3() As String
            Get
                Return CType(Me(Me.tableSchedules.Time3Column),String)
            End Get
            Set
                Me(Me.tableSchedules.Time3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AM3() As String
            Get
                Return CType(Me(Me.tableSchedules.AM3Column),String)
            End Get
            Set
                Me(Me.tableSchedules.AM3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Time4() As String
            Get
                Return CType(Me(Me.tableSchedules.Time4Column),String)
            End Get
            Set
                Me(Me.tableSchedules.Time4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AM4() As String
            Get
                Return CType(Me(Me.tableSchedules.AM4Column),String)
            End Get
            Set
                Me(Me.tableSchedules.AM4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Days1() As String
            Get
                Return CType(Me(Me.tableSchedules.Days1Column),String)
            End Get
            Set
                Me(Me.tableSchedules.Days1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Days2() As String
            Get
                Return CType(Me(Me.tableSchedules.Days2Column),String)
            End Get
            Set
                Me(Me.tableSchedules.Days2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Return CType(Me(Me.tableSchedules.CourseColumn),String)
            End Get
            Set
                Me(Me.tableSchedules.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Return CType(Me(Me.tableSchedules.YearLevelColumn),String)
            End Get
            Set
                Me(Me.tableSchedules.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectStatus() As String
            Get
                Return CType(Me(Me.tableSchedules.SubjectStatusColumn),String)
            End Get
            Set
                Me(Me.tableSchedules.SubjectStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableSchedules.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableSchedules.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLecUnitNull() As Boolean
            Return Me.IsNull(Me.tableSchedules.LecUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLecUnitNull()
            Me(Me.tableSchedules.LecUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabUnitNull() As Boolean
            Return Me.IsNull(Me.tableSchedules.LabUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabUnitNull()
            Me(Me.tableSchedules.LabUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tableSchedules.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tableSchedules.SectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabTimeNull() As Boolean
            Return Me.IsNull(Me.tableSchedules.LabTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabTimeNull()
            Me(Me.tableSchedules.LabTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSchedTimeNull() As Boolean
            Return Me.IsNull(Me.tableSchedules.SchedTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSchedTimeNull()
            Me(Me.tableSchedules.SchedTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRoomNull() As Boolean
            Return Me.IsNull(Me.tableSchedules.RoomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRoomNull()
            Me(Me.tableSchedules.RoomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSlotNull() As Boolean
            Return Me.IsNull(Me.tableSchedules.SlotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSlotNull()
            Me(Me.tableSchedules.SlotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tableSchedules.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tableSchedules.SYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tableSchedules.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tableSchedules.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInstructorNull() As Boolean
            Return Me.IsNull(Me.tableSchedules.InstructorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInstructorNull()
            Me(Me.tableSchedules.InstructorColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ClearanceRow
        Inherits Global.System.Data.DataRow
        
        Private tableClearance As ClearanceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClearance = CType(Me.Table,ClearanceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.StudentNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentNumber' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fullname() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.FullnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fullname' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.FullnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.SubjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectCode' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LecUnit() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.LecUnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LecUnit' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.LecUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabUnit() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.LabUnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabUnit' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.LabUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchedTime() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.SchedTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SchedTime' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.SchedTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabTime() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.LabTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabTime' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.LabTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Room() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.RoomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Room' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.RoomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester1() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.Semester1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester1' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.Semester1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY1() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.SY1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY1' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.SY1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Instructor() As String
            Get
                Try 
                    Return CType(Me(Me.tableClearance.InstructorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Instructor' in table 'Clearance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClearance.InstructorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studeprofileRow() As studeprofileRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("fk_registration_1")),studeprofileRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("fk_registration_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNumberNull() As Boolean
            Return Me.IsNull(Me.tableClearance.StudentNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNumberNull()
            Me(Me.tableClearance.StudentNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFullnameNull() As Boolean
            Return Me.IsNull(Me.tableClearance.FullnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFullnameNull()
            Me(Me.tableClearance.FullnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tableClearance.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tableClearance.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tableClearance.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tableClearance.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableClearance.SubjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectCodeNull()
            Me(Me.tableClearance.SubjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableClearance.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableClearance.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLecUnitNull() As Boolean
            Return Me.IsNull(Me.tableClearance.LecUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLecUnitNull()
            Me(Me.tableClearance.LecUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabUnitNull() As Boolean
            Return Me.IsNull(Me.tableClearance.LabUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabUnitNull()
            Me(Me.tableClearance.LabUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tableClearance.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tableClearance.SectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSchedTimeNull() As Boolean
            Return Me.IsNull(Me.tableClearance.SchedTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSchedTimeNull()
            Me(Me.tableClearance.SchedTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabTimeNull() As Boolean
            Return Me.IsNull(Me.tableClearance.LabTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabTimeNull()
            Me(Me.tableClearance.LabTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRoomNull() As Boolean
            Return Me.IsNull(Me.tableClearance.RoomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRoomNull()
            Me(Me.tableClearance.RoomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tableClearance.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tableClearance.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tableClearance.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tableClearance.SYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemester1Null() As Boolean
            Return Me.IsNull(Me.tableClearance.Semester1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemester1Null()
            Me(Me.tableClearance.Semester1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSY1Null() As Boolean
            Return Me.IsNull(Me.tableClearance.SY1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSY1Null()
            Me(Me.tableClearance.SY1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInstructorNull() As Boolean
            Return Me.IsNull(Me.tableClearance.InstructorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInstructorNull()
            Me(Me.tableClearance.InstructorColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class scholarshipListingRow
        Inherits Global.System.Data.DataRow
        
        Private tablescholarshipListing As scholarshipListingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablescholarshipListing = CType(Me.Table,scholarshipListingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tablescholarshipListing.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tablescholarshipListing.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tablescholarshipListing.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'scholarshipListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarshipListing.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tablescholarshipListing.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'scholarshipListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarshipListing.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MI() As String
            Get
                Try 
                    Return CType(Me(Me.tablescholarshipListing.MIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MI' in table 'scholarshipListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarshipListing.MIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tablescholarshipListing.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'scholarshipListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarshipListing.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel1() As String
            Get
                Try 
                    Return CType(Me(Me.tablescholarshipListing.YearLevel1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel1' in table 'scholarshipListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarshipListing.YearLevel1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tablescholarshipListing.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'scholarshipListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarshipListing.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Scholarship() As String
            Get
                Return CType(Me(Me.tablescholarshipListing.ScholarshipColumn),String)
            End Get
            Set
                Me(Me.tablescholarshipListing.ScholarshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prevGPA() As String
            Get
                Return CType(Me(Me.tablescholarshipListing.prevGPAColumn),String)
            End Get
            Set
                Me(Me.tablescholarshipListing.prevGPAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tablescholarshipListing.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'scholarshipListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarshipListing.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tablescholarshipListing.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'scholarshipListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescholarshipListing.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablescholarshipListing.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablescholarshipListing.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tablescholarshipListing.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tablescholarshipListing.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studeprofileRow() As studeprofileRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_semesterstude_11")),studeprofileRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_semesterstude_11"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tablescholarshipListing.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tablescholarshipListing.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tablescholarshipListing.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tablescholarshipListing.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMINull() As Boolean
            Return Me.IsNull(Me.tablescholarshipListing.MIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMINull()
            Me(Me.tablescholarshipListing.MIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tablescholarshipListing.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tablescholarshipListing.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevel1Null() As Boolean
            Return Me.IsNull(Me.tablescholarshipListing.YearLevel1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevel1Null()
            Me(Me.tablescholarshipListing.YearLevel1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tablescholarshipListing.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tablescholarshipListing.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tablescholarshipListing.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tablescholarshipListing.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tablescholarshipListing.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tablescholarshipListing.SYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class civilStatRow
        Inherits Global.System.Data.DataRow
        
        Private tablecivilStat As civilStatDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecivilStat = CType(Me.Table,civilStatDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentNumber() As String
            Get
                Return CType(Me(Me.tablecivilStat.StudentNumberColumn),String)
            End Get
            Set
                Me(Me.tablecivilStat.StudentNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tablecivilStat.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'civilStat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecivilStat.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tablecivilStat.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'civilStat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecivilStat.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tablecivilStat.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'civilStat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecivilStat.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CivilStatus() As String
            Get
                Return CType(Me(Me.tablecivilStat.CivilStatusColumn),String)
            End Get
            Set
                Me(Me.tablecivilStat.CivilStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tablecivilStat.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'civilStat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecivilStat.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel1() As String
            Get
                Try 
                    Return CType(Me(Me.tablecivilStat.YearLevel1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel1' in table 'civilStat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecivilStat.YearLevel1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tablecivilStat.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'civilStat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecivilStat.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Scholarship() As String
            Get
                Return CType(Me(Me.tablecivilStat.ScholarshipColumn),String)
            End Get
            Set
                Me(Me.tablecivilStat.ScholarshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prevGPA() As String
            Get
                Return CType(Me(Me.tablecivilStat.prevGPAColumn),String)
            End Get
            Set
                Me(Me.tablecivilStat.prevGPAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tablecivilStat.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'civilStat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecivilStat.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As String
            Get
                Try 
                    Return CType(Me(Me.tablecivilStat.SYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SY' in table 'civilStat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecivilStat.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablecivilStat.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablecivilStat.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tablecivilStat.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tablecivilStat.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studeprofileRow() As studeprofileRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_semesterstude_12")),studeprofileRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_semesterstude_12"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tablecivilStat.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tablecivilStat.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tablecivilStat.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tablecivilStat.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tablecivilStat.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tablecivilStat.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tablecivilStat.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tablecivilStat.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevel1Null() As Boolean
            Return Me.IsNull(Me.tablecivilStat.YearLevel1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevel1Null()
            Me(Me.tablecivilStat.YearLevel1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tablecivilStat.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tablecivilStat.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tablecivilStat.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tablecivilStat.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYNull() As Boolean
            Return Me.IsNull(Me.tablecivilStat.SYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYNull()
            Me(Me.tablecivilStat.SYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MRRow
        Inherits Global.System.Data.DataRow
        
        Private tableMR As MRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMR = CType(Me.Table,MRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ctrlNo() As String
            Get
                Return CType(Me(Me.tableMR.ctrlNoColumn),String)
            End Get
            Set
                Me(Me.tableMR.ctrlNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemName() As String
            Get
                Return CType(Me(Me.tableMR.itemNameColumn),String)
            End Get
            Set
                Me(Me.tableMR.itemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Return CType(Me(Me.tableMR.descriptionColumn),String)
            End Get
            Set
                Me(Me.tableMR.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemCondition() As String
            Get
                Return CType(Me(Me.tableMR.itemConditionColumn),String)
            End Get
            Set
                Me(Me.tableMR.itemConditionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property serialNo() As String
            Get
                Return CType(Me(Me.tableMR.serialNoColumn),String)
            End Get
            Set
                Me(Me.tableMR.serialNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property model() As String
            Get
                Return CType(Me(Me.tableMR.modelColumn),String)
            End Get
            Set
                Me(Me.tableMR.modelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property notes() As String
            Get
                Return CType(Me(Me.tableMR.notesColumn),String)
            End Get
            Set
                Me(Me.tableMR.notesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMR.qtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qty' in table 'MR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMR.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableMR.unitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unit' in table 'MR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMR.unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property acquiredDate() As Date
            Get
                Return CType(Me(Me.tableMR.acquiredDateColumn),Date)
            End Get
            Set
                Me(Me.tableMR.acquiredDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Accountable() As String
            Get
                Try 
                    Return CType(Me(Me.tableMR.AccountableColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Accountable' in table 'MR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMR.AccountableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property empPosition() As String
            Get
                Return CType(Me(Me.tableMR.empPositionColumn),String)
            End Get
            Set
                Me(Me.tableMR.empPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Department() As String
            Get
                Return CType(Me(Me.tableMR.DepartmentColumn),String)
            End Get
            Set
                Me(Me.tableMR.DepartmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tableMR.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tableMR.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tableMR.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tableMR.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Division() As String
            Get
                Return CType(Me(Me.tableMR.DivisionColumn),String)
            End Get
            Set
                Me(Me.tableMR.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PropertyCustodian() As String
            Get
                Return CType(Me(Me.tableMR.PropertyCustodianColumn),String)
            End Get
            Set
                Me(Me.tableMR.PropertyCustodianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableMR.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'MR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMR.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableMR.qtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetqtyNull()
            Me(Me.tableMR.qtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunitNull() As Boolean
            Return Me.IsNull(Me.tableMR.unitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunitNull()
            Me(Me.tableMR.unitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAccountableNull() As Boolean
            Return Me.IsNull(Me.tableMR.AccountableColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAccountableNull()
            Me(Me.tableMR.AccountableColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tableMR.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tableMR.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ls_itemsRow
        Inherits Global.System.Data.DataRow
        
        Private tablels_items As ls_itemsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablels_items = CType(Me.Table,ls_itemsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ctrlNo() As String
            Get
                Return CType(Me(Me.tablels_items.ctrlNoColumn),String)
            End Get
            Set
                Me(Me.tablels_items.ctrlNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemName() As String
            Get
                Return CType(Me(Me.tablels_items.itemNameColumn),String)
            End Get
            Set
                Me(Me.tablels_items.itemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Return CType(Me(Me.tablels_items.descriptionColumn),String)
            End Get
            Set
                Me(Me.tablels_items.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemCondition() As String
            Get
                Return CType(Me(Me.tablels_items.itemConditionColumn),String)
            End Get
            Set
                Me(Me.tablels_items.itemConditionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property serialNo() As String
            Get
                Return CType(Me(Me.tablels_items.serialNoColumn),String)
            End Get
            Set
                Me(Me.tablels_items.serialNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property model() As String
            Get
                Return CType(Me(Me.tablels_items.modelColumn),String)
            End Get
            Set
                Me(Me.tablels_items.modelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property accountable() As String
            Get
                Return CType(Me(Me.tablels_items.accountableColumn),String)
            End Get
            Set
                Me(Me.tablels_items.accountableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property acquiredDate() As Date
            Get
                Return CType(Me(Me.tablels_items.acquiredDateColumn),Date)
            End Get
            Set
                Me(Me.tablels_items.acquiredDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Division() As String
            Get
                Return CType(Me(Me.tablels_items.DivisionColumn),String)
            End Get
            Set
                Me(Me.tablels_items.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablels_items.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablels_items.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolAddress() As String
            Get
                Return CType(Me(Me.tablels_items.SchoolAddressColumn),String)
            End Get
            Set
                Me(Me.tablels_items.SchoolAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablels_items.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'ls_items' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablels_items.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolHead() As String
            Get
                Return CType(Me(Me.tablels_items.SchoolHeadColumn),String)
            End Get
            Set
                Me(Me.tablels_items.SchoolHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sHeadPosition() As String
            Get
                Return CType(Me(Me.tablels_items.sHeadPositionColumn),String)
            End Get
            Set
                Me(Me.tablels_items.sHeadPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PropertyCustodian() As String
            Get
                Return CType(Me(Me.tablels_items.PropertyCustodianColumn),String)
            End Get
            Set
                Me(Me.tablels_items.PropertyCustodianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property empPosition() As String
            Get
                Return CType(Me(Me.tablels_items.empPositionColumn),String)
            End Get
            Set
                Me(Me.tablels_items.empPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tablels_items.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tablels_items.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class byauthorRow
        Inherits Global.System.Data.DataRow
        
        Private tablebyauthor As byauthorDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablebyauthor = CType(Me.Table,byauthorDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BookNo() As String
            Get
                Return CType(Me(Me.tablebyauthor.BookNoColumn),String)
            End Get
            Set
                Me(Me.tablebyauthor.BookNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Return CType(Me(Me.tablebyauthor.TitleColumn),String)
            End Get
            Set
                Me(Me.tablebyauthor.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Category() As String
            Get
                Return CType(Me(Me.tablebyauthor.CategoryColumn),String)
            End Get
            Set
                Me(Me.tablebyauthor.CategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Author() As String
            Get
                Return CType(Me(Me.tablebyauthor.AuthorColumn),String)
            End Get
            Set
                Me(Me.tablebyauthor.AuthorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BookStatus() As String
            Get
                Return CType(Me(Me.tablebyauthor.BookStatusColumn),String)
            End Get
            Set
                Me(Me.tablebyauthor.BookStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property letterHead() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablebyauthor.letterHeadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'letterHead' in table 'byauthor' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebyauthor.letterHeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsletterHeadNull() As Boolean
            Return Me.IsNull(Me.tablebyauthor.letterHeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetletterHeadNull()
            Me(Me.tablebyauthor.letterHeadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollmentHistoryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollmentHistoryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollmentHistoryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollmentHistoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class paymentsaccountsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As paymentsaccountsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As paymentsaccountsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As paymentsaccountsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class accountSummaryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As accountSummaryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As accountSummaryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As accountSummaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CollectionsSummaryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CollectionsSummaryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CollectionsSummaryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CollectionsSummaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ScholarsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ScholarsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ScholarsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ScholarsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class expensesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As expensesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As expensesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As expensesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class semesterstudeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As semesterstudeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As semesterstudeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As semesterstudeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class studeprofileRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As studeprofileRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As studeprofileRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As studeprofileRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class incomestatementRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As incomestatementRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As incomestatementRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As incomestatementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class promissoryNotesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As promissoryNotesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As promissoryNotesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As promissoryNotesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class companyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As companyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As companyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As companyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SchedulesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SchedulesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SchedulesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SchedulesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ClearanceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ClearanceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ClearanceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ClearanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class scholarshipListingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As scholarshipListingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As scholarshipListingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As scholarshipListingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class civilStatRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As civilStatRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As civilStatRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As civilStatRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ls_itemsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ls_itemsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ls_itemsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ls_itemsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class byauthorRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As byauthorRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As byauthorRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As byauthorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ReportsTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollmentHistoryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollmentHistory"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, concat(p.FirstName,' ',p.MiddleName,' ',p.LastName) as St"& _ 
                "udentName, s.Course, s.YearLevel, s.SY, s.Semester, st.letterHead from studeprof"& _ 
                "ile p join semesterstude s on p.StudentNumber=s.StudentNumber join srms_settings"& _ 
                " st on p.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.EnrollmentHistoryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.EnrollmentHistoryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.EnrollmentHistoryDataTable = New Reports.EnrollmentHistoryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class paymentsaccountsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "paymentsaccounts"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("PDate", "PDate")
            tableMapping.ColumnMappings.Add("ORNumber", "ORNumber")
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            tableMapping.ColumnMappings.Add("PaymentType", "PaymentType")
            tableMapping.ColumnMappings.Add("CheckNumber", "CheckNumber")
            tableMapping.ColumnMappings.Add("Sem", "Sem")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("Term", "Term")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `srmscollege_demo`.`paymentsaccounts` WHERE ((`ID` = @Original_ID) AN"& _ 
                "D (`StudentNumber` = @Original_StudentNumber) AND (`FirstName` = @Original_First"& _ 
                "Name) AND (`MiddleName` = @Original_MiddleName) AND (`LastName` = @Original_Last"& _ 
                "Name) AND (`PDate` = @Original_PDate) AND (`ORNumber` = @Original_ORNumber) AND "& _ 
                "(`Amount` = @Original_Amount) AND (`PaymentType` = @Original_PaymentType) AND (`"& _ 
                "CheckNumber` = @Original_CheckNumber) AND (`Sem` = @Original_Sem) AND (`SY` = @O"& _ 
                "riginal_SY) AND (`Address` = @Original_Address) AND (`Term` = @Original_Term))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_FirstName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FirstName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_MiddleName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MiddleName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_LastName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_PDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ORNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Amount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Amount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_PaymentType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PaymentType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_CheckNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CheckNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Sem"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Address"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Term"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Term"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `srmscollege_demo`.`paymentsaccounts` (`StudentNumber`, `FirstName`, "& _ 
                "`MiddleName`, `LastName`, `PDate`, `ORNumber`, `Amount`, `PaymentType`, `CheckNu"& _ 
                "mber`, `Sem`, `SY`, `Address`, `Term`) VALUES (@StudentNumber, @FirstName, @Midd"& _ 
                "leName, @LastName, @PDate, @ORNumber, @Amount, @PaymentType, @CheckNumber, @Sem,"& _ 
                " @SY, @Address, @Term)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@FirstName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FirstName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@MiddleName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MiddleName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@LastName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@PDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@ORNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORNumber"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Amount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Amount"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@PaymentType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PaymentType"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@CheckNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CheckNumber"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Sem"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Address"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Term"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Term"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `srmscollege_demo`.`paymentsaccounts` SET `StudentNumber` = @StudentNumber"& _ 
                ", `FirstName` = @FirstName, `MiddleName` = @MiddleName, `LastName` = @LastName, "& _ 
                "`PDate` = @PDate, `ORNumber` = @ORNumber, `Amount` = @Amount, `PaymentType` = @P"& _ 
                "aymentType, `CheckNumber` = @CheckNumber, `Sem` = @Sem, `SY` = @SY, `Address` = "& _ 
                "@Address, `Term` = @Term WHERE ((`ID` = @Original_ID) AND (`StudentNumber` = @Or"& _ 
                "iginal_StudentNumber) AND (`FirstName` = @Original_FirstName) AND (`MiddleName` "& _ 
                "= @Original_MiddleName) AND (`LastName` = @Original_LastName) AND (`PDate` = @Or"& _ 
                "iginal_PDate) AND (`ORNumber` = @Original_ORNumber) AND (`Amount` = @Original_Am"& _ 
                "ount) AND (`PaymentType` = @Original_PaymentType) AND (`CheckNumber` = @Original"& _ 
                "_CheckNumber) AND (`Sem` = @Original_Sem) AND (`SY` = @Original_SY) AND (`Addres"& _ 
                "s` = @Original_Address) AND (`Term` = @Original_Term))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@FirstName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FirstName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@MiddleName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MiddleName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@LastName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@PDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@ORNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Amount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Amount"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@PaymentType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PaymentType"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@CheckNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CheckNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Sem"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Address"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Term"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Term"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_FirstName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FirstName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_MiddleName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MiddleName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_LastName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_PDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ORNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Amount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Amount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_PaymentType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PaymentType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_CheckNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CheckNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Sem"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Address"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Term"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Term"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM paymentsaccounts"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.paymentsaccountsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.paymentsaccountsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.paymentsaccountsDataTable = New Reports.paymentsaccountsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Reports.paymentsaccountsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Reports) As Integer
            Return Me.Adapter.Update(dataSet, "paymentsaccounts")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As UInteger, ByVal Original_StudentNumber As String, ByVal Original_FirstName As String, ByVal Original_MiddleName As String, ByVal Original_LastName As String, ByVal Original_PDate As Date, ByVal Original_ORNumber As String, ByVal Original_Amount As Double, ByVal Original_PaymentType As String, ByVal Original_CheckNumber As String, ByVal Original_Sem As String, ByVal Original_SY As String, ByVal Original_Address As String, ByVal Original_Term As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,UInteger)
            If (Original_StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentNumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_StudentNumber,String)
            End If
            If (Original_FirstName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FirstName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FirstName,String)
            End If
            If (Original_MiddleName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MiddleName")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MiddleName,String)
            End If
            If (Original_LastName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LastName")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_LastName,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PDate,Date)
            If (Original_ORNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ORNumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ORNumber,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Amount,Double)
            If (Original_PaymentType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PaymentType")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_PaymentType,String)
            End If
            If (Original_CheckNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CheckNumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_CheckNumber,String)
            End If
            If (Original_Sem Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Sem")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Sem,String)
            End If
            If (Original_SY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SY")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_SY,String)
            End If
            If (Original_Address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Address,String)
            End If
            If (Original_Term Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Term")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_Term,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal StudentNumber As String, ByVal FirstName As String, ByVal MiddleName As String, ByVal LastName As String, ByVal PDate As Date, ByVal ORNumber As String, ByVal Amount As Double, ByVal PaymentType As String, ByVal CheckNumber As String, ByVal Sem As String, ByVal SY As String, ByVal Address As String, ByVal Term As String) As Integer
            If (StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentNumber")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(StudentNumber,String)
            End If
            If (FirstName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FirstName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FirstName,String)
            End If
            If (MiddleName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MiddleName")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MiddleName,String)
            End If
            If (LastName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LastName")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LastName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(PDate,Date)
            If (ORNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ORNumber")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ORNumber,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Amount,Double)
            If (PaymentType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PaymentType")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PaymentType,String)
            End If
            If (CheckNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CheckNumber")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CheckNumber,String)
            End If
            If (Sem Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Sem")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Sem,String)
            End If
            If (SY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SY")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SY,String)
            End If
            If (Address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Address,String)
            End If
            If (Term Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Term")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Term,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal StudentNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal PDate As Date,  _
                    ByVal ORNumber As String,  _
                    ByVal Amount As Double,  _
                    ByVal PaymentType As String,  _
                    ByVal CheckNumber As String,  _
                    ByVal Sem As String,  _
                    ByVal SY As String,  _
                    ByVal Address As String,  _
                    ByVal Term As String,  _
                    ByVal Original_ID As UInteger,  _
                    ByVal Original_StudentNumber As String,  _
                    ByVal Original_FirstName As String,  _
                    ByVal Original_MiddleName As String,  _
                    ByVal Original_LastName As String,  _
                    ByVal Original_PDate As Date,  _
                    ByVal Original_ORNumber As String,  _
                    ByVal Original_Amount As Double,  _
                    ByVal Original_PaymentType As String,  _
                    ByVal Original_CheckNumber As String,  _
                    ByVal Original_Sem As String,  _
                    ByVal Original_SY As String,  _
                    ByVal Original_Address As String,  _
                    ByVal Original_Term As String) As Integer
            If (StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(StudentNumber,String)
            End If
            If (FirstName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FirstName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FirstName,String)
            End If
            If (MiddleName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MiddleName")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MiddleName,String)
            End If
            If (LastName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LastName")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LastName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PDate,Date)
            If (ORNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ORNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ORNumber,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Amount,Double)
            If (PaymentType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PaymentType")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PaymentType,String)
            End If
            If (CheckNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CheckNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CheckNumber,String)
            End If
            If (Sem Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Sem")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Sem,String)
            End If
            If (SY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SY")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SY,String)
            End If
            If (Address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Address,String)
            End If
            If (Term Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Term")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Term,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ID,UInteger)
            If (Original_StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_StudentNumber,String)
            End If
            If (Original_FirstName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FirstName")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_FirstName,String)
            End If
            If (Original_MiddleName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MiddleName")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_MiddleName,String)
            End If
            If (Original_LastName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LastName")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_LastName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_PDate,Date)
            If (Original_ORNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ORNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ORNumber,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Amount,Double)
            If (Original_PaymentType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PaymentType")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_PaymentType,String)
            End If
            If (Original_CheckNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CheckNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_CheckNumber,String)
            End If
            If (Original_Sem Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Sem")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Sem,String)
            End If
            If (Original_SY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SY")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_SY,String)
            End If
            If (Original_Address Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Address,String)
            End If
            If (Original_Term Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Term")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Term,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class accountSummaryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "accountSummary"
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("sum(AcctTotal)", "sum(AcctTotal)")
            tableMapping.ColumnMappings.Add("sum(TotalPayments)", "sum(TotalPayments)")
            tableMapping.ColumnMappings.Add("sum(CurrentBalance)", "sum(CurrentBalance)")
            tableMapping.ColumnMappings.Add("Sem", "Sem")
            tableMapping.ColumnMappings.Add("SY", "SY")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select Course, sum(AcctTotal), sum(TotalPayments), sum(CurrentBalance), Sem, SY f"& _ 
                "rom studeaccount group by Course"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.accountSummaryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.accountSummaryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.accountSummaryDataTable = New Reports.accountSummaryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CollectionsSummaryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CollectionsSummary"
            tableMapping.ColumnMappings.Add("PDate", "PDate")
            tableMapping.ColumnMappings.Add("ORNumber", "ORNumber")
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("Payor", "Payor")
            tableMapping.ColumnMappings.Add("Cashier", "Cashier")
            tableMapping.ColumnMappings.Add("ORStatus", "ORStatus")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `srmscollege_demo`.`paymentsaccounts` WHERE ((`PDate` = @Original_PDa"& _ 
                "te) AND (`ORNumber` = @Original_ORNumber) AND (`Amount` = @Original_Amount) AND "& _ 
                "(`StudentNumber` = @Original_StudentNumber) AND (`Cashier` = @Original_Cashier) "& _ 
                "AND (`ORStatus` = @Original_ORStatus) AND (`ID` = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_PDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ORNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Amount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Amount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Cashier"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Cashier"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ORStatus"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORStatus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `srmscollege_demo`.`paymentsaccounts` SET `PDate` = @PDate, `ORNumber` = @"& _ 
                "ORNumber, `Amount` = @Amount, `StudentNumber` = @StudentNumber, `Cashier` = @Cas"& _ 
                "hier, `ORStatus` = @ORStatus WHERE ((`PDate` = @Original_PDate) AND (`ORNumber` "& _ 
                "= @Original_ORNumber) AND (`Amount` = @Original_Amount) AND (`StudentNumber` = @"& _ 
                "Original_StudentNumber) AND (`Cashier` = @Original_Cashier) AND (`ORStatus` = @O"& _ 
                "riginal_ORStatus) AND (`ID` = @Original_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@PDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@ORNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Amount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Amount"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Cashier"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Cashier"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@ORStatus"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORStatus"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_PDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ORNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Amount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Amount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Cashier"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Cashier"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ORStatus"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ORStatus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PDate, ORNumber, Amount, StudentNumber, concat(LastName,', ',FirstName,' '"& _ 
                ",MiddleName) as Payor, Cashier, ORStatus, ID FROM paymentsaccounts"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.CollectionsSummaryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.CollectionsSummaryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.CollectionsSummaryDataTable = New Reports.CollectionsSummaryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Reports.CollectionsSummaryDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Reports) As Integer
            Return Me.Adapter.Update(dataSet, "CollectionsSummary")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ScholarsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Scholars"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("Scholarship", "Scholarship")
            tableMapping.ColumnMappings.Add("prevGPA", "prevGPA")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MI", "MI")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            tableMapping.ColumnMappings.Add("Course1", "Course1")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, p.LastName, p.FirstName, MID(p.MiddleName,1,1) as MI, s.Y"& _ 
                "earLevel, s.Course, concat(s.YearLevel,' - ',s.Course) as Course, s.Scholarship,"& _ 
                " s.prevGPA, s.Semester, s.SY, st.SchoolName, st.SchoolAddress, st.letterHead fro"& _ 
                "m studeprofile p join semesterstude s on p.StudentNumber=s.StudentNumber join sr"& _ 
                "ms_settings st on s.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.ScholarsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.ScholarsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.ScholarsDataTable = New Reports.ScholarsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class expensesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "expenses"
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("Responsible", "Responsible")
            tableMapping.ColumnMappings.Add("Category", "Category")
            tableMapping.ColumnMappings.Add("ExpenseDate", "ExpenseDate")
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Description, Amount, Responsible, ExpenseDate, Category FROM expenses grou"& _ 
                "p by ExpenseDate"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.expensesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.expensesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.expensesDataTable = New Reports.expensesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class semesterstudeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "semesterstude"
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("EnrolledCount", "EnrolledCount")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("StatusCount", "StatusCount")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("Registrar", "Registrar")
            tableMapping.ColumnMappings.Add("registrarPosition", "registrarPosition")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT p.Sex, s.Course, count(s.Status) as StatusCount, s.Status, s.YearLevel, co"& _ 
                "unt(s.Course) as EnrolledCount, s.Semester, s.SY, st.SchoolName, st.SchoolAddres"& _ 
                "s, st.SchoolHead, st.sHeadPosition, st.Registrar, st.registrarPosition  FROM stu"& _ 
                "deprofile p join semesterstude s on p.StudentNumber=s.StudentNumber join srms_se"& _ 
                "ttings st on s.settingsID=st.settingsID group by s.Course, s.YearLevel, s.Status"& _ 
                " order by s.Course"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.semesterstudeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.semesterstudeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.semesterstudeDataTable = New Reports.semesterstudeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class studeprofileTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "studeprofile"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("CivilStatus", "CivilStatus")
            tableMapping.ColumnMappings.Add("BirthPlace", "BirthPlace")
            tableMapping.ColumnMappings.Add("Citizenship", "Citizenship")
            tableMapping.ColumnMappings.Add("Religion", "Religion")
            tableMapping.ColumnMappings.Add("BloodType", "BloodType")
            tableMapping.ColumnMappings.Add("TelNumber", "TelNumber")
            tableMapping.ColumnMappings.Add("MobileNumber", "MobileNumber")
            tableMapping.ColumnMappings.Add("HighSchool", "HighSchool")
            tableMapping.ColumnMappings.Add("HSAddress", "HSAddress")
            tableMapping.ColumnMappings.Add("College", "College")
            tableMapping.ColumnMappings.Add("CAddress", "CAddress")
            tableMapping.ColumnMappings.Add("Requirements", "Requirements")
            tableMapping.ColumnMappings.Add("Encoder", "Encoder")
            tableMapping.ColumnMappings.Add("BirthDate", "BirthDate")
            tableMapping.ColumnMappings.Add("AdmissionDate", "AdmissionDate")
            tableMapping.ColumnMappings.Add("GraduationDate", "GraduationDate")
            tableMapping.ColumnMappings.Add("Guardian", "Guardian")
            tableMapping.ColumnMappings.Add("GuardianContact", "GuardianContact")
            tableMapping.ColumnMappings.Add("GuardianAddress", "GuardianAddress")
            tableMapping.ColumnMappings.Add("ImagePath", "ImagePath")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("Elementary", "Elementary")
            tableMapping.ColumnMappings.Add("ElemAddress", "ElemAddress")
            tableMapping.ColumnMappings.Add("GuardianRelationship", "GuardianRelationship")
            tableMapping.ColumnMappings.Add("GuardianTelNo", "GuardianTelNo")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("Father", "Father")
            tableMapping.ColumnMappings.Add("FOccupation", "FOccupation")
            tableMapping.ColumnMappings.Add("Mother", "Mother")
            tableMapping.ColumnMappings.Add("MOccupation", "MOccupation")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Title", "Title")
            tableMapping.ColumnMappings.Add("Pronoun", "Pronoun")
            tableMapping.ColumnMappings.Add("Pronoun2", "Pronoun2")
            tableMapping.ColumnMappings.Add("Pronoun3", "Pronoun3")
            tableMapping.ColumnMappings.Add("Ethnicity", "Ethnicity")
            tableMapping.ColumnMappings.Add("ParentsMonthly", "ParentsMonthly")
            tableMapping.ColumnMappings.Add("Province", "Province")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("Brgy", "Brgy")
            tableMapping.ColumnMappings.Add("Sitio", "Sitio")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `srmscollege_demo`.`studeprofile` WHERE ((`StudentNumber` = @Original"& _ 
                "_StudentNumber) AND ((@IsNull_FirstName = 1 AND `FirstName` IS NULL) OR (`FirstN"& _ 
                "ame` = @Original_FirstName)) AND ((@IsNull_MiddleName = 1 AND `MiddleName` IS NU"& _ 
                "LL) OR (`MiddleName` = @Original_MiddleName)) AND ((@IsNull_LastName = 1 AND `La"& _ 
                "stName` IS NULL) OR (`LastName` = @Original_LastName)) AND (`Sex` = @Original_Se"& _ 
                "x) AND (`CivilStatus` = @Original_CivilStatus) AND (`BirthPlace` = @Original_Bir"& _ 
                "thPlace) AND (`Citizenship` = @Original_Citizenship) AND (`Religion` = @Original"& _ 
                "_Religion) AND (`BloodType` = @Original_BloodType) AND (`TelNumber` = @Original_"& _ 
                "TelNumber) AND (`MobileNumber` = @Original_MobileNumber) AND (`HighSchool` = @Or"& _ 
                "iginal_HighSchool) AND (`HSAddress` = @Original_HSAddress) AND (`College` = @Ori"& _ 
                "ginal_College) AND (`CAddress` = @Original_CAddress) AND (`Encoder` = @Original_"& _ 
                "Encoder) AND (`BirthDate` = @Original_BirthDate) AND (`AdmissionDate` = @Origina"& _ 
                "l_AdmissionDate) AND (`GraduationDate` = @Original_GraduationDate) AND (`Guardia"& _ 
                "n` = @Original_Guardian) AND (`GuardianContact` = @Original_GuardianContact) AND"& _ 
                " (`GuardianAddress` = @Original_GuardianAddress) AND (`ImagePath` = @Original_Im"& _ 
                "agePath) AND (`Course` = @Original_Course) AND (`Elementary` = @Original_Element"& _ 
                "ary) AND (`ElemAddress` = @Original_ElemAddress) AND (`GuardianRelationship` = @"& _ 
                "Original_GuardianRelationship) AND (`GuardianTelNo` = @Original_GuardianTelNo) A"& _ 
                "ND (`EmailAddress` = @Original_EmailAddress) AND (`Father` = @Original_Father) A"& _ 
                "ND (`FOccupation` = @Original_FOccupation) AND (`Mother` = @Original_Mother) AND"& _ 
                " (`MOccupation` = @Original_MOccupation) AND (`Age` = @Original_Age) AND (`Title"& _ 
                "` = @Original_Title) AND (`Pronoun` = @Original_Pronoun) AND (`Pronoun2` = @Orig"& _ 
                "inal_Pronoun2) AND (`Pronoun3` = @Original_Pronoun3) AND (`Ethnicity` = @Origina"& _ 
                "l_Ethnicity) AND (`ParentsMonthly` = @Original_ParentsMonthly) AND (`Province` ="& _ 
                " @Original_Province) AND (`City` = @Original_City) AND (`Brgy` = @Original_Brgy)"& _ 
                " AND (`Sitio` = @Original_Sitio))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_FirstName"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "FirstName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_FirstName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FirstName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_MiddleName"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "MiddleName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_MiddleName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MiddleName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_LastName"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LastName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_LastName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Sex"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sex"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_CivilStatus"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CivilStatus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_BirthPlace"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BirthPlace"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Citizenship"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Citizenship"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Religion"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Religion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_BloodType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BloodType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_TelNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TelNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_MobileNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MobileNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_HighSchool"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HighSchool"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_HSAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HSAddress"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_College"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "College"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_CAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CAddress"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Encoder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Encoder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_BirthDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "BirthDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_AdmissionDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "AdmissionDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_GraduationDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "GraduationDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Guardian"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Guardian"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_GuardianContact"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianContact"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_GuardianAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianAddress"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ImagePath"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ImagePath"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Elementary"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Elementary"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ElemAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ElemAddress"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_GuardianRelationship"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianRelationship"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_GuardianTelNo"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianTelNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_EmailAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EmailAddress"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Father"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Father"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_FOccupation"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FOccupation"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Mother"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Mother"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_MOccupation"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MOccupation"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Age"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Age"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Title"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Title"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Pronoun"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Pronoun"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Pronoun2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Pronoun2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Pronoun3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Pronoun3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Ethnicity"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Ethnicity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ParentsMonthly"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ParentsMonthly"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Province"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Province"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_City"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "City"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Brgy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Brgy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Sitio"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sitio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `srmscollege_demo`.`studeprofile` (`StudentNumber`, `FirstName`, `Mid"& _ 
                "dleName`, `LastName`, `Sex`, `CivilStatus`, `BirthPlace`, `Citizenship`, `Religi"& _ 
                "on`, `BloodType`, `TelNumber`, `MobileNumber`, `HighSchool`, `HSAddress`, `Colle"& _ 
                "ge`, `CAddress`, `Requirements`, `Encoder`, `BirthDate`, `AdmissionDate`, `Gradu"& _ 
                "ationDate`, `Guardian`, `GuardianContact`, `GuardianAddress`, `ImagePath`, `Cour"& _ 
                "se`, `Elementary`, `ElemAddress`, `GuardianRelationship`, `GuardianTelNo`, `Emai"& _ 
                "lAddress`, `Father`, `FOccupation`, `Mother`, `MOccupation`, `Age`, `Title`, `Pr"& _ 
                "onoun`, `Pronoun2`, `Pronoun3`, `Ethnicity`, `ParentsMonthly`, `Province`, `City"& _ 
                "`, `Brgy`, `Sitio`) VALUES (@StudentNumber, @FirstName, @MiddleName, @LastName, "& _ 
                "@Sex, @CivilStatus, @BirthPlace, @Citizenship, @Religion, @BloodType, @TelNumber"& _ 
                ", @MobileNumber, @HighSchool, @HSAddress, @College, @CAddress, @Requirements, @E"& _ 
                "ncoder, @BirthDate, @AdmissionDate, @GraduationDate, @Guardian, @GuardianContact"& _ 
                ", @GuardianAddress, @ImagePath, @Course, @Elementary, @ElemAddress, @GuardianRel"& _ 
                "ationship, @GuardianTelNo, @EmailAddress, @Father, @FOccupation, @Mother, @MOccu"& _ 
                "pation, @Age, @Title, @Pronoun, @Pronoun2, @Pronoun3, @Ethnicity, @ParentsMonthl"& _ 
                "y, @Province, @City, @Brgy, @Sitio)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@FirstName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FirstName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@MiddleName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MiddleName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@LastName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Sex"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sex"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@CivilStatus"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CivilStatus"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@BirthPlace"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BirthPlace"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Citizenship"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Citizenship"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Religion"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Religion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@BloodType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BloodType"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@TelNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TelNumber"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@MobileNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MobileNumber"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@HighSchool"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HighSchool"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@HSAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HSAddress"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@College"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "College"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@CAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CAddress"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Requirements"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Text
            param.IsNullable = true
            param.SourceColumn = "Requirements"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Encoder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Encoder"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@BirthDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "BirthDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AdmissionDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "AdmissionDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@GraduationDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "GraduationDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Guardian"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Guardian"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@GuardianContact"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianContact"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@GuardianAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianAddress"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@ImagePath"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ImagePath"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Elementary"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Elementary"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@ElemAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ElemAddress"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@GuardianRelationship"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianRelationship"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@GuardianTelNo"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianTelNo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@EmailAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EmailAddress"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Father"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Father"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@FOccupation"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FOccupation"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Mother"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Mother"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@MOccupation"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MOccupation"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Age"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Age"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Title"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Title"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Pronoun"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Pronoun"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Pronoun2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Pronoun2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Pronoun3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Pronoun3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Ethnicity"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Ethnicity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@ParentsMonthly"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ParentsMonthly"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Province"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Province"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@City"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "City"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Brgy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Brgy"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Sitio"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sitio"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `srmscollege_demo`.`studeprofile` SET `StudentNumber` = @StudentNumber, `F"& _ 
                "irstName` = @FirstName, `MiddleName` = @MiddleName, `LastName` = @LastName, `Sex"& _ 
                "` = @Sex, `CivilStatus` = @CivilStatus, `BirthPlace` = @BirthPlace, `Citizenship"& _ 
                "` = @Citizenship, `Religion` = @Religion, `BloodType` = @BloodType, `TelNumber` "& _ 
                "= @TelNumber, `MobileNumber` = @MobileNumber, `HighSchool` = @HighSchool, `HSAdd"& _ 
                "ress` = @HSAddress, `College` = @College, `CAddress` = @CAddress, `Requirements`"& _ 
                " = @Requirements, `Encoder` = @Encoder, `BirthDate` = @BirthDate, `AdmissionDate"& _ 
                "` = @AdmissionDate, `GraduationDate` = @GraduationDate, `Guardian` = @Guardian, "& _ 
                "`GuardianContact` = @GuardianContact, `GuardianAddress` = @GuardianAddress, `Ima"& _ 
                "gePath` = @ImagePath, `Course` = @Course, `Elementary` = @Elementary, `ElemAddre"& _ 
                "ss` = @ElemAddress, `GuardianRelationship` = @GuardianRelationship, `GuardianTel"& _ 
                "No` = @GuardianTelNo, `EmailAddress` = @EmailAddress, `Father` = @Father, `FOccu"& _ 
                "pation` = @FOccupation, `Mother` = @Mother, `MOccupation` = @MOccupation, `Age` "& _ 
                "= @Age, `Title` = @Title, `Pronoun` = @Pronoun, `Pronoun2` = @Pronoun2, `Pronoun"& _ 
                "3` = @Pronoun3, `Ethnicity` = @Ethnicity, `ParentsMonthly` = @ParentsMonthly, `P"& _ 
                "rovince` = @Province, `City` = @City, `Brgy` = @Brgy, `Sitio` = @Sitio WHERE ((`"& _ 
                "StudentNumber` = @Original_StudentNumber) AND ((@IsNull_FirstName = 1 AND `First"& _ 
                "Name` IS NULL) OR (`FirstName` = @Original_FirstName)) AND ((@IsNull_MiddleName "& _ 
                "= 1 AND `MiddleName` IS NULL) OR (`MiddleName` = @Original_MiddleName)) AND ((@I"& _ 
                "sNull_LastName = 1 AND `LastName` IS NULL) OR (`LastName` = @Original_LastName))"& _ 
                " AND (`Sex` = @Original_Sex) AND (`CivilStatus` = @Original_CivilStatus) AND (`B"& _ 
                "irthPlace` = @Original_BirthPlace) AND (`Citizenship` = @Original_Citizenship) A"& _ 
                "ND (`Religion` = @Original_Religion) AND (`BloodType` = @Original_BloodType) AND"& _ 
                " (`TelNumber` = @Original_TelNumber) AND (`MobileNumber` = @Original_MobileNumbe"& _ 
                "r) AND (`HighSchool` = @Original_HighSchool) AND (`HSAddress` = @Original_HSAddr"& _ 
                "ess) AND (`College` = @Original_College) AND (`CAddress` = @Original_CAddress) A"& _ 
                "ND (`Encoder` = @Original_Encoder) AND (`BirthDate` = @Original_BirthDate) AND ("& _ 
                "`AdmissionDate` = @Original_AdmissionDate) AND (`GraduationDate` = @Original_Gra"& _ 
                "duationDate) AND (`Guardian` = @Original_Guardian) AND (`GuardianContact` = @Ori"& _ 
                "ginal_GuardianContact) AND (`GuardianAddress` = @Original_GuardianAddress) AND ("& _ 
                "`ImagePath` = @Original_ImagePath) AND (`Course` = @Original_Course) AND (`Eleme"& _ 
                "ntary` = @Original_Elementary) AND (`ElemAddress` = @Original_ElemAddress) AND ("& _ 
                "`GuardianRelationship` = @Original_GuardianRelationship) AND (`GuardianTelNo` = "& _ 
                "@Original_GuardianTelNo) AND (`EmailAddress` = @Original_EmailAddress) AND (`Fat"& _ 
                "her` = @Original_Father) AND (`FOccupation` = @Original_FOccupation) AND (`Mothe"& _ 
                "r` = @Original_Mother) AND (`MOccupation` = @Original_MOccupation) AND (`Age` = "& _ 
                "@Original_Age) AND (`Title` = @Original_Title) AND (`Pronoun` = @Original_Pronou"& _ 
                "n) AND (`Pronoun2` = @Original_Pronoun2) AND (`Pronoun3` = @Original_Pronoun3) A"& _ 
                "ND (`Ethnicity` = @Original_Ethnicity) AND (`ParentsMonthly` = @Original_Parents"& _ 
                "Monthly) AND (`Province` = @Original_Province) AND (`City` = @Original_City) AND"& _ 
                " (`Brgy` = @Original_Brgy) AND (`Sitio` = @Original_Sitio))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@FirstName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FirstName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@MiddleName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MiddleName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@LastName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Sex"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sex"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@CivilStatus"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CivilStatus"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@BirthPlace"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BirthPlace"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Citizenship"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Citizenship"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Religion"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Religion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@BloodType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BloodType"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@TelNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TelNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@MobileNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MobileNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@HighSchool"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HighSchool"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@HSAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HSAddress"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@College"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "College"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@CAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CAddress"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Requirements"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Text
            param.IsNullable = true
            param.SourceColumn = "Requirements"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Encoder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Encoder"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@BirthDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "BirthDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AdmissionDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "AdmissionDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@GraduationDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "GraduationDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Guardian"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Guardian"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@GuardianContact"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianContact"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@GuardianAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianAddress"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@ImagePath"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ImagePath"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Elementary"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Elementary"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@ElemAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ElemAddress"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@GuardianRelationship"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianRelationship"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@GuardianTelNo"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianTelNo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@EmailAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EmailAddress"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Father"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Father"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@FOccupation"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FOccupation"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Mother"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Mother"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@MOccupation"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MOccupation"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Age"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Age"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Title"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Title"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Pronoun"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Pronoun"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Pronoun2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Pronoun2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Pronoun3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Pronoun3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Ethnicity"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Ethnicity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@ParentsMonthly"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ParentsMonthly"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Province"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Province"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@City"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "City"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Brgy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Brgy"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Sitio"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sitio"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_FirstName"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "FirstName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_FirstName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FirstName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_MiddleName"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "MiddleName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_MiddleName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MiddleName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_LastName"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LastName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_LastName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LastName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Sex"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sex"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_CivilStatus"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CivilStatus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_BirthPlace"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BirthPlace"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Citizenship"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Citizenship"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Religion"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Religion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_BloodType"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "BloodType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_TelNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TelNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_MobileNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MobileNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_HighSchool"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HighSchool"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_HSAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HSAddress"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_College"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "College"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_CAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "CAddress"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Encoder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Encoder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_BirthDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "BirthDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_AdmissionDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "AdmissionDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_GraduationDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "GraduationDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Guardian"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Guardian"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_GuardianContact"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianContact"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_GuardianAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianAddress"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ImagePath"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ImagePath"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Elementary"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Elementary"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ElemAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ElemAddress"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_GuardianRelationship"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianRelationship"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_GuardianTelNo"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GuardianTelNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_EmailAddress"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "EmailAddress"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Father"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Father"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_FOccupation"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FOccupation"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Mother"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Mother"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_MOccupation"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "MOccupation"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Age"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Age"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Title"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Title"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Pronoun"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Pronoun"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Pronoun2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Pronoun2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Pronoun3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Pronoun3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Ethnicity"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Ethnicity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_ParentsMonthly"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ParentsMonthly"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Province"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Province"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_City"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "City"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Brgy"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Brgy"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Sitio"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sitio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        studeprofile.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            studeprofile"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.studeprofileDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.studeprofileDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.studeprofileDataTable = New Reports.studeprofileDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Reports.studeprofileDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Reports) As Integer
            Return Me.Adapter.Update(dataSet, "studeprofile")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_StudentNumber As String,  _
                    ByVal Original_FirstName As String,  _
                    ByVal Original_MiddleName As String,  _
                    ByVal Original_LastName As String,  _
                    ByVal Original_Sex As String,  _
                    ByVal Original_CivilStatus As String,  _
                    ByVal Original_BirthPlace As String,  _
                    ByVal Original_Citizenship As String,  _
                    ByVal Original_Religion As String,  _
                    ByVal Original_BloodType As String,  _
                    ByVal Original_TelNumber As String,  _
                    ByVal Original_MobileNumber As String,  _
                    ByVal Original_HighSchool As String,  _
                    ByVal Original_HSAddress As String,  _
                    ByVal Original_College As String,  _
                    ByVal Original_CAddress As String,  _
                    ByVal Original_Encoder As String,  _
                    ByVal Original_BirthDate As Date,  _
                    ByVal Original_AdmissionDate As Date,  _
                    ByVal Original_GraduationDate As Date,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_GuardianContact As String,  _
                    ByVal Original_GuardianAddress As String,  _
                    ByVal Original_ImagePath As String,  _
                    ByVal Original_Course As String,  _
                    ByVal Original_Elementary As String,  _
                    ByVal Original_ElemAddress As String,  _
                    ByVal Original_GuardianRelationship As String,  _
                    ByVal Original_GuardianTelNo As String,  _
                    ByVal Original_EmailAddress As String,  _
                    ByVal Original_Father As String,  _
                    ByVal Original_FOccupation As String,  _
                    ByVal Original_Mother As String,  _
                    ByVal Original_MOccupation As String,  _
                    ByVal Original_Age As String,  _
                    ByVal Original_Title As String,  _
                    ByVal Original_Pronoun As String,  _
                    ByVal Original_Pronoun2 As String,  _
                    ByVal Original_Pronoun3 As String,  _
                    ByVal Original_Ethnicity As String,  _
                    ByVal Original_ParentsMonthly As Double,  _
                    ByVal Original_Province As String,  _
                    ByVal Original_City As String,  _
                    ByVal Original_Brgy As String,  _
                    ByVal Original_Sitio As String) As Integer
            If (Original_StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentNumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_StudentNumber,String)
            End If
            If (Original_FirstName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FirstName,String)
            End If
            If (Original_MiddleName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MiddleName,String)
            End If
            If (Original_LastName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_LastName,String)
            End If
            If (Original_Sex Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Sex")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Sex,String)
            End If
            If (Original_CivilStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CivilStatus")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CivilStatus,String)
            End If
            If (Original_BirthPlace Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BirthPlace")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_BirthPlace,String)
            End If
            If (Original_Citizenship Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Citizenship")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Citizenship,String)
            End If
            If (Original_Religion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Religion")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Religion,String)
            End If
            If (Original_BloodType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BloodType")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_BloodType,String)
            End If
            If (Original_TelNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TelNumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_TelNumber,String)
            End If
            If (Original_MobileNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MobileNumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_MobileNumber,String)
            End If
            If (Original_HighSchool Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HighSchool")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_HighSchool,String)
            End If
            If (Original_HSAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HSAddress")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_HSAddress,String)
            End If
            If (Original_College Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_College")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_College,String)
            End If
            If (Original_CAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CAddress")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_CAddress,String)
            End If
            If (Original_Encoder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Encoder")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_Encoder,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_BirthDate,Date)
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_AdmissionDate,Date)
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_GraduationDate,Date)
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_Guardian,String)
            End If
            If (Original_GuardianContact Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GuardianContact")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_GuardianContact,String)
            End If
            If (Original_GuardianAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GuardianAddress")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_GuardianAddress,String)
            End If
            If (Original_ImagePath Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ImagePath")
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_ImagePath,String)
            End If
            If (Original_Course Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Course")
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_Course,String)
            End If
            If (Original_Elementary Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Elementary")
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Elementary,String)
            End If
            If (Original_ElemAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ElemAddress")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_ElemAddress,String)
            End If
            If (Original_GuardianRelationship Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GuardianRelationship")
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_GuardianRelationship,String)
            End If
            If (Original_GuardianTelNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GuardianTelNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_GuardianTelNo,String)
            End If
            If (Original_EmailAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_EmailAddress")
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_EmailAddress,String)
            End If
            If (Original_Father Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Father")
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_Father,String)
            End If
            If (Original_FOccupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FOccupation")
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_FOccupation,String)
            End If
            If (Original_Mother Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Mother")
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_Mother,String)
            End If
            If (Original_MOccupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MOccupation")
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_MOccupation,String)
            End If
            If (Original_Age Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Age")
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_Age,String)
            End If
            If (Original_Title Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Title")
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_Title,String)
            End If
            If (Original_Pronoun Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pronoun")
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_Pronoun,String)
            End If
            If (Original_Pronoun2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pronoun2")
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_Pronoun2,String)
            End If
            If (Original_Pronoun3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pronoun3")
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_Pronoun3,String)
            End If
            If (Original_Ethnicity Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Ethnicity")
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_Ethnicity,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_ParentsMonthly,Double)
            If (Original_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Province")
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_Province,String)
            End If
            If (Original_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_City")
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_City,String)
            End If
            If (Original_Brgy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Brgy")
            Else
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_Brgy,String)
            End If
            If (Original_Sitio Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Sitio")
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_Sitio,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal StudentNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Sex As String,  _
                    ByVal CivilStatus As String,  _
                    ByVal BirthPlace As String,  _
                    ByVal Citizenship As String,  _
                    ByVal Religion As String,  _
                    ByVal BloodType As String,  _
                    ByVal TelNumber As String,  _
                    ByVal MobileNumber As String,  _
                    ByVal HighSchool As String,  _
                    ByVal HSAddress As String,  _
                    ByVal College As String,  _
                    ByVal CAddress As String,  _
                    ByVal Requirements As String,  _
                    ByVal Encoder As String,  _
                    ByVal BirthDate As Date,  _
                    ByVal AdmissionDate As Date,  _
                    ByVal GraduationDate As Date,  _
                    ByVal Guardian As String,  _
                    ByVal GuardianContact As String,  _
                    ByVal GuardianAddress As String,  _
                    ByVal ImagePath As String,  _
                    ByVal Course As String,  _
                    ByVal Elementary As String,  _
                    ByVal ElemAddress As String,  _
                    ByVal GuardianRelationship As String,  _
                    ByVal GuardianTelNo As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Father As String,  _
                    ByVal FOccupation As String,  _
                    ByVal Mother As String,  _
                    ByVal MOccupation As String,  _
                    ByVal Age As String,  _
                    ByVal Title As String,  _
                    ByVal Pronoun As String,  _
                    ByVal Pronoun2 As String,  _
                    ByVal Pronoun3 As String,  _
                    ByVal Ethnicity As String,  _
                    ByVal ParentsMonthly As Double,  _
                    ByVal Province As String,  _
                    ByVal City As String,  _
                    ByVal Brgy As String,  _
                    ByVal Sitio As String) As Integer
            If (StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentNumber")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(StudentNumber,String)
            End If
            If (FirstName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FirstName,String)
            End If
            If (MiddleName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MiddleName,String)
            End If
            If (LastName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LastName,String)
            End If
            If (Sex Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Sex")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Sex,String)
            End If
            If (CivilStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CivilStatus")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CivilStatus,String)
            End If
            If (BirthPlace Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BirthPlace")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(BirthPlace,String)
            End If
            If (Citizenship Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Citizenship")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Citizenship,String)
            End If
            If (Religion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Religion")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Religion,String)
            End If
            If (BloodType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BloodType")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(BloodType,String)
            End If
            If (TelNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TelNumber")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(TelNumber,String)
            End If
            If (MobileNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MobileNumber")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(MobileNumber,String)
            End If
            If (HighSchool Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HighSchool")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(HighSchool,String)
            End If
            If (HSAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HSAddress")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(HSAddress,String)
            End If
            If (College Is Nothing) Then
                Throw New Global.System.ArgumentNullException("College")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(College,String)
            End If
            If (CAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CAddress")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(CAddress,String)
            End If
            If (Requirements Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Requirements")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Requirements,String)
            End If
            If (Encoder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Encoder")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Encoder,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(BirthDate,Date)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(AdmissionDate,Date)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(GraduationDate,Date)
            If (Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Guardian")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Guardian,String)
            End If
            If (GuardianContact Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GuardianContact")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(GuardianContact,String)
            End If
            If (GuardianAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GuardianAddress")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(GuardianAddress,String)
            End If
            If (ImagePath Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ImagePath")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(ImagePath,String)
            End If
            If (Course Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Course")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Course,String)
            End If
            If (Elementary Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Elementary")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(Elementary,String)
            End If
            If (ElemAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ElemAddress")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(ElemAddress,String)
            End If
            If (GuardianRelationship Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GuardianRelationship")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(GuardianRelationship,String)
            End If
            If (GuardianTelNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GuardianTelNo")
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(GuardianTelNo,String)
            End If
            If (EmailAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EmailAddress")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(EmailAddress,String)
            End If
            If (Father Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Father")
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(Father,String)
            End If
            If (FOccupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FOccupation")
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(FOccupation,String)
            End If
            If (Mother Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Mother")
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(Mother,String)
            End If
            If (MOccupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MOccupation")
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(MOccupation,String)
            End If
            If (Age Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Age")
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(Age,String)
            End If
            If (Title Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Title")
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(Title,String)
            End If
            If (Pronoun Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pronoun")
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(Pronoun,String)
            End If
            If (Pronoun2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pronoun2")
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(Pronoun2,String)
            End If
            If (Pronoun3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pronoun3")
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(Pronoun3,String)
            End If
            If (Ethnicity Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Ethnicity")
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(Ethnicity,String)
            End If
            Me.Adapter.InsertCommand.Parameters(41).Value = CType(ParentsMonthly,Double)
            If (Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Province")
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(Province,String)
            End If
            If (City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("City")
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(City,String)
            End If
            If (Brgy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Brgy")
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(Brgy,String)
            End If
            If (Sitio Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Sitio")
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(Sitio,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal StudentNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Sex As String,  _
                    ByVal CivilStatus As String,  _
                    ByVal BirthPlace As String,  _
                    ByVal Citizenship As String,  _
                    ByVal Religion As String,  _
                    ByVal BloodType As String,  _
                    ByVal TelNumber As String,  _
                    ByVal MobileNumber As String,  _
                    ByVal HighSchool As String,  _
                    ByVal HSAddress As String,  _
                    ByVal College As String,  _
                    ByVal CAddress As String,  _
                    ByVal Requirements As String,  _
                    ByVal Encoder As String,  _
                    ByVal BirthDate As Date,  _
                    ByVal AdmissionDate As Date,  _
                    ByVal GraduationDate As Date,  _
                    ByVal Guardian As String,  _
                    ByVal GuardianContact As String,  _
                    ByVal GuardianAddress As String,  _
                    ByVal ImagePath As String,  _
                    ByVal Course As String,  _
                    ByVal Elementary As String,  _
                    ByVal ElemAddress As String,  _
                    ByVal GuardianRelationship As String,  _
                    ByVal GuardianTelNo As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Father As String,  _
                    ByVal FOccupation As String,  _
                    ByVal Mother As String,  _
                    ByVal MOccupation As String,  _
                    ByVal Age As String,  _
                    ByVal Title As String,  _
                    ByVal Pronoun As String,  _
                    ByVal Pronoun2 As String,  _
                    ByVal Pronoun3 As String,  _
                    ByVal Ethnicity As String,  _
                    ByVal ParentsMonthly As Double,  _
                    ByVal Province As String,  _
                    ByVal City As String,  _
                    ByVal Brgy As String,  _
                    ByVal Sitio As String,  _
                    ByVal Original_StudentNumber As String,  _
                    ByVal Original_FirstName As String,  _
                    ByVal Original_MiddleName As String,  _
                    ByVal Original_LastName As String,  _
                    ByVal Original_Sex As String,  _
                    ByVal Original_CivilStatus As String,  _
                    ByVal Original_BirthPlace As String,  _
                    ByVal Original_Citizenship As String,  _
                    ByVal Original_Religion As String,  _
                    ByVal Original_BloodType As String,  _
                    ByVal Original_TelNumber As String,  _
                    ByVal Original_MobileNumber As String,  _
                    ByVal Original_HighSchool As String,  _
                    ByVal Original_HSAddress As String,  _
                    ByVal Original_College As String,  _
                    ByVal Original_CAddress As String,  _
                    ByVal Original_Encoder As String,  _
                    ByVal Original_BirthDate As Date,  _
                    ByVal Original_AdmissionDate As Date,  _
                    ByVal Original_GraduationDate As Date,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_GuardianContact As String,  _
                    ByVal Original_GuardianAddress As String,  _
                    ByVal Original_ImagePath As String,  _
                    ByVal Original_Course As String,  _
                    ByVal Original_Elementary As String,  _
                    ByVal Original_ElemAddress As String,  _
                    ByVal Original_GuardianRelationship As String,  _
                    ByVal Original_GuardianTelNo As String,  _
                    ByVal Original_EmailAddress As String,  _
                    ByVal Original_Father As String,  _
                    ByVal Original_FOccupation As String,  _
                    ByVal Original_Mother As String,  _
                    ByVal Original_MOccupation As String,  _
                    ByVal Original_Age As String,  _
                    ByVal Original_Title As String,  _
                    ByVal Original_Pronoun As String,  _
                    ByVal Original_Pronoun2 As String,  _
                    ByVal Original_Pronoun3 As String,  _
                    ByVal Original_Ethnicity As String,  _
                    ByVal Original_ParentsMonthly As Double,  _
                    ByVal Original_Province As String,  _
                    ByVal Original_City As String,  _
                    ByVal Original_Brgy As String,  _
                    ByVal Original_Sitio As String) As Integer
            If (StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(StudentNumber,String)
            End If
            If (FirstName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FirstName,String)
            End If
            If (MiddleName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MiddleName,String)
            End If
            If (LastName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LastName,String)
            End If
            If (Sex Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Sex")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Sex,String)
            End If
            If (CivilStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CivilStatus")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CivilStatus,String)
            End If
            If (BirthPlace Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BirthPlace")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(BirthPlace,String)
            End If
            If (Citizenship Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Citizenship")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Citizenship,String)
            End If
            If (Religion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Religion")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Religion,String)
            End If
            If (BloodType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BloodType")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(BloodType,String)
            End If
            If (TelNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TelNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(TelNumber,String)
            End If
            If (MobileNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MobileNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(MobileNumber,String)
            End If
            If (HighSchool Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HighSchool")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(HighSchool,String)
            End If
            If (HSAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HSAddress")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(HSAddress,String)
            End If
            If (College Is Nothing) Then
                Throw New Global.System.ArgumentNullException("College")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(College,String)
            End If
            If (CAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CAddress")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(CAddress,String)
            End If
            If (Requirements Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Requirements")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Requirements,String)
            End If
            If (Encoder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Encoder")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Encoder,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(BirthDate,Date)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(AdmissionDate,Date)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(GraduationDate,Date)
            If (Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Guardian,String)
            End If
            If (GuardianContact Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GuardianContact")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(GuardianContact,String)
            End If
            If (GuardianAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GuardianAddress")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(GuardianAddress,String)
            End If
            If (ImagePath Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ImagePath")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(ImagePath,String)
            End If
            If (Course Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Course")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Course,String)
            End If
            If (Elementary Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Elementary")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Elementary,String)
            End If
            If (ElemAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ElemAddress")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(ElemAddress,String)
            End If
            If (GuardianRelationship Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GuardianRelationship")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(GuardianRelationship,String)
            End If
            If (GuardianTelNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GuardianTelNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(GuardianTelNo,String)
            End If
            If (EmailAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EmailAddress")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(EmailAddress,String)
            End If
            If (Father Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Father")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Father,String)
            End If
            If (FOccupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FOccupation")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(FOccupation,String)
            End If
            If (Mother Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Mother")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Mother,String)
            End If
            If (MOccupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MOccupation")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(MOccupation,String)
            End If
            If (Age Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Age")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Age,String)
            End If
            If (Title Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Title")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Title,String)
            End If
            If (Pronoun Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pronoun")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Pronoun,String)
            End If
            If (Pronoun2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pronoun2")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Pronoun2,String)
            End If
            If (Pronoun3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pronoun3")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Pronoun3,String)
            End If
            If (Ethnicity Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Ethnicity")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Ethnicity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(ParentsMonthly,Double)
            If (Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Province")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Province,String)
            End If
            If (City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("City")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(City,String)
            End If
            If (Brgy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Brgy")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Brgy,String)
            End If
            If (Sitio Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Sitio")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Sitio,String)
            End If
            If (Original_StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_StudentNumber,String)
            End If
            If (Original_FirstName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_FirstName,String)
            End If
            If (Original_MiddleName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_MiddleName,String)
            End If
            If (Original_LastName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_LastName,String)
            End If
            If (Original_Sex Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Sex")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_Sex,String)
            End If
            If (Original_CivilStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CivilStatus")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_CivilStatus,String)
            End If
            If (Original_BirthPlace Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BirthPlace")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_BirthPlace,String)
            End If
            If (Original_Citizenship Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Citizenship")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_Citizenship,String)
            End If
            If (Original_Religion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Religion")
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_Religion,String)
            End If
            If (Original_BloodType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BloodType")
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_BloodType,String)
            End If
            If (Original_TelNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TelNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_TelNumber,String)
            End If
            If (Original_MobileNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MobileNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_MobileNumber,String)
            End If
            If (Original_HighSchool Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HighSchool")
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_HighSchool,String)
            End If
            If (Original_HSAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HSAddress")
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_HSAddress,String)
            End If
            If (Original_College Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_College")
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_College,String)
            End If
            If (Original_CAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CAddress")
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_CAddress,String)
            End If
            If (Original_Encoder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Encoder")
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_Encoder,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_BirthDate,Date)
            Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_AdmissionDate,Date)
            Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_GraduationDate,Date)
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_Guardian,String)
            End If
            If (Original_GuardianContact Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GuardianContact")
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_GuardianContact,String)
            End If
            If (Original_GuardianAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GuardianAddress")
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_GuardianAddress,String)
            End If
            If (Original_ImagePath Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ImagePath")
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_ImagePath,String)
            End If
            If (Original_Course Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Course")
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_Course,String)
            End If
            If (Original_Elementary Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Elementary")
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_Elementary,String)
            End If
            If (Original_ElemAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ElemAddress")
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_ElemAddress,String)
            End If
            If (Original_GuardianRelationship Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GuardianRelationship")
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_GuardianRelationship,String)
            End If
            If (Original_GuardianTelNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GuardianTelNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_GuardianTelNo,String)
            End If
            If (Original_EmailAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_EmailAddress")
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_EmailAddress,String)
            End If
            If (Original_Father Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Father")
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_Father,String)
            End If
            If (Original_FOccupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FOccupation")
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_FOccupation,String)
            End If
            If (Original_Mother Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Mother")
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_Mother,String)
            End If
            If (Original_MOccupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MOccupation")
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_MOccupation,String)
            End If
            If (Original_Age Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Age")
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_Age,String)
            End If
            If (Original_Title Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Title")
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_Title,String)
            End If
            If (Original_Pronoun Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pronoun")
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_Pronoun,String)
            End If
            If (Original_Pronoun2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pronoun2")
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_Pronoun2,String)
            End If
            If (Original_Pronoun3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pronoun3")
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_Pronoun3,String)
            End If
            If (Original_Ethnicity Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Ethnicity")
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_Ethnicity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_ParentsMonthly,Double)
            If (Original_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Province")
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_Province,String)
            End If
            If (Original_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_City")
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_City,String)
            End If
            If (Original_Brgy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Brgy")
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_Brgy,String)
            End If
            If (Original_Sitio Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Sitio")
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_Sitio,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal LastName As String,  _
                    ByVal Sex As String,  _
                    ByVal CivilStatus As String,  _
                    ByVal BirthPlace As String,  _
                    ByVal Citizenship As String,  _
                    ByVal Religion As String,  _
                    ByVal BloodType As String,  _
                    ByVal TelNumber As String,  _
                    ByVal MobileNumber As String,  _
                    ByVal HighSchool As String,  _
                    ByVal HSAddress As String,  _
                    ByVal College As String,  _
                    ByVal CAddress As String,  _
                    ByVal Requirements As String,  _
                    ByVal Encoder As String,  _
                    ByVal BirthDate As Date,  _
                    ByVal AdmissionDate As Date,  _
                    ByVal GraduationDate As Date,  _
                    ByVal Guardian As String,  _
                    ByVal GuardianContact As String,  _
                    ByVal GuardianAddress As String,  _
                    ByVal ImagePath As String,  _
                    ByVal Course As String,  _
                    ByVal Elementary As String,  _
                    ByVal ElemAddress As String,  _
                    ByVal GuardianRelationship As String,  _
                    ByVal GuardianTelNo As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal Father As String,  _
                    ByVal FOccupation As String,  _
                    ByVal Mother As String,  _
                    ByVal MOccupation As String,  _
                    ByVal Age As String,  _
                    ByVal Title As String,  _
                    ByVal Pronoun As String,  _
                    ByVal Pronoun2 As String,  _
                    ByVal Pronoun3 As String,  _
                    ByVal Ethnicity As String,  _
                    ByVal ParentsMonthly As Double,  _
                    ByVal Province As String,  _
                    ByVal City As String,  _
                    ByVal Brgy As String,  _
                    ByVal Sitio As String,  _
                    ByVal Original_StudentNumber As String,  _
                    ByVal Original_FirstName As String,  _
                    ByVal Original_MiddleName As String,  _
                    ByVal Original_LastName As String,  _
                    ByVal Original_Sex As String,  _
                    ByVal Original_CivilStatus As String,  _
                    ByVal Original_BirthPlace As String,  _
                    ByVal Original_Citizenship As String,  _
                    ByVal Original_Religion As String,  _
                    ByVal Original_BloodType As String,  _
                    ByVal Original_TelNumber As String,  _
                    ByVal Original_MobileNumber As String,  _
                    ByVal Original_HighSchool As String,  _
                    ByVal Original_HSAddress As String,  _
                    ByVal Original_College As String,  _
                    ByVal Original_CAddress As String,  _
                    ByVal Original_Encoder As String,  _
                    ByVal Original_BirthDate As Date,  _
                    ByVal Original_AdmissionDate As Date,  _
                    ByVal Original_GraduationDate As Date,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_GuardianContact As String,  _
                    ByVal Original_GuardianAddress As String,  _
                    ByVal Original_ImagePath As String,  _
                    ByVal Original_Course As String,  _
                    ByVal Original_Elementary As String,  _
                    ByVal Original_ElemAddress As String,  _
                    ByVal Original_GuardianRelationship As String,  _
                    ByVal Original_GuardianTelNo As String,  _
                    ByVal Original_EmailAddress As String,  _
                    ByVal Original_Father As String,  _
                    ByVal Original_FOccupation As String,  _
                    ByVal Original_Mother As String,  _
                    ByVal Original_MOccupation As String,  _
                    ByVal Original_Age As String,  _
                    ByVal Original_Title As String,  _
                    ByVal Original_Pronoun As String,  _
                    ByVal Original_Pronoun2 As String,  _
                    ByVal Original_Pronoun3 As String,  _
                    ByVal Original_Ethnicity As String,  _
                    ByVal Original_ParentsMonthly As Double,  _
                    ByVal Original_Province As String,  _
                    ByVal Original_City As String,  _
                    ByVal Original_Brgy As String,  _
                    ByVal Original_Sitio As String) As Integer
            Return Me.Update(Original_StudentNumber, FirstName, MiddleName, LastName, Sex, CivilStatus, BirthPlace, Citizenship, Religion, BloodType, TelNumber, MobileNumber, HighSchool, HSAddress, College, CAddress, Requirements, Encoder, BirthDate, AdmissionDate, GraduationDate, Guardian, GuardianContact, GuardianAddress, ImagePath, Course, Elementary, ElemAddress, GuardianRelationship, GuardianTelNo, EmailAddress, Father, FOccupation, Mother, MOccupation, Age, Title, Pronoun, Pronoun2, Pronoun3, Ethnicity, ParentsMonthly, Province, City, Brgy, Sitio, Original_StudentNumber, Original_FirstName, Original_MiddleName, Original_LastName, Original_Sex, Original_CivilStatus, Original_BirthPlace, Original_Citizenship, Original_Religion, Original_BloodType, Original_TelNumber, Original_MobileNumber, Original_HighSchool, Original_HSAddress, Original_College, Original_CAddress, Original_Encoder, Original_BirthDate, Original_AdmissionDate, Original_GraduationDate, Original_Guardian, Original_GuardianContact, Original_GuardianAddress, Original_ImagePath, Original_Course, Original_Elementary, Original_ElemAddress, Original_GuardianRelationship, Original_GuardianTelNo, Original_EmailAddress, Original_Father, Original_FOccupation, Original_Mother, Original_MOccupation, Original_Age, Original_Title, Original_Pronoun, Original_Pronoun2, Original_Pronoun3, Original_Ethnicity, Original_ParentsMonthly, Original_Province, Original_City, Original_Brgy, Original_Sitio)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class incomestatementTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "incomestatement"
            tableMapping.ColumnMappings.Add("isID", "isID")
            tableMapping.ColumnMappings.Add("DateFrom", "DateFrom")
            tableMapping.ColumnMappings.Add("DateTo", "DateTo")
            tableMapping.ColumnMappings.Add("StudeAccts", "StudeAccts")
            tableMapping.ColumnMappings.Add("Services", "Services")
            tableMapping.ColumnMappings.Add("Expenses", "Expenses")
            tableMapping.ColumnMappings.Add("NetIncome", "NetIncome")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `srmscollege_demo`.`incomestatement` WHERE ((`isID` = @Original_isID)"& _ 
                " AND (`DateFrom` = @Original_DateFrom) AND (`DateTo` = @Original_DateTo) AND (`S"& _ 
                "tudeAccts` = @Original_StudeAccts) AND (`Expenses` = @Original_Expenses) AND (`N"& _ 
                "etIncome` = @Original_NetIncome))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_isID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "isID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_DateFrom"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "DateFrom"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_DateTo"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "DateTo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudeAccts"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "StudeAccts"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Expenses"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Expenses"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_NetIncome"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "NetIncome"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `srmscollege_demo`.`incomestatement` (`DateFrom`, `DateTo`, `StudeAcc"& _ 
                "ts`, `Expenses`, `NetIncome`) VALUES (@DateFrom, @DateTo, @StudeAccts, @Expenses"& _ 
                ", @NetIncome)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@DateFrom"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "DateFrom"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@DateTo"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "DateTo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@StudeAccts"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "StudeAccts"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Expenses"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Expenses"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@NetIncome"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "NetIncome"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `srmscollege_demo`.`incomestatement` SET `DateFrom` = @DateFrom, `DateTo` "& _ 
                "= @DateTo, `StudeAccts` = @StudeAccts, `Expenses` = @Expenses, `NetIncome` = @Ne"& _ 
                "tIncome WHERE ((`isID` = @Original_isID) AND (`DateFrom` = @Original_DateFrom) A"& _ 
                "ND (`DateTo` = @Original_DateTo) AND (`StudeAccts` = @Original_StudeAccts) AND ("& _ 
                "`Expenses` = @Original_Expenses) AND (`NetIncome` = @Original_NetIncome))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@DateFrom"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "DateFrom"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@DateTo"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "DateTo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@StudeAccts"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "StudeAccts"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Expenses"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Expenses"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@NetIncome"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "NetIncome"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_isID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "isID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_DateFrom"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "DateFrom"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_DateTo"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "DateTo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudeAccts"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "StudeAccts"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Expenses"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Expenses"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_NetIncome"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "NetIncome"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SELECT        incomestatement.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      FR"& _ 
                "OM            incomestatement"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.incomestatementDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.incomestatementDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.incomestatementDataTable = New Reports.incomestatementDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Reports.incomestatementDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Reports) As Integer
            Return Me.Adapter.Update(dataSet, "incomestatement")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_isID As UInteger, ByVal Original_DateFrom As Date, ByVal Original_DateTo As Date, ByVal Original_StudeAccts As Double, ByVal Original_Expenses As Double, ByVal Original_NetIncome As Double) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_isID,UInteger)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DateFrom,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DateTo,Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_StudeAccts,Double)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Expenses,Double)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_NetIncome,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal StudeAccts As Double, ByVal Expenses As Double, ByVal NetIncome As Double) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(DateTo,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(StudeAccts,Double)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Expenses,Double)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(NetIncome,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal StudeAccts As Double, ByVal Expenses As Double, ByVal NetIncome As Double, ByVal Original_isID As UInteger, ByVal Original_DateFrom As Date, ByVal Original_DateTo As Date, ByVal Original_StudeAccts As Double, ByVal Original_Expenses As Double, ByVal Original_NetIncome As Double) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DateFrom,Date)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DateTo,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(StudeAccts,Double)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Expenses,Double)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(NetIncome,Double)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_isID,UInteger)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_DateFrom,Date)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_DateTo,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_StudeAccts,Double)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Expenses,Double)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_NetIncome,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class promissoryNotesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "promissoryNotes"
            tableMapping.ColumnMappings.Add("promissoryID", "promissoryID")
            tableMapping.ColumnMappings.Add("DateApplied", "DateApplied")
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("Guardian", "Guardian")
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            tableMapping.ColumnMappings.Add("PromisedDate", "PromisedDate")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("Sem", "Sem")
            tableMapping.ColumnMappings.Add("SY", "SY")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `srmscollege_demo`.`promissory` WHERE ((`promissoryID` = @Original_pr"& _ 
                "omissoryID) AND (`DateApplied` = @Original_DateApplied) AND (`StudentNumber` = @"& _ 
                "Original_StudentNumber) AND (`Guardian` = @Original_Guardian) AND (`Amount` = @O"& _ 
                "riginal_Amount) AND (`PromisedDate` = @Original_PromisedDate) AND (`Status` = @O"& _ 
                "riginal_Status) AND (`Sem` = @Original_Sem) AND (`SY` = @Original_SY))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_promissoryID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "promissoryID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_DateApplied"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "DateApplied"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Guardian"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Guardian"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Amount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Amount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_PromisedDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PromisedDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Status"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Sem"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `srmscollege_demo`.`promissory` SET `DateApplied` = @DateApplied, `Student"& _ 
                "Number` = @StudentNumber, `Guardian` = @Guardian, `Amount` = @Amount, `PromisedD"& _ 
                "ate` = @PromisedDate, `Status` = @Status, `Sem` = @Sem, `SY` = @SY WHERE ((`prom"& _ 
                "issoryID` = @Original_promissoryID) AND (`DateApplied` = @Original_DateApplied) "& _ 
                "AND (`StudentNumber` = @Original_StudentNumber) AND (`Guardian` = @Original_Guar"& _ 
                "dian) AND (`Amount` = @Original_Amount) AND (`PromisedDate` = @Original_Promised"& _ 
                "Date) AND (`Status` = @Original_Status) AND (`Sem` = @Original_Sem) AND (`SY` = "& _ 
                "@Original_SY))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@DateApplied"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "DateApplied"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Guardian"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Guardian"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Amount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Amount"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@PromisedDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PromisedDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Status"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Status"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Sem"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_promissoryID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "promissoryID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_DateApplied"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "DateApplied"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_StudentNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Guardian"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Guardian"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Amount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Amount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_PromisedDate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "PromisedDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Status"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Sem"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Sem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select promissoryID, DateApplied, StudentNumber, concat(LastName,', ',FirstName) "& _ 
                "as Name, Guardian, Amount, PromisedDate, Status, Sem, SY from promissory"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.promissoryNotesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.promissoryNotesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.promissoryNotesDataTable = New Reports.promissoryNotesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Reports.promissoryNotesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Reports) As Integer
            Return Me.Adapter.Update(dataSet, "promissoryNotes")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_promissoryID As UInteger, ByVal Original_DateApplied As Date, ByVal Original_StudentNumber As String, ByVal Original_Guardian As String, ByVal Original_Amount As Double, ByVal Original_PromisedDate As Date, ByVal Original_Status As String, ByVal Original_Sem As String, ByVal Original_SY As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_promissoryID,UInteger)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DateApplied,Date)
            If (Original_StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentNumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_StudentNumber,String)
            End If
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Guardian,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Amount,Double)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PromisedDate,Date)
            If (Original_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Status")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Status,String)
            End If
            If (Original_Sem Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Sem")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Sem,String)
            End If
            If (Original_SY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SY")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_SY,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DateApplied As Date,  _
                    ByVal StudentNumber As String,  _
                    ByVal Guardian As String,  _
                    ByVal Amount As Double,  _
                    ByVal PromisedDate As Date,  _
                    ByVal Status As String,  _
                    ByVal Sem As String,  _
                    ByVal SY As String,  _
                    ByVal Original_promissoryID As UInteger,  _
                    ByVal Original_DateApplied As Date,  _
                    ByVal Original_StudentNumber As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Amount As Double,  _
                    ByVal Original_PromisedDate As Date,  _
                    ByVal Original_Status As String,  _
                    ByVal Original_Sem As String,  _
                    ByVal Original_SY As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DateApplied,Date)
            If (StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(StudentNumber,String)
            End If
            If (Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Guardian,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Amount,Double)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PromisedDate,Date)
            If (Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Status,String)
            End If
            If (Sem Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Sem")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Sem,String)
            End If
            If (SY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SY")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SY,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_promissoryID,UInteger)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_DateApplied,Date)
            If (Original_StudentNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_StudentNumber,String)
            End If
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Guardian,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Amount,Double)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_PromisedDate,Date)
            If (Original_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Status,String)
            End If
            If (Original_Sem Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Sem")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Sem,String)
            End If
            If (Original_SY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SY")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_SY,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class companyTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "company"
            tableMapping.ColumnMappings.Add("compID", "compID")
            tableMapping.ColumnMappings.Add("Company", "Company")
            tableMapping.ColumnMappings.Add("Address1", "Address1")
            tableMapping.ColumnMappings.Add("Address2", "Address2")
            tableMapping.ColumnMappings.Add("TelNo", "TelNo")
            tableMapping.ColumnMappings.Add("Website", "Website")
            tableMapping.ColumnMappings.Add("Email", "Email")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `srmscollege_demo`.`company` WHERE ((`compID` = @Original_compID) AND"& _ 
                " (`Company` = @Original_Company) AND (`Address1` = @Original_Address1) AND (`Add"& _ 
                "ress2` = @Original_Address2) AND (`TelNo` = @Original_TelNo) AND (`Website` = @O"& _ 
                "riginal_Website) AND (`Email` = @Original_Email))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_compID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "compID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Company"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Company"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Address1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Address2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_TelNo"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TelNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Website"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Website"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Email"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `srmscollege_demo`.`company` (`Company`, `Address1`, `Address2`, `Tel"& _ 
                "No`, `Website`, `Email`) VALUES (@Company, @Address1, @Address2, @TelNo, @Websit"& _ 
                "e, @Email)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Company"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Company"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Address1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Address2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@TelNo"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TelNo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Website"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Website"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Email"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `srmscollege_demo`.`company` SET `Company` = @Company, `Address1` = @Addre"& _ 
                "ss1, `Address2` = @Address2, `TelNo` = @TelNo, `Website` = @Website, `Email` = @"& _ 
                "Email WHERE ((`compID` = @Original_compID) AND (`Company` = @Original_Company) A"& _ 
                "ND (`Address1` = @Original_Address1) AND (`Address2` = @Original_Address2) AND ("& _ 
                "`TelNo` = @Original_TelNo) AND (`Website` = @Original_Website) AND (`Email` = @O"& _ 
                "riginal_Email))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Company"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Company"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Address1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Address2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@TelNo"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TelNo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Website"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Website"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Email"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_compID"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "compID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Company"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Company"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Address1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Address2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_TelNo"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TelNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Website"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Website"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Email"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM company"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.companyDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.companyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.companyDataTable = New Reports.companyDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Reports.companyDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Reports) As Integer
            Return Me.Adapter.Update(dataSet, "company")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_compID As UInteger, ByVal Original_Company As String, ByVal Original_Address1 As String, ByVal Original_Address2 As String, ByVal Original_TelNo As String, ByVal Original_Website As String, ByVal Original_Email As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_compID,UInteger)
            If (Original_Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Company")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Company,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Address2,String)
            End If
            If (Original_TelNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TelNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_TelNo,String)
            End If
            If (Original_Website Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Website")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Website,String)
            End If
            If (Original_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Email")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Email,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Company As String, ByVal Address1 As String, ByVal Address2 As String, ByVal TelNo As String, ByVal Website As String, ByVal Email As String) As Integer
            If (Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Company")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Company,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Address2,String)
            End If
            If (TelNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TelNo")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TelNo,String)
            End If
            If (Website Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Website")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Website,String)
            End If
            If (Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Email")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Email,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Company As String, ByVal Address1 As String, ByVal Address2 As String, ByVal TelNo As String, ByVal Website As String, ByVal Email As String, ByVal Original_compID As UInteger, ByVal Original_Company As String, ByVal Original_Address1 As String, ByVal Original_Address2 As String, ByVal Original_TelNo As String, ByVal Original_Website As String, ByVal Original_Email As String) As Integer
            If (Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Company")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Company,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Address2,String)
            End If
            If (TelNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TelNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TelNo,String)
            End If
            If (Website Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Website")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Website,String)
            End If
            If (Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Email")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Email,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_compID,UInteger)
            If (Original_Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Company")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Company,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Address2,String)
            End If
            If (Original_TelNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TelNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_TelNo,String)
            End If
            If (Original_Website Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Website")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Website,String)
            End If
            If (Original_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Email")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Email,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SchedulesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Schedules"
            tableMapping.ColumnMappings.Add("subjectid", "subjectid")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("LecUnit", "LecUnit")
            tableMapping.ColumnMappings.Add("LabUnit", "LabUnit")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("LabTime", "LabTime")
            tableMapping.ColumnMappings.Add("SchedTime", "SchedTime")
            tableMapping.ColumnMappings.Add("Room", "Room")
            tableMapping.ColumnMappings.Add("Slot", "Slot")
            tableMapping.ColumnMappings.Add("IDNumber", "IDNumber")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("Instructor", "Instructor")
            tableMapping.ColumnMappings.Add("Time1", "Time1")
            tableMapping.ColumnMappings.Add("AM1", "AM1")
            tableMapping.ColumnMappings.Add("Time2", "Time2")
            tableMapping.ColumnMappings.Add("AM2", "AM2")
            tableMapping.ColumnMappings.Add("Time3", "Time3")
            tableMapping.ColumnMappings.Add("AM3", "AM3")
            tableMapping.ColumnMappings.Add("Time4", "Time4")
            tableMapping.ColumnMappings.Add("AM4", "AM4")
            tableMapping.ColumnMappings.Add("Days1", "Days1")
            tableMapping.ColumnMappings.Add("Days2", "Days2")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("SubjectStatus", "SubjectStatus")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `srmscollege_demo`.`semsubjects` WHERE ((`subjectid` = @Original_subj"& _ 
                "ectid) AND (`SubjectCode` = @Original_SubjectCode) AND ((@IsNull_Description = 1"& _ 
                " AND `Description` IS NULL) OR (`Description` = @Original_Description)) AND ((@I"& _ 
                "sNull_LecUnit = 1 AND `LecUnit` IS NULL) OR (`LecUnit` = @Original_LecUnit)) AND"& _ 
                " ((@IsNull_LabUnit = 1 AND `LabUnit` IS NULL) OR (`LabUnit` = @Original_LabUnit)"& _ 
                ") AND ((@IsNull_Section = 1 AND `Section` IS NULL) OR (`Section` = @Original_Sec"& _ 
                "tion)) AND ((@IsNull_LabTime = 1 AND `LabTime` IS NULL) OR (`LabTime` = @Origina"& _ 
                "l_LabTime)) AND ((@IsNull_SchedTime = 1 AND `SchedTime` IS NULL) OR (`SchedTime`"& _ 
                " = @Original_SchedTime)) AND ((@IsNull_Room = 1 AND `Room` IS NULL) OR (`Room` ="& _ 
                " @Original_Room)) AND ((@IsNull_Slot = 1 AND `Slot` IS NULL) OR (`Slot` = @Origi"& _ 
                "nal_Slot)) AND (`IDNumber` = @Original_IDNumber) AND ((@IsNull_SY = 1 AND `SY` I"& _ 
                "S NULL) OR (`SY` = @Original_SY)) AND ((@IsNull_Semester = 1 AND `Semester` IS N"& _ 
                "ULL) OR (`Semester` = @Original_Semester)) AND ((@IsNull_Instructor = 1 AND `Ins"& _ 
                "tructor` IS NULL) OR (`Instructor` = @Original_Instructor)) AND (`Time1` = @Orig"& _ 
                "inal_Time1) AND (`AM1` = @Original_AM1) AND (`Time2` = @Original_Time2) AND (`AM"& _ 
                "2` = @Original_AM2) AND (`Time3` = @Original_Time3) AND (`AM3` = @Original_AM3) "& _ 
                "AND (`Time4` = @Original_Time4) AND (`AM4` = @Original_AM4) AND (`Days1` = @Orig"& _ 
                "inal_Days1) AND (`Days2` = @Original_Days2) AND (`Course` = @Original_Course) AN"& _ 
                "D (`YearLevel` = @Original_YearLevel) AND (`SubjectStatus` = @Original_SubjectSt"& _ 
                "atus))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_subjectid"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "subjectid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_SubjectCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SubjectCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_Description"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Description"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_LecUnit"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LecUnit"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_LecUnit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LecUnit"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_LabUnit"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LabUnit"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_LabUnit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LabUnit"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_Section"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Section"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Section"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Section"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_LabTime"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LabTime"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_LabTime"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LabTime"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_SchedTime"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "SchedTime"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_SchedTime"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SchedTime"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_Room"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Room"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Room"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Room"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_Slot"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Slot"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Slot"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Slot"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_IDNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "IDNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_SY"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "SY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_Semester"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Semester"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Semester"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Semester"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_Instructor"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Instructor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Instructor"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Instructor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Time1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_AM1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Time2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_AM2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Time3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_AM3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Time4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_AM4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Days1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Days1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Days2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Days2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_YearLevel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "YearLevel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_SubjectStatus"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SubjectStatus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `srmscollege_demo`.`semsubjects` (`SubjectCode`, `Description`, `LecU"& _ 
                "nit`, `LabUnit`, `Section`, `LabTime`, `SchedTime`, `Room`, `Slot`, `IDNumber`, "& _ 
                "`SY`, `Semester`, `Instructor`, `Time1`, `AM1`, `Time2`, `AM2`, `Time3`, `AM3`, "& _ 
                "`Time4`, `AM4`, `Days1`, `Days2`, `Course`, `YearLevel`, `SubjectStatus`) VALUES"& _ 
                " (@SubjectCode, @Description, @LecUnit, @LabUnit, @Section, @LabTime, @SchedTime"& _ 
                ", @Room, @Slot, @IDNumber, @SY, @Semester, @Instructor, @Time1, @AM1, @Time2, @A"& _ 
                "M2, @Time3, @AM3, @Time4, @AM4, @Days1, @Days2, @Course, @YearLevel, @SubjectSta"& _ 
                "tus)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@SubjectCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SubjectCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Description"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Description"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@LecUnit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LecUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@LabUnit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LabUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Section"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Section"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@LabTime"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LabTime"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@SchedTime"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SchedTime"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Room"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Room"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Slot"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Slot"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IDNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "IDNumber"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Semester"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Semester"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Instructor"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Instructor"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Time1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AM1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Time2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AM2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Time3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AM3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Time4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AM4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Days1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Days1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Days2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Days2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@YearLevel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "YearLevel"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@SubjectStatus"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SubjectStatus"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `srmscollege_demo`.`semsubjects` SET `SubjectCode` = @SubjectCode, `Descri"& _ 
                "ption` = @Description, `LecUnit` = @LecUnit, `LabUnit` = @LabUnit, `Section` = @"& _ 
                "Section, `LabTime` = @LabTime, `SchedTime` = @SchedTime, `Room` = @Room, `Slot` "& _ 
                "= @Slot, `IDNumber` = @IDNumber, `SY` = @SY, `Semester` = @Semester, `Instructor"& _ 
                "` = @Instructor, `Time1` = @Time1, `AM1` = @AM1, `Time2` = @Time2, `AM2` = @AM2,"& _ 
                " `Time3` = @Time3, `AM3` = @AM3, `Time4` = @Time4, `AM4` = @AM4, `Days1` = @Days"& _ 
                "1, `Days2` = @Days2, `Course` = @Course, `YearLevel` = @YearLevel, `SubjectStatu"& _ 
                "s` = @SubjectStatus WHERE ((`subjectid` = @Original_subjectid) AND (`SubjectCode"& _ 
                "` = @Original_SubjectCode) AND ((@IsNull_Description = 1 AND `Description` IS NU"& _ 
                "LL) OR (`Description` = @Original_Description)) AND ((@IsNull_LecUnit = 1 AND `L"& _ 
                "ecUnit` IS NULL) OR (`LecUnit` = @Original_LecUnit)) AND ((@IsNull_LabUnit = 1 A"& _ 
                "ND `LabUnit` IS NULL) OR (`LabUnit` = @Original_LabUnit)) AND ((@IsNull_Section "& _ 
                "= 1 AND `Section` IS NULL) OR (`Section` = @Original_Section)) AND ((@IsNull_Lab"& _ 
                "Time = 1 AND `LabTime` IS NULL) OR (`LabTime` = @Original_LabTime)) AND ((@IsNul"& _ 
                "l_SchedTime = 1 AND `SchedTime` IS NULL) OR (`SchedTime` = @Original_SchedTime))"& _ 
                " AND ((@IsNull_Room = 1 AND `Room` IS NULL) OR (`Room` = @Original_Room)) AND (("& _ 
                "@IsNull_Slot = 1 AND `Slot` IS NULL) OR (`Slot` = @Original_Slot)) AND (`IDNumbe"& _ 
                "r` = @Original_IDNumber) AND ((@IsNull_SY = 1 AND `SY` IS NULL) OR (`SY` = @Orig"& _ 
                "inal_SY)) AND ((@IsNull_Semester = 1 AND `Semester` IS NULL) OR (`Semester` = @O"& _ 
                "riginal_Semester)) AND ((@IsNull_Instructor = 1 AND `Instructor` IS NULL) OR (`I"& _ 
                "nstructor` = @Original_Instructor)) AND (`Time1` = @Original_Time1) AND (`AM1` ="& _ 
                " @Original_AM1) AND (`Time2` = @Original_Time2) AND (`AM2` = @Original_AM2) AND "& _ 
                "(`Time3` = @Original_Time3) AND (`AM3` = @Original_AM3) AND (`Time4` = @Original"& _ 
                "_Time4) AND (`AM4` = @Original_AM4) AND (`Days1` = @Original_Days1) AND (`Days2`"& _ 
                " = @Original_Days2) AND (`Course` = @Original_Course) AND (`YearLevel` = @Origin"& _ 
                "al_YearLevel) AND (`SubjectStatus` = @Original_SubjectStatus))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@SubjectCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SubjectCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Description"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Description"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@LecUnit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LecUnit"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@LabUnit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LabUnit"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Section"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Section"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@LabTime"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LabTime"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@SchedTime"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SchedTime"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Room"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Room"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Slot"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Slot"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IDNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "IDNumber"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Semester"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Semester"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Instructor"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Instructor"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Time1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AM1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Time2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AM2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Time3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AM3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Time4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AM4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Days1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Days1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Days2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Days2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@YearLevel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "YearLevel"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@SubjectStatus"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SubjectStatus"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_subjectid"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "subjectid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_SubjectCode"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SubjectCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_Description"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Description"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_LecUnit"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LecUnit"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_LecUnit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LecUnit"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_LabUnit"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LabUnit"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_LabUnit"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LabUnit"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_Section"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Section"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Section"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Section"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_LabTime"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LabTime"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_LabTime"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LabTime"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_SchedTime"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "SchedTime"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_SchedTime"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SchedTime"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_Room"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Room"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Room"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Room"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_Slot"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Slot"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Slot"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Slot"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_IDNumber"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "IDNumber"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_SY"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "SY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_Semester"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Semester"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Semester"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Semester"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@IsNull_Instructor"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Instructor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Instructor"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Instructor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Time1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_AM1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Time2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_AM2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Time3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_AM3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Time4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Time4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_AM4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AM4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Days1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Days1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Days2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Days2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_Course"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Course"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_YearLevel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "YearLevel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_SubjectStatus"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SubjectStatus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SELECT        semsubjects.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      FROM  "& _ 
                "          semsubjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.SchedulesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.SchedulesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.SchedulesDataTable = New Reports.SchedulesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Reports.SchedulesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Reports) As Integer
            Return Me.Adapter.Update(dataSet, "Schedules")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_subjectid As UInteger,  _
                    ByVal Original_SubjectCode As String,  _
                    ByVal Original_Description As String,  _
                    ByVal Original_LecUnit As String,  _
                    ByVal Original_LabUnit As String,  _
                    ByVal Original_Section As String,  _
                    ByVal Original_LabTime As String,  _
                    ByVal Original_SchedTime As String,  _
                    ByVal Original_Room As String,  _
                    ByVal Original_Slot As String,  _
                    ByVal Original_IDNumber As String,  _
                    ByVal Original_SY As String,  _
                    ByVal Original_Semester As String,  _
                    ByVal Original_Instructor As String,  _
                    ByVal Original_Time1 As String,  _
                    ByVal Original_AM1 As String,  _
                    ByVal Original_Time2 As String,  _
                    ByVal Original_AM2 As String,  _
                    ByVal Original_Time3 As String,  _
                    ByVal Original_AM3 As String,  _
                    ByVal Original_Time4 As String,  _
                    ByVal Original_AM4 As String,  _
                    ByVal Original_Days1 As String,  _
                    ByVal Original_Days2 As String,  _
                    ByVal Original_Course As String,  _
                    ByVal Original_YearLevel As String,  _
                    ByVal Original_SubjectStatus As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_subjectid,UInteger)
            If (Original_SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SubjectCode,String)
            End If
            If (Original_Description Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Description,String)
            End If
            If (Original_LecUnit Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_LecUnit,String)
            End If
            If (Original_LabUnit Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_LabUnit,String)
            End If
            If (Original_Section Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Section,String)
            End If
            If (Original_LabTime Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_LabTime,String)
            End If
            If (Original_SchedTime Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_SchedTime,String)
            End If
            If (Original_Room Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_Room,String)
            End If
            If (Original_Slot Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_Slot,String)
            End If
            If (Original_IDNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IDNumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_IDNumber,String)
            End If
            If (Original_SY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_SY,String)
            End If
            If (Original_Semester Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Semester,String)
            End If
            If (Original_Instructor Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Instructor,String)
            End If
            If (Original_Time1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Time1")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_Time1,String)
            End If
            If (Original_AM1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AM1")
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_AM1,String)
            End If
            If (Original_Time2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Time2")
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_Time2,String)
            End If
            If (Original_AM2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AM2")
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_AM2,String)
            End If
            If (Original_Time3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Time3")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_Time3,String)
            End If
            If (Original_AM3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AM3")
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_AM3,String)
            End If
            If (Original_Time4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Time4")
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_Time4,String)
            End If
            If (Original_AM4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AM4")
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_AM4,String)
            End If
            If (Original_Days1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Days1")
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_Days1,String)
            End If
            If (Original_Days2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Days2")
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_Days2,String)
            End If
            If (Original_Course Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Course")
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_Course,String)
            End If
            If (Original_YearLevel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_YearLevel")
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_YearLevel,String)
            End If
            If (Original_SubjectStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectStatus")
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_SubjectStatus,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal SubjectCode As String,  _
                    ByVal Description As String,  _
                    ByVal LecUnit As String,  _
                    ByVal LabUnit As String,  _
                    ByVal Section As String,  _
                    ByVal LabTime As String,  _
                    ByVal SchedTime As String,  _
                    ByVal Room As String,  _
                    ByVal Slot As String,  _
                    ByVal IDNumber As String,  _
                    ByVal SY As String,  _
                    ByVal Semester As String,  _
                    ByVal Instructor As String,  _
                    ByVal Time1 As String,  _
                    ByVal AM1 As String,  _
                    ByVal Time2 As String,  _
                    ByVal AM2 As String,  _
                    ByVal Time3 As String,  _
                    ByVal AM3 As String,  _
                    ByVal Time4 As String,  _
                    ByVal AM4 As String,  _
                    ByVal Days1 As String,  _
                    ByVal Days2 As String,  _
                    ByVal Course As String,  _
                    ByVal YearLevel As String,  _
                    ByVal SubjectStatus As String) As Integer
            If (SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectCode")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SubjectCode,String)
            End If
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Description,String)
            End If
            If (LecUnit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LecUnit,String)
            End If
            If (LabUnit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LabUnit,String)
            End If
            If (Section Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Section,String)
            End If
            If (LabTime Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(LabTime,String)
            End If
            If (SchedTime Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SchedTime,String)
            End If
            If (Room Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Room,String)
            End If
            If (Slot Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Slot,String)
            End If
            If (IDNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDNumber")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(IDNumber,String)
            End If
            If (SY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SY,String)
            End If
            If (Semester Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Semester,String)
            End If
            If (Instructor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Instructor,String)
            End If
            If (Time1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Time1")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Time1,String)
            End If
            If (AM1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AM1")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(AM1,String)
            End If
            If (Time2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Time2")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Time2,String)
            End If
            If (AM2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AM2")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(AM2,String)
            End If
            If (Time3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Time3")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Time3,String)
            End If
            If (AM3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AM3")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(AM3,String)
            End If
            If (Time4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Time4")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Time4,String)
            End If
            If (AM4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AM4")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(AM4,String)
            End If
            If (Days1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Days1")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Days1,String)
            End If
            If (Days2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Days2")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Days2,String)
            End If
            If (Course Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Course")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(Course,String)
            End If
            If (YearLevel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("YearLevel")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(YearLevel,String)
            End If
            If (SubjectStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectStatus")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(SubjectStatus,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SubjectCode As String,  _
                    ByVal Description As String,  _
                    ByVal LecUnit As String,  _
                    ByVal LabUnit As String,  _
                    ByVal Section As String,  _
                    ByVal LabTime As String,  _
                    ByVal SchedTime As String,  _
                    ByVal Room As String,  _
                    ByVal Slot As String,  _
                    ByVal IDNumber As String,  _
                    ByVal SY As String,  _
                    ByVal Semester As String,  _
                    ByVal Instructor As String,  _
                    ByVal Time1 As String,  _
                    ByVal AM1 As String,  _
                    ByVal Time2 As String,  _
                    ByVal AM2 As String,  _
                    ByVal Time3 As String,  _
                    ByVal AM3 As String,  _
                    ByVal Time4 As String,  _
                    ByVal AM4 As String,  _
                    ByVal Days1 As String,  _
                    ByVal Days2 As String,  _
                    ByVal Course As String,  _
                    ByVal YearLevel As String,  _
                    ByVal SubjectStatus As String,  _
                    ByVal Original_subjectid As UInteger,  _
                    ByVal Original_SubjectCode As String,  _
                    ByVal Original_Description As String,  _
                    ByVal Original_LecUnit As String,  _
                    ByVal Original_LabUnit As String,  _
                    ByVal Original_Section As String,  _
                    ByVal Original_LabTime As String,  _
                    ByVal Original_SchedTime As String,  _
                    ByVal Original_Room As String,  _
                    ByVal Original_Slot As String,  _
                    ByVal Original_IDNumber As String,  _
                    ByVal Original_SY As String,  _
                    ByVal Original_Semester As String,  _
                    ByVal Original_Instructor As String,  _
                    ByVal Original_Time1 As String,  _
                    ByVal Original_AM1 As String,  _
                    ByVal Original_Time2 As String,  _
                    ByVal Original_AM2 As String,  _
                    ByVal Original_Time3 As String,  _
                    ByVal Original_AM3 As String,  _
                    ByVal Original_Time4 As String,  _
                    ByVal Original_AM4 As String,  _
                    ByVal Original_Days1 As String,  _
                    ByVal Original_Days2 As String,  _
                    ByVal Original_Course As String,  _
                    ByVal Original_YearLevel As String,  _
                    ByVal Original_SubjectStatus As String) As Integer
            If (SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SubjectCode,String)
            End If
            If (Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Description,String)
            End If
            If (LecUnit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LecUnit,String)
            End If
            If (LabUnit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LabUnit,String)
            End If
            If (Section Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Section,String)
            End If
            If (LabTime Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(LabTime,String)
            End If
            If (SchedTime Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SchedTime,String)
            End If
            If (Room Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Room,String)
            End If
            If (Slot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Slot,String)
            End If
            If (IDNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(IDNumber,String)
            End If
            If (SY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SY,String)
            End If
            If (Semester Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Semester,String)
            End If
            If (Instructor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Instructor,String)
            End If
            If (Time1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Time1")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Time1,String)
            End If
            If (AM1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AM1")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(AM1,String)
            End If
            If (Time2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Time2")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Time2,String)
            End If
            If (AM2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AM2")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(AM2,String)
            End If
            If (Time3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Time3")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Time3,String)
            End If
            If (AM3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AM3")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(AM3,String)
            End If
            If (Time4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Time4")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Time4,String)
            End If
            If (AM4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AM4")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(AM4,String)
            End If
            If (Days1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Days1")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Days1,String)
            End If
            If (Days2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Days2")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Days2,String)
            End If
            If (Course Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Course")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Course,String)
            End If
            If (YearLevel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("YearLevel")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(YearLevel,String)
            End If
            If (SubjectStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectStatus")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(SubjectStatus,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_subjectid,UInteger)
            If (Original_SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_SubjectCode,String)
            End If
            If (Original_Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Description,String)
            End If
            If (Original_LecUnit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_LecUnit,String)
            End If
            If (Original_LabUnit Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_LabUnit,String)
            End If
            If (Original_Section Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Section,String)
            End If
            If (Original_LabTime Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_LabTime,String)
            End If
            If (Original_SchedTime Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_SchedTime,String)
            End If
            If (Original_Room Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_Room,String)
            End If
            If (Original_Slot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_Slot,String)
            End If
            If (Original_IDNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IDNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_IDNumber,String)
            End If
            If (Original_SY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_SY,String)
            End If
            If (Original_Semester Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_Semester,String)
            End If
            If (Original_Instructor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_Instructor,String)
            End If
            If (Original_Time1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Time1")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_Time1,String)
            End If
            If (Original_AM1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AM1")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_AM1,String)
            End If
            If (Original_Time2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Time2")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_Time2,String)
            End If
            If (Original_AM2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AM2")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_AM2,String)
            End If
            If (Original_Time3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Time3")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_Time3,String)
            End If
            If (Original_AM3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AM3")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_AM3,String)
            End If
            If (Original_Time4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Time4")
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_Time4,String)
            End If
            If (Original_AM4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AM4")
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_AM4,String)
            End If
            If (Original_Days1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Days1")
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_Days1,String)
            End If
            If (Original_Days2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Days2")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_Days2,String)
            End If
            If (Original_Course Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Course")
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_Course,String)
            End If
            If (Original_YearLevel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_YearLevel")
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_YearLevel,String)
            End If
            If (Original_SubjectStatus Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectStatus")
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_SubjectStatus,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ClearanceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Clearance"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("Fullname", "Fullname")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("LecUnit", "LecUnit")
            tableMapping.ColumnMappings.Add("LabUnit", "LabUnit")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("SchedTime", "SchedTime")
            tableMapping.ColumnMappings.Add("LabTime", "LabTime")
            tableMapping.ColumnMappings.Add("Room", "Room")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("Semester1", "Semester1")
            tableMapping.ColumnMappings.Add("SY1", "SY1")
            tableMapping.ColumnMappings.Add("Instructor", "Instructor")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select r.StudentNumber, concat(p.FirstName,' ',p.MiddleName,' ',p.LastName) as Fu"& _ 
                "llname, s.Course, s.YearLevel, r.SubjectCode, r.Description, r.LecUnit, r.LabUni"& _ 
                "t, r.Section, ss.SchedTime, ss.LabTime, ss.Room, ss.Semester, ss.SY, s.Semester,"& _ 
                " s.SY, concat(sf.FirstName,' ',sf.LastName) as Instructor from registration r jo"& _ 
                "in semsubjects ss on ss.SubjectCode = r.SubjectCode join semesterstude s on s.St"& _ 
                "udentNumber = r.StudentNumber join studeprofile p on p.StudentNumber = r.Student"& _ 
                "Number join staff sf on sf.IDNumber=ss.IDNumber"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.ClearanceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.ClearanceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.ClearanceDataTable = New Reports.ClearanceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class scholarshipListingTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "scholarshipListing"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MI", "MI")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("YearLevel1", "YearLevel1")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("Scholarship", "Scholarship")
            tableMapping.ColumnMappings.Add("prevGPA", "prevGPA")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, p.LastName, p.FirstName, MID(p.MiddleName,1,1) as MI, s.Y"& _ 
                "earLevel, s.YearLevel, s.Course, s.Scholarship, s.prevGPA, s.Semester, s.SY, st."& _ 
                "SchoolName, st.SchoolAddress from studeprofile p join semesterstude s on p.Stude"& _ 
                "ntNumber=s.StudentNumber join srms_settings st on s.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.scholarshipListingDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.scholarshipListingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.scholarshipListingDataTable = New Reports.scholarshipListingDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class civilStatTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "civilStat"
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName")
            tableMapping.ColumnMappings.Add("CivilStatus", "CivilStatus")
            tableMapping.ColumnMappings.Add("YearLevel", "YearLevel")
            tableMapping.ColumnMappings.Add("YearLevel1", "YearLevel1")
            tableMapping.ColumnMappings.Add("Course", "Course")
            tableMapping.ColumnMappings.Add("Scholarship", "Scholarship")
            tableMapping.ColumnMappings.Add("prevGPA", "prevGPA")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select p.StudentNumber, p.LastName, p.FirstName, p.MiddleName, p.CivilStatus, s.Y"& _ 
                "earLevel, s.YearLevel, s.Course, s.Scholarship, s.prevGPA, s.Semester, s.SY, st."& _ 
                "SchoolName, st.SchoolAddress from studeprofile p join semesterstude s on p.Stude"& _ 
                "ntNumber=s.StudentNumber join srms_settings st on s.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.civilStatDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.civilStatDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.civilStatDataTable = New Reports.civilStatDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MR"
            tableMapping.ColumnMappings.Add("ctrlNo", "ctrlNo")
            tableMapping.ColumnMappings.Add("itemName", "itemName")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("itemCondition", "itemCondition")
            tableMapping.ColumnMappings.Add("serialNo", "serialNo")
            tableMapping.ColumnMappings.Add("model", "model")
            tableMapping.ColumnMappings.Add("notes", "notes")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("unit", "unit")
            tableMapping.ColumnMappings.Add("acquiredDate", "acquiredDate")
            tableMapping.ColumnMappings.Add("Accountable", "Accountable")
            tableMapping.ColumnMappings.Add("empPosition", "empPosition")
            tableMapping.ColumnMappings.Add("Department", "Department")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("PropertyCustodian", "PropertyCustodian")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT i.ctrlNo, i.itemName, i.description, i.itemCondition, i.serialNo, i.model,"& _ 
                " i.notes, i.qty, i.unit, i.acquiredDate, concat(s.FirstName,' ',s.MiddleName,' '"& _ 
                ",s.LastName) as Accountable, s.empPosition, s.Department, st.SchoolName, st.Scho"& _ 
                "olAddress, st.Division, st.PropertyCustodian, st.letterHead from ls_items i join"& _ 
                " staff s on i.IDNumber=s.IDNumber join srms_settings st on i.settingsID=st.setti"& _ 
                "ngsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.MRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.MRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.MRDataTable = New Reports.MRDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ls_itemsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ls_items"
            tableMapping.ColumnMappings.Add("ctrlNo", "ctrlNo")
            tableMapping.ColumnMappings.Add("itemName", "itemName")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("itemCondition", "itemCondition")
            tableMapping.ColumnMappings.Add("serialNo", "serialNo")
            tableMapping.ColumnMappings.Add("model", "model")
            tableMapping.ColumnMappings.Add("accountable", "accountable")
            tableMapping.ColumnMappings.Add("acquiredDate", "acquiredDate")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            tableMapping.ColumnMappings.Add("SchoolHead", "SchoolHead")
            tableMapping.ColumnMappings.Add("sHeadPosition", "sHeadPosition")
            tableMapping.ColumnMappings.Add("PropertyCustodian", "PropertyCustodian")
            tableMapping.ColumnMappings.Add("empPosition", "empPosition")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT i.ctrlNo, i.itemName, i.description, i.itemCondition, i.serialNo, i.model,"& _ 
                " i.accountable, i.acquiredDate, ss.Division, ss.SchoolName, ss.SchoolAddress, ss"& _ 
                ".letterHead, ss.SchoolHead, ss.sHeadPosition, ss.PropertyCustodian, st.empPositi"& _ 
                "on FROM ls_items i join srms_settings ss on i.settingsID=ss.settingsID join staf"& _ 
                "f st on i.IDNumber=st.IDNumber"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.ls_itemsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.ls_itemsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.ls_itemsDataTable = New Reports.ls_itemsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class byauthorTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "byauthor"
            tableMapping.ColumnMappings.Add("BookNo", "BookNo")
            tableMapping.ColumnMappings.Add("Title", "Title")
            tableMapping.ColumnMappings.Add("Category", "Category")
            tableMapping.ColumnMappings.Add("Author", "Author")
            tableMapping.ColumnMappings.Add("BookStatus", "BookStatus")
            tableMapping.ColumnMappings.Add("letterHead", "letterHead")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.SIMS.My.MySettings.Default.srmscollege_demoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select lb.BookNo, lb.Title, lb.Category,lb.Author, lb.BookStatus, st.letterHead f"& _ 
                "rom libbookentry lb join srms_settings st on lb.settingsID=st.settingsID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Reports.byauthorDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Reports.byauthorDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Reports.byauthorDataTable = New Reports.byauthorDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _paymentsaccountsTableAdapter As paymentsaccountsTableAdapter
        
        Private _collectionsSummaryTableAdapter As CollectionsSummaryTableAdapter
        
        Private _studeprofileTableAdapter As studeprofileTableAdapter
        
        Private _incomestatementTableAdapter As incomestatementTableAdapter
        
        Private _promissoryNotesTableAdapter As promissoryNotesTableAdapter
        
        Private _companyTableAdapter As companyTableAdapter
        
        Private _schedulesTableAdapter As SchedulesTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property paymentsaccountsTableAdapter() As paymentsaccountsTableAdapter
            Get
                Return Me._paymentsaccountsTableAdapter
            End Get
            Set
                Me._paymentsaccountsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CollectionsSummaryTableAdapter() As CollectionsSummaryTableAdapter
            Get
                Return Me._collectionsSummaryTableAdapter
            End Get
            Set
                Me._collectionsSummaryTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property studeprofileTableAdapter() As studeprofileTableAdapter
            Get
                Return Me._studeprofileTableAdapter
            End Get
            Set
                Me._studeprofileTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property incomestatementTableAdapter() As incomestatementTableAdapter
            Get
                Return Me._incomestatementTableAdapter
            End Get
            Set
                Me._incomestatementTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property promissoryNotesTableAdapter() As promissoryNotesTableAdapter
            Get
                Return Me._promissoryNotesTableAdapter
            End Get
            Set
                Me._promissoryNotesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property companyTableAdapter() As companyTableAdapter
            Get
                Return Me._companyTableAdapter
            End Get
            Set
                Me._companyTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SchedulesTableAdapter() As SchedulesTableAdapter
            Get
                Return Me._schedulesTableAdapter
            End Get
            Set
                Me._schedulesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._paymentsaccountsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._paymentsaccountsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._paymentsaccountsTableAdapter.Connection
                End If
                If ((Not (Me._collectionsSummaryTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._collectionsSummaryTableAdapter.Connection) Is Nothing)) Then
                    Return Me._collectionsSummaryTableAdapter.Connection
                End If
                If ((Not (Me._studeprofileTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._studeprofileTableAdapter.Connection) Is Nothing)) Then
                    Return Me._studeprofileTableAdapter.Connection
                End If
                If ((Not (Me._incomestatementTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._incomestatementTableAdapter.Connection) Is Nothing)) Then
                    Return Me._incomestatementTableAdapter.Connection
                End If
                If ((Not (Me._promissoryNotesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._promissoryNotesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._promissoryNotesTableAdapter.Connection
                End If
                If ((Not (Me._companyTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._companyTableAdapter.Connection) Is Nothing)) Then
                    Return Me._companyTableAdapter.Connection
                End If
                If ((Not (Me._schedulesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._schedulesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._schedulesTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._paymentsaccountsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._collectionsSummaryTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._studeprofileTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._incomestatementTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._promissoryNotesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._companyTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._schedulesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As Reports, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._studeprofileTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.studeprofile.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._studeprofileTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._schedulesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Schedules.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._schedulesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._companyTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.company.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._companyTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._collectionsSummaryTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CollectionsSummary.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._collectionsSummaryTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._paymentsaccountsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.paymentsaccounts.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._paymentsaccountsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._promissoryNotesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.promissoryNotes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._promissoryNotesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._incomestatementTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.incomestatement.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._incomestatementTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As Reports, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._studeprofileTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.studeprofile.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._studeprofileTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._schedulesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Schedules.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._schedulesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._companyTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.company.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._companyTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._collectionsSummaryTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CollectionsSummary.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._collectionsSummaryTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._paymentsaccountsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.paymentsaccounts.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._paymentsaccountsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._promissoryNotesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.promissoryNotes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._promissoryNotesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._incomestatementTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.incomestatement.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._incomestatementTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As Reports, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._incomestatementTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.incomestatement.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._incomestatementTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._promissoryNotesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.promissoryNotes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._promissoryNotesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._paymentsaccountsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.paymentsaccounts.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._paymentsaccountsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._collectionsSummaryTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CollectionsSummary.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._collectionsSummaryTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._companyTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.company.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._companyTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._schedulesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Schedules.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._schedulesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._studeprofileTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.studeprofile.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._studeprofileTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As Reports) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._paymentsaccountsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._paymentsaccountsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._collectionsSummaryTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._collectionsSummaryTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._studeprofileTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._studeprofileTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._incomestatementTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._incomestatementTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._promissoryNotesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._promissoryNotesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._companyTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._companyTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._schedulesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._schedulesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._paymentsaccountsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._paymentsaccountsTableAdapter, Me._paymentsaccountsTableAdapter.Connection)
                    Me._paymentsaccountsTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._paymentsaccountsTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._paymentsaccountsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._paymentsaccountsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._paymentsaccountsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._collectionsSummaryTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._collectionsSummaryTableAdapter, Me._collectionsSummaryTableAdapter.Connection)
                    Me._collectionsSummaryTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._collectionsSummaryTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._collectionsSummaryTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._collectionsSummaryTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._collectionsSummaryTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._studeprofileTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._studeprofileTableAdapter, Me._studeprofileTableAdapter.Connection)
                    Me._studeprofileTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._studeprofileTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._studeprofileTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._studeprofileTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._studeprofileTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._incomestatementTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._incomestatementTableAdapter, Me._incomestatementTableAdapter.Connection)
                    Me._incomestatementTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._incomestatementTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._incomestatementTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._incomestatementTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._incomestatementTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._promissoryNotesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._promissoryNotesTableAdapter, Me._promissoryNotesTableAdapter.Connection)
                    Me._promissoryNotesTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._promissoryNotesTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._promissoryNotesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._promissoryNotesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._promissoryNotesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._companyTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._companyTableAdapter, Me._companyTableAdapter.Connection)
                    Me._companyTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._companyTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._companyTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._companyTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._companyTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._schedulesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._schedulesTableAdapter, Me._schedulesTableAdapter.Connection)
                    Me._schedulesTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._schedulesTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._schedulesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._schedulesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._schedulesTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._paymentsaccountsTableAdapter) Is Nothing) Then
                    Me._paymentsaccountsTableAdapter.Connection = CType(revertConnections(Me._paymentsaccountsTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._paymentsaccountsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._collectionsSummaryTableAdapter) Is Nothing) Then
                    Me._collectionsSummaryTableAdapter.Connection = CType(revertConnections(Me._collectionsSummaryTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._collectionsSummaryTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._studeprofileTableAdapter) Is Nothing) Then
                    Me._studeprofileTableAdapter.Connection = CType(revertConnections(Me._studeprofileTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._studeprofileTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._incomestatementTableAdapter) Is Nothing) Then
                    Me._incomestatementTableAdapter.Connection = CType(revertConnections(Me._incomestatementTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._incomestatementTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._promissoryNotesTableAdapter) Is Nothing) Then
                    Me._promissoryNotesTableAdapter.Connection = CType(revertConnections(Me._promissoryNotesTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._promissoryNotesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._companyTableAdapter) Is Nothing) Then
                    Me._companyTableAdapter.Connection = CType(revertConnections(Me._companyTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._companyTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._schedulesTableAdapter) Is Nothing) Then
                    Me._schedulesTableAdapter.Connection = CType(revertConnections(Me._schedulesTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._schedulesTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
